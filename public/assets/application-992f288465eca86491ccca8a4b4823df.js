/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );
(function($, undefined) {

/**
 * Unobtrusive scripting adapter for jQuery
 * https://github.com/rails/jquery-ujs
 *
 * Requires jQuery 1.7.0 or later.
 *
 * Released under the MIT license
 *
 */

  // Cut down on the number of issues from people inadvertently including jquery_ujs twice
  // by detecting and raising an error when it happens.
  if ( $.rails !== undefined ) {
    $.error('jquery-ujs has already been loaded!');
  }

  // Shorthand to make it a little easier to call public rails functions from within rails.js
  var rails;
  var $document = $(document);

  $.rails = rails = {
    // Link elements bound by jquery-ujs
    linkClickSelector: 'a[data-confirm], a[data-method], a[data-remote], a[data-disable-with]',

    // Button elements boud jquery-ujs
    buttonClickSelector: 'button[data-remote]',

    // Select elements bound by jquery-ujs
    inputChangeSelector: 'select[data-remote], input[data-remote], textarea[data-remote]',

    // Form elements bound by jquery-ujs
    formSubmitSelector: 'form',

    // Form input elements bound by jquery-ujs
    formInputClickSelector: 'form input[type=submit], form input[type=image], form button[type=submit], form button:not([type])',

    // Form input elements disabled during form submission
    disableSelector: 'input[data-disable-with], button[data-disable-with], textarea[data-disable-with]',

    // Form input elements re-enabled after form submission
    enableSelector: 'input[data-disable-with]:disabled, button[data-disable-with]:disabled, textarea[data-disable-with]:disabled',

    // Form required input elements
    requiredInputSelector: 'input[name][required]:not([disabled]),textarea[name][required]:not([disabled])',

    // Form file input elements
    fileInputSelector: 'input[type=file]',

    // Link onClick disable selector with possible reenable after remote submission
    linkDisableSelector: 'a[data-disable-with]',

    // Make sure that every Ajax request sends the CSRF token
    CSRFProtection: function(xhr) {
      var token = $('meta[name="csrf-token"]').attr('content');
      if (token) xhr.setRequestHeader('X-CSRF-Token', token);
    },

    // Triggers an event on an element and returns false if the event result is false
    fire: function(obj, name, data) {
      var event = $.Event(name);
      obj.trigger(event, data);
      return event.result !== false;
    },

    // Default confirm dialog, may be overridden with custom confirm dialog in $.rails.confirm
    confirm: function(message) {
      return confirm(message);
    },

    // Default ajax function, may be overridden with custom function in $.rails.ajax
    ajax: function(options) {
      return $.ajax(options);
    },

    // Default way to get an element's href. May be overridden at $.rails.href.
    href: function(element) {
      return element.attr('href');
    },

    // Submits "remote" forms and links with ajax
    handleRemote: function(element) {
      var method, url, data, elCrossDomain, crossDomain, withCredentials, dataType, options;

      if (rails.fire(element, 'ajax:before')) {
        elCrossDomain = element.data('cross-domain');
        crossDomain = elCrossDomain === undefined ? null : elCrossDomain;
        withCredentials = element.data('with-credentials') || null;
        dataType = element.data('type') || ($.ajaxSettings && $.ajaxSettings.dataType);

        if (element.is('form')) {
          method = element.attr('method');
          url = element.attr('action');
          data = element.serializeArray();
          // memoized value from clicked submit button
          var button = element.data('ujs:submit-button');
          if (button) {
            data.push(button);
            element.data('ujs:submit-button', null);
          }
        } else if (element.is(rails.inputChangeSelector)) {
          method = element.data('method');
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else if (element.is(rails.buttonClickSelector)) {
          method = element.data('method') || 'get';
          url = element.data('url');
          data = element.serialize();
          if (element.data('params')) data = data + "&" + element.data('params');
        } else {
          method = element.data('method');
          url = rails.href(element);
          data = element.data('params') || null;
        }

        options = {
          type: method || 'GET', data: data, dataType: dataType,
          // stopping the "ajax:beforeSend" event will cancel the ajax request
          beforeSend: function(xhr, settings) {
            if (settings.dataType === undefined) {
              xhr.setRequestHeader('accept', '*/*;q=0.5, ' + settings.accepts.script);
            }
            return rails.fire(element, 'ajax:beforeSend', [xhr, settings]);
          },
          success: function(data, status, xhr) {
            element.trigger('ajax:success', [data, status, xhr]);
          },
          complete: function(xhr, status) {
            element.trigger('ajax:complete', [xhr, status]);
          },
          error: function(xhr, status, error) {
            element.trigger('ajax:error', [xhr, status, error]);
          },
          crossDomain: crossDomain
        };

        // There is no withCredentials for IE6-8 when
        // "Enable native XMLHTTP support" is disabled
        if (withCredentials) {
          options.xhrFields = {
            withCredentials: withCredentials
          };
        }

        // Only pass url to `ajax` options if not blank
        if (url) { options.url = url; }

        var jqxhr = rails.ajax(options);
        element.trigger('ajax:send', jqxhr);
        return jqxhr;
      } else {
        return false;
      }
    },

    // Handles "data-method" on links such as:
    // <a href="/users/5" data-method="delete" rel="nofollow" data-confirm="Are you sure?">Delete</a>
    handleMethod: function(link) {
      var href = rails.href(link),
        method = link.data('method'),
        target = link.attr('target'),
        csrf_token = $('meta[name=csrf-token]').attr('content'),
        csrf_param = $('meta[name=csrf-param]').attr('content'),
        form = $('<form method="post" action="' + href + '"></form>'),
        metadata_input = '<input name="_method" value="' + method + '" type="hidden" />';

      if (csrf_param !== undefined && csrf_token !== undefined) {
        metadata_input += '<input name="' + csrf_param + '" value="' + csrf_token + '" type="hidden" />';
      }

      if (target) { form.attr('target', target); }

      form.hide().append(metadata_input).appendTo('body');
      form.submit();
    },

    /* Disables form elements:
      - Caches element value in 'ujs:enable-with' data store
      - Replaces element text with value of 'data-disable-with' attribute
      - Sets disabled property to true
    */
    disableFormElements: function(form) {
      form.find(rails.disableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        element.data('ujs:enable-with', element[method]());
        element[method](element.data('disable-with'));
        element.prop('disabled', true);
      });
    },

    /* Re-enables disabled form elements:
      - Replaces element text with cached value from 'ujs:enable-with' data store (created in `disableFormElements`)
      - Sets disabled property to false
    */
    enableFormElements: function(form) {
      form.find(rails.enableSelector).each(function() {
        var element = $(this), method = element.is('button') ? 'html' : 'val';
        if (element.data('ujs:enable-with')) element[method](element.data('ujs:enable-with'));
        element.prop('disabled', false);
      });
    },

   /* For 'data-confirm' attribute:
      - Fires `confirm` event
      - Shows the confirmation dialog
      - Fires the `confirm:complete` event

      Returns `true` if no function stops the chain and user chose yes; `false` otherwise.
      Attaching a handler to the element's `confirm` event that returns a `falsy` value cancels the confirmation dialog.
      Attaching a handler to the element's `confirm:complete` event that returns a `falsy` value makes this function
      return false. The `confirm:complete` event is fired whether or not the user answered true or false to the dialog.
   */
    allowAction: function(element) {
      var message = element.data('confirm'),
          answer = false, callback;
      if (!message) { return true; }

      if (rails.fire(element, 'confirm')) {
        answer = rails.confirm(message);
        callback = rails.fire(element, 'confirm:complete', [answer]);
      }
      return answer && callback;
    },

    // Helper function which checks for blank inputs in a form that match the specified CSS selector
    blankInputs: function(form, specifiedSelector, nonBlank) {
      var inputs = $(), input, valueToCheck,
          selector = specifiedSelector || 'input,textarea',
          allInputs = form.find(selector);

      allInputs.each(function() {
        input = $(this);
        valueToCheck = input.is('input[type=checkbox],input[type=radio]') ? input.is(':checked') : input.val();
        // If nonBlank and valueToCheck are both truthy, or nonBlank and valueToCheck are both falsey
        if (!valueToCheck === !nonBlank) {

          // Don't count unchecked required radio if other radio with same name is checked
          if (input.is('input[type=radio]') && allInputs.filter('input[type=radio]:checked[name="' + input.attr('name') + '"]').length) {
            return true; // Skip to next input
          }

          inputs = inputs.add(input);
        }
      });
      return inputs.length ? inputs : false;
    },

    // Helper function which checks for non-blank inputs in a form that match the specified CSS selector
    nonBlankInputs: function(form, specifiedSelector) {
      return rails.blankInputs(form, specifiedSelector, true); // true specifies nonBlank
    },

    // Helper function, needed to provide consistent behavior in IE
    stopEverything: function(e) {
      $(e.target).trigger('ujs:everythingStopped');
      e.stopImmediatePropagation();
      return false;
    },

    //  replace element's html with the 'data-disable-with' after storing original html
    //  and prevent clicking on it
    disableElement: function(element) {
      element.data('ujs:enable-with', element.html()); // store enabled state
      element.html(element.data('disable-with')); // set to disabled state
      element.bind('click.railsDisable', function(e) { // prevent further clicking
        return rails.stopEverything(e);
      });
    },

    // restore element to its original state which was disabled by 'disableElement' above
    enableElement: function(element) {
      if (element.data('ujs:enable-with') !== undefined) {
        element.html(element.data('ujs:enable-with')); // set to old enabled state
        element.removeData('ujs:enable-with'); // clean up cache
      }
      element.unbind('click.railsDisable'); // enable element
    }

  };

  if (rails.fire($document, 'rails:attachBindings')) {

    $.ajaxPrefilter(function(options, originalOptions, xhr){ if ( !options.crossDomain ) { rails.CSRFProtection(xhr); }});

    $document.delegate(rails.linkDisableSelector, 'ajax:complete', function() {
        rails.enableElement($(this));
    });

    $document.delegate(rails.linkClickSelector, 'click.rails', function(e) {
      var link = $(this), method = link.data('method'), data = link.data('params');
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      if (link.is(rails.linkDisableSelector)) rails.disableElement(link);

      if (link.data('remote') !== undefined) {
        if ( (e.metaKey || e.ctrlKey) && (!method || method === 'GET') && !data ) { return true; }

        var handleRemote = rails.handleRemote(link);
        // response from rails.handleRemote() will either be false or a deferred object promise.
        if (handleRemote === false) {
          rails.enableElement(link);
        } else {
          handleRemote.error( function() { rails.enableElement(link); } );
        }
        return false;

      } else if (link.data('method')) {
        rails.handleMethod(link);
        return false;
      }
    });

    $document.delegate(rails.buttonClickSelector, 'click.rails', function(e) {
      var button = $(this);
      if (!rails.allowAction(button)) return rails.stopEverything(e);

      rails.handleRemote(button);
      return false;
    });

    $document.delegate(rails.inputChangeSelector, 'change.rails', function(e) {
      var link = $(this);
      if (!rails.allowAction(link)) return rails.stopEverything(e);

      rails.handleRemote(link);
      return false;
    });

    $document.delegate(rails.formSubmitSelector, 'submit.rails', function(e) {
      var form = $(this),
        remote = form.data('remote') !== undefined,
        blankRequiredInputs = rails.blankInputs(form, rails.requiredInputSelector),
        nonBlankFileInputs = rails.nonBlankInputs(form, rails.fileInputSelector);

      if (!rails.allowAction(form)) return rails.stopEverything(e);

      // skip other logic when required values are missing or file upload is present
      if (blankRequiredInputs && form.attr("novalidate") == undefined && rails.fire(form, 'ajax:aborted:required', [blankRequiredInputs])) {
        return rails.stopEverything(e);
      }

      if (remote) {
        if (nonBlankFileInputs) {
          // slight timeout so that the submit button gets properly serialized
          // (make it easy for event handler to serialize form without disabled values)
          setTimeout(function(){ rails.disableFormElements(form); }, 13);
          var aborted = rails.fire(form, 'ajax:aborted:file', [nonBlankFileInputs]);

          // re-enable form elements if event bindings return false (canceling normal form submission)
          if (!aborted) { setTimeout(function(){ rails.enableFormElements(form); }, 13); }

          return aborted;
        }

        rails.handleRemote(form);
        return false;

      } else {
        // slight timeout so that the submit button gets properly serialized
        setTimeout(function(){ rails.disableFormElements(form); }, 13);
      }
    });

    $document.delegate(rails.formInputClickSelector, 'click.rails', function(event) {
      var button = $(this);

      if (!rails.allowAction(button)) return rails.stopEverything(event);

      // register the pressed submit button
      var name = button.attr('name'),
        data = name ? {name:name, value:button.val()} : null;

      button.closest('form').data('ujs:submit-button', data);
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:beforeSend.rails', function(event) {
      if (this == event.target) rails.disableFormElements($(this));
    });

    $document.delegate(rails.formSubmitSelector, 'ajax:complete.rails', function(event) {
      if (this == event.target) rails.enableFormElements($(this));
    });

    $(function(){
      // making sure that all forms have actual up-to-date token(cached forms contain old one)
      var csrf_token = $('meta[name=csrf-token]').attr('content');
      var csrf_param = $('meta[name=csrf-param]').attr('content');
      $('form input[name="' + csrf_param + '"]').val(csrf_token);
    });
  }

})( jQuery );
(function() {
  var CSRFToken, anchoredLink, assetsChanged, browserCompatibleDocumentParser, browserIsntBuggy, browserSupportsPushState, cacheCurrentPage, changePage, constrainPageCacheTo, createDocument, crossOriginLink, currentState, executeScriptTags, extractLink, extractTitleAndBody, extractTrackAssets, fetchHistory, fetchReplacement, handleClick, ignoreClick, initializeTurbolinks, initialized, installClickHandlerLast, intersection, invalidContent, loadedAssets, noTurbolink, nonHtmlLink, nonStandardClick, pageCache, recallScrollPosition, referer, reflectNewUrl, reflectRedirectedUrl, rememberCurrentState, rememberCurrentUrl, rememberInitialPage, removeHash, removeNoscriptTags, requestMethod, requestMethodIsSafe, resetScrollPosition, targetLink, triggerEvent, visit, xhr, _ref,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  initialized = false;

  currentState = null;

  referer = document.location.href;

  loadedAssets = null;

  pageCache = {};

  createDocument = null;

  requestMethod = ((_ref = document.cookie.match(/request_method=(\w+)/)) != null ? _ref[1].toUpperCase() : void 0) || '';

  xhr = null;

  visit = function(url) {
    if (browserSupportsPushState && browserIsntBuggy) {
      cacheCurrentPage();
      reflectNewUrl(url);
      return fetchReplacement(url);
    } else {
      return document.location.href = url;
    }
  };

  fetchReplacement = function(url) {
    var safeUrl;
    triggerEvent('page:fetch');
    safeUrl = removeHash(url);
    if (xhr != null) {
      xhr.abort();
    }
    xhr = new XMLHttpRequest;
    xhr.open('GET', safeUrl, true);
    xhr.setRequestHeader('Accept', 'text/html, application/xhtml+xml, application/xml');
    xhr.setRequestHeader('X-XHR-Referer', referer);
    xhr.onload = (function(_this) {
      return function() {
        var doc;
        triggerEvent('page:receive');
        if (invalidContent(xhr) || assetsChanged((doc = createDocument(xhr.responseText)))) {
          return document.location.reload();
        } else {
          changePage.apply(null, extractTitleAndBody(doc));
          reflectRedirectedUrl(xhr);
          if (document.location.hash) {
            document.location.href = document.location.href;
          } else {
            resetScrollPosition();
          }
          return triggerEvent('page:load');
        }
      };
    })(this);
    xhr.onloadend = function() {
      return xhr = null;
    };
    xhr.onabort = function() {
      return rememberCurrentUrl();
    };
    xhr.onerror = function() {
      return document.location.href = url;
    };
    return xhr.send();
  };

  fetchHistory = function(state) {
    var page;
    cacheCurrentPage();
    if (page = pageCache[state.position]) {
      if (xhr != null) {
        xhr.abort();
      }
      changePage(page.title, page.body);
      recallScrollPosition(page);
      return triggerEvent('page:restore');
    } else {
      return fetchReplacement(document.location.href);
    }
  };

  cacheCurrentPage = function() {
    rememberInitialPage();
    pageCache[currentState.position] = {
      url: document.location.href,
      body: document.body,
      title: document.title,
      positionY: window.pageYOffset,
      positionX: window.pageXOffset
    };
    return constrainPageCacheTo(10);
  };

  constrainPageCacheTo = function(limit) {
    var key, value;
    for (key in pageCache) {
      if (!__hasProp.call(pageCache, key)) continue;
      value = pageCache[key];
      if (key <= currentState.position - limit) {
        pageCache[key] = null;
      }
    }
  };

  changePage = function(title, body, csrfToken, runScripts) {
    document.title = title;
    document.documentElement.replaceChild(body, document.body);
    if (csrfToken != null) {
      CSRFToken.update(csrfToken);
    }
    removeNoscriptTags();
    if (runScripts) {
      executeScriptTags();
    }
    currentState = window.history.state;
    return triggerEvent('page:change');
  };

  executeScriptTags = function() {
    var attr, copy, nextSibling, parentNode, script, scripts, _i, _j, _len, _len1, _ref1, _ref2;
    scripts = Array.prototype.slice.call(document.body.getElementsByTagName('script'));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (!((_ref1 = script.type) === '' || _ref1 === 'text/javascript')) {
        continue;
      }
      copy = document.createElement('script');
      _ref2 = script.attributes;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        attr = _ref2[_j];
        copy.setAttribute(attr.name, attr.value);
      }
      copy.appendChild(document.createTextNode(script.innerHTML));
      parentNode = script.parentNode, nextSibling = script.nextSibling;
      parentNode.removeChild(script);
      parentNode.insertBefore(copy, nextSibling);
    }
  };

  removeNoscriptTags = function() {
    var noscript, noscriptTags, _i, _len;
    noscriptTags = Array.prototype.slice.call(document.body.getElementsByTagName('noscript'));
    for (_i = 0, _len = noscriptTags.length; _i < _len; _i++) {
      noscript = noscriptTags[_i];
      noscript.parentNode.removeChild(noscript);
    }
  };

  reflectNewUrl = function(url) {
    if (url !== document.location.href) {
      referer = document.location.href;
      return window.history.pushState({
        turbolinks: true,
        position: currentState.position + 1
      }, '', url);
    }
  };

  reflectRedirectedUrl = function(xhr) {
    var location;
    if ((location = xhr.getResponseHeader('X-XHR-Current-Location')) && location !== document.location.pathname + document.location.search) {
      return window.history.replaceState(currentState, '', location + document.location.hash);
    }
  };

  rememberCurrentUrl = function() {
    return window.history.replaceState({
      turbolinks: true,
      position: Date.now()
    }, '', document.location.href);
  };

  rememberCurrentState = function() {
    return currentState = window.history.state;
  };

  rememberInitialPage = function() {
    if (!initialized) {
      rememberCurrentUrl();
      rememberCurrentState();
      createDocument = browserCompatibleDocumentParser();
      return initialized = true;
    }
  };

  recallScrollPosition = function(page) {
    return window.scrollTo(page.positionX, page.positionY);
  };

  resetScrollPosition = function() {
    return window.scrollTo(0, 0);
  };

  removeHash = function(url) {
    var link;
    link = url;
    if (url.href == null) {
      link = document.createElement('A');
      link.href = url;
    }
    return link.href.replace(link.hash, '');
  };

  triggerEvent = function(name) {
    var event;
    event = document.createEvent('Events');
    event.initEvent(name, true, true);
    return document.dispatchEvent(event);
  };

  invalidContent = function(xhr) {
    return !xhr.getResponseHeader('Content-Type').match(/^(?:text\/html|application\/xhtml\+xml|application\/xml)(?:;|$)/);
  };

  extractTrackAssets = function(doc) {
    var node, _i, _len, _ref1, _results;
    _ref1 = doc.head.childNodes;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      node = _ref1[_i];
      if ((typeof node.getAttribute === "function" ? node.getAttribute('data-turbolinks-track') : void 0) != null) {
        _results.push(node.src || node.href);
      }
    }
    return _results;
  };

  assetsChanged = function(doc) {
    var fetchedAssets;
    loadedAssets || (loadedAssets = extractTrackAssets(document));
    fetchedAssets = extractTrackAssets(doc);
    return fetchedAssets.length !== loadedAssets.length || intersection(fetchedAssets, loadedAssets).length !== loadedAssets.length;
  };

  intersection = function(a, b) {
    var value, _i, _len, _ref1, _results;
    if (a.length > b.length) {
      _ref1 = [b, a], a = _ref1[0], b = _ref1[1];
    }
    _results = [];
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      value = a[_i];
      if (__indexOf.call(b, value) >= 0) {
        _results.push(value);
      }
    }
    return _results;
  };

  extractTitleAndBody = function(doc) {
    var title;
    title = doc.querySelector('title');
    return [title != null ? title.textContent : void 0, doc.body, CSRFToken.get(doc).token, 'runScripts'];
  };

  CSRFToken = {
    get: function(doc) {
      var tag;
      if (doc == null) {
        doc = document;
      }
      return {
        node: tag = doc.querySelector('meta[name="csrf-token"]'),
        token: tag != null ? typeof tag.getAttribute === "function" ? tag.getAttribute('content') : void 0 : void 0
      };
    },
    update: function(latest) {
      var current;
      current = this.get();
      if ((current.token != null) && (latest != null) && current.token !== latest) {
        return current.node.setAttribute('content', latest);
      }
    }
  };

  browserCompatibleDocumentParser = function() {
    var createDocumentUsingDOM, createDocumentUsingParser, createDocumentUsingWrite, e, testDoc, _ref1;
    createDocumentUsingParser = function(html) {
      return (new DOMParser).parseFromString(html, 'text/html');
    };
    createDocumentUsingDOM = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.documentElement.innerHTML = html;
      return doc;
    };
    createDocumentUsingWrite = function(html) {
      var doc;
      doc = document.implementation.createHTMLDocument('');
      doc.open('replace');
      doc.write(html);
      doc.close();
      return doc;
    };
    try {
      if (window.DOMParser) {
        testDoc = createDocumentUsingParser('<html><body><p>test');
        return createDocumentUsingParser;
      }
    } catch (_error) {
      e = _error;
      testDoc = createDocumentUsingDOM('<html><body><p>test');
      return createDocumentUsingDOM;
    } finally {
      if ((testDoc != null ? (_ref1 = testDoc.body) != null ? _ref1.childNodes.length : void 0 : void 0) !== 1) {
        return createDocumentUsingWrite;
      }
    }
  };

  installClickHandlerLast = function(event) {
    if (!event.defaultPrevented) {
      document.removeEventListener('click', handleClick, false);
      return document.addEventListener('click', handleClick, false);
    }
  };

  handleClick = function(event) {
    var link;
    if (!event.defaultPrevented) {
      link = extractLink(event);
      if (link.nodeName === 'A' && !ignoreClick(event, link)) {
        visit(link.href);
        return event.preventDefault();
      }
    }
  };

  extractLink = function(event) {
    var link;
    link = event.target;
    while (!(!link.parentNode || link.nodeName === 'A')) {
      link = link.parentNode;
    }
    return link;
  };

  crossOriginLink = function(link) {
    return location.protocol !== link.protocol || location.host !== link.host;
  };

  anchoredLink = function(link) {
    return ((link.hash && removeHash(link)) === removeHash(location)) || (link.href === location.href + '#');
  };

  nonHtmlLink = function(link) {
    var url;
    url = removeHash(link);
    return url.match(/\.[a-z]+(\?.*)?$/g) && !url.match(/\.html?(\?.*)?$/g);
  };

  noTurbolink = function(link) {
    var ignore;
    while (!(ignore || link === document)) {
      ignore = link.getAttribute('data-no-turbolink') != null;
      link = link.parentNode;
    }
    return ignore;
  };

  targetLink = function(link) {
    return link.target.length !== 0;
  };

  nonStandardClick = function(event) {
    return event.which > 1 || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
  };

  ignoreClick = function(event, link) {
    return crossOriginLink(link) || anchoredLink(link) || nonHtmlLink(link) || noTurbolink(link) || targetLink(link) || nonStandardClick(event);
  };

  initializeTurbolinks = function() {
    document.addEventListener('click', installClickHandlerLast, true);
    return window.addEventListener('popstate', function(event) {
      var _ref1;
      if ((_ref1 = event.state) != null ? _ref1.turbolinks : void 0) {
        return fetchHistory(event.state);
      }
    }, false);
  };

  browserSupportsPushState = window.history && window.history.pushState && window.history.replaceState && window.history.state !== void 0;

  browserIsntBuggy = !navigator.userAgent.match(/CriOS\//);

  requestMethodIsSafe = requestMethod === 'GET' || requestMethod === '';

  if (browserSupportsPushState && browserIsntBuggy && requestMethodIsSafe) {
    initializeTurbolinks();
  }

  this.Turbolinks = {
    visit: visit
  };

}).call(this);
(function() {


}).call(this);
/*!
 * Bootstrap v3.1.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */


if (typeof jQuery === 'undefined') { throw new Error('Bootstrap\'s JavaScript requires jQuery') }

/* ========================================================================
 * Bootstrap: transition.js v3.1.1
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      'WebkitTransition' : 'webkitTransitionEnd',
      'MozTransition'    : 'transitionend',
      'OTransition'      : 'oTransitionEnd otransitionend',
      'transition'       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false, $el = this
    $(this).one($.support.transition.end, function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.1.1
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent.trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one($.support.transition.end, removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.1.1
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (!data.resetText) $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
        else $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
    e.preventDefault()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.1.1
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  }

  Carousel.prototype.cycle =  function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getActiveIndex = function () {
    this.$active = this.$element.find('.item.active')
    this.$items  = this.$active.parent().children()

    return this.$items.index(this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getActiveIndex()

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) })
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    if ($next.hasClass('active')) return this.sliding = false

    var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })
    this.$element.trigger(e)
    if (e.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      this.$element.one('slid.bs.carousel', function () {
        var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
        $nextIndicator && $nextIndicator.addClass('active')
      })
    }

    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid.bs.carousel') }, 0)
        })
        .emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger('slid.bs.carousel')
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var $this   = $(this), href
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    $target.carousel(options)

    if (slideIndex = $this.attr('data-slide-to')) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      $carousel.carousel($carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.1.1
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      actives.collapse('hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')
      [dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')
        [dimension]('auto')
      this.transitioning = 0
      this.$element.trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
      [dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element
      [dimension](this.$element[dimension]())
      [0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one($.support.transition.end, $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && option == 'show') option = !option
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this   = $(this), href
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    $target.collapse(option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.1.1
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle=dropdown]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)

      $this.focus()
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).focus()
      return $this.click()
    }

    var desc = ' li:not(.divider):visible a'
    var $items = $parent.find('[role=menu]' + desc + ', [role=listbox]' + desc)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index = 0

    $items.eq(index).focus()
  }

  function clearMenus(e) {
    $(backdrop).remove()
    $(toggle).each(function () {
      var $parent = getParent($(this))
      var relatedTarget = { relatedTarget: this }
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu], [role=listbox]', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.1.1
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options   = options
    this.$element  = $(element)
    this.$backdrop =
    this.isShown   = null

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(document.body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one($.support.transition.end, function () {
            that.$element.focus().trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.focus().trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one($.support.transition.end, $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.focus()
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.removeBackdrop()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(document.body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one($.support.transition.end, callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (callback) {
      callback()
    }
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  var old = $.fn.modal

  $.fn.modal = function (option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target
      .modal(option, this)
      .one('hide', function () {
        $this.is(':visible') && $this.focus()
      })
  })

  $(document)
    .on('show.bs.modal', '.modal', function () { $(document.body).addClass('modal-open') })
    .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.1.1
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled  = true
    this.type     = type
    this.$element = $(element)
    this.options  = this.getOptions(options)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return
      var that = this;

      var $tip = this.tip()

      this.setContent()

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var $parent = this.$element.parent()

        var orgPlacement = placement
        var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
        var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
        var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
        var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

        placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                    placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)
      this.hoverState = null

      var complete = function() {
        that.$element.trigger('shown.bs.' + that.type)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one($.support.transition.end, complete)
          .emulateTransitionEnd(150) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var replace
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      replace = true
      offset.top = offset.top + height - actualHeight
    }

    if (/bottom|top/.test(placement)) {
      var delta = 0

      if (offset.left < 0) {
        delta       = offset.left * -2
        offset.left = 0

        $tip.offset(offset)

        actualWidth  = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight
      }

      this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
    } else {
      this.replaceArrow(actualHeight - height, actualHeight, 'top')
    }

    if (replace) $tip.offset(offset)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%') : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element.trigger('hidden.bs.' + that.type)
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one($.support.transition.end, complete)
        .emulateTransitionEnd(150) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function () {
    var el = this.$element[0]
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
      width: el.offsetWidth,
      height: el.offsetHeight
    }, this.$element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template)
  }

  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout)
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  var old = $.fn.tooltip

  $.fn.tooltip = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.1.1
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content')[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow')
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.1.1
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var href
    var process  = $.proxy(this.process, this)

    this.$element       = $(element).is('body') ? $(window) : $(element)
    this.$body          = $('body')
    this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.offsets        = $([])
    this.targets        = $([])
    this.activeTarget   = null

    this.refresh()
    this.process()
  }

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

    this.offsets = $([])
    this.targets = $([])

    var self     = this
    var $targets = this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
    var maxScroll    = scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets.last()[0]) && this.activate(i)
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate( targets[i] )
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')

    var selector = this.selector +
        '[data-target="' + target + '"],' +
        this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.1.1
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.parent('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one($.support.transition.end, next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.1.1
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)
    this.$window = $(window)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      =
    this.unpin        =
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.RESET = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$window.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$window.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (this.affixed == 'top') position.top += scrollTop

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin) this.$element.css('top', '')

    var affixType = 'affix' + (affix ? '-' + affix : '')
    var e         = $.Event(affixType + '.bs.affix')

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

    this.$element
      .removeClass(Affix.RESET)
      .addClass(affixType)
      .trigger($.Event(affixType.replace('affix', 'affixed')))

    if (affix == 'bottom') {
      this.$element.offset({ top: scrollHeight - offsetBottom - this.$element.height() })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      $spy.affix(data)
    })
  })

}(jQuery);
/*!
 * Bootstrap v3.1.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one(a.support.transition.end,function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b()})}(jQuery),+function(a){"use strict";var b='[data-dismiss="alert"]',c=function(c){a(c).on("click",b,this.close)};c.prototype.close=function(b){function c(){f.trigger("closed.bs.alert").remove()}var d=a(this),e=d.attr("data-target");e||(e=d.attr("href"),e=e&&e.replace(/.*(?=#[^\s]*$)/,""));var f=a(e);b&&b.preventDefault(),f.length||(f=d.hasClass("alert")?d:d.parent()),f.trigger(b=a.Event("close.bs.alert")),b.isDefaultPrevented()||(f.removeClass("in"),a.support.transition&&f.hasClass("fade")?f.one(a.support.transition.end,c).emulateTransitionEnd(150):c())};var d=a.fn.alert;a.fn.alert=function(b){return this.each(function(){var d=a(this),e=d.data("bs.alert");e||d.data("bs.alert",e=new c(this)),"string"==typeof b&&e[b].call(d)})},a.fn.alert.Constructor=c,a.fn.alert.noConflict=function(){return a.fn.alert=d,this},a(document).on("click.bs.alert.data-api",b,c.prototype.close)}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d),this.isLoading=!1};b.DEFAULTS={loadingText:"loading..."},b.prototype.setState=function(b){var c="disabled",d=this.$element,e=d.is("input")?"val":"html",f=d.data();b+="Text",f.resetText||d.data("resetText",d[e]()),d[e](f[b]||this.options[b]),setTimeout(a.proxy(function(){"loadingText"==b?(this.isLoading=!0,d.addClass(c).attr(c,c)):this.isLoading&&(this.isLoading=!1,d.removeClass(c).removeAttr(c))},this),0)},b.prototype.toggle=function(){var a=!0,b=this.$element.closest('[data-toggle="buttons"]');if(b.length){var c=this.$element.find("input");"radio"==c.prop("type")&&(c.prop("checked")&&this.$element.hasClass("active")?a=!1:b.find(".active").removeClass("active")),a&&c.prop("checked",!this.$element.hasClass("active")).trigger("change")}a&&this.$element.toggleClass("active")};var c=a.fn.button;a.fn.button=function(c){return this.each(function(){var d=a(this),e=d.data("bs.button"),f="object"==typeof c&&c;e||d.data("bs.button",e=new b(this,f)),"toggle"==c?e.toggle():c&&e.setState(c)})},a.fn.button.Constructor=b,a.fn.button.noConflict=function(){return a.fn.button=c,this},a(document).on("click.bs.button.data-api","[data-toggle^=button]",function(b){var c=a(b.target);c.hasClass("btn")||(c=c.closest(".btn")),c.button("toggle"),b.preventDefault()})}(jQuery),+function(a){"use strict";var b=function(b,c){this.$element=a(b),this.$indicators=this.$element.find(".carousel-indicators"),this.options=c,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter",a.proxy(this.pause,this)).on("mouseleave",a.proxy(this.cycle,this))};b.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},b.prototype.cycle=function(b){return b||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(a.proxy(this.next,this),this.options.interval)),this},b.prototype.getActiveIndex=function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},b.prototype.to=function(b){var c=this,d=this.getActiveIndex();return b>this.$items.length-1||0>b?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){c.to(b)}):d==b?this.pause().cycle():this.slide(b>d?"next":"prev",a(this.$items[b]))},b.prototype.pause=function(b){return b||(this.paused=!0),this.$element.find(".next, .prev").length&&a.support.transition&&(this.$element.trigger(a.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},b.prototype.next=function(){return this.sliding?void 0:this.slide("next")},b.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},b.prototype.slide=function(b,c){var d=this.$element.find(".item.active"),e=c||d[b](),f=this.interval,g="next"==b?"left":"right",h="next"==b?"first":"last",i=this;if(!e.length){if(!this.options.wrap)return;e=this.$element.find(".item")[h]()}if(e.hasClass("active"))return this.sliding=!1;var j=a.Event("slide.bs.carousel",{relatedTarget:e[0],direction:g});return this.$element.trigger(j),j.isDefaultPrevented()?void 0:(this.sliding=!0,f&&this.pause(),this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid.bs.carousel",function(){var b=a(i.$indicators.children()[i.getActiveIndex()]);b&&b.addClass("active")})),a.support.transition&&this.$element.hasClass("slide")?(e.addClass(b),e[0].offsetWidth,d.addClass(g),e.addClass(g),d.one(a.support.transition.end,function(){e.removeClass([b,g].join(" ")).addClass("active"),d.removeClass(["active",g].join(" ")),i.sliding=!1,setTimeout(function(){i.$element.trigger("slid.bs.carousel")},0)}).emulateTransitionEnd(1e3*d.css("transition-duration").slice(0,-1))):(d.removeClass("active"),e.addClass("active"),this.sliding=!1,this.$element.trigger("slid.bs.carousel")),f&&this.cycle(),this)};var c=a.fn.carousel;a.fn.carousel=function(c){return this.each(function(){var d=a(this),e=d.data("bs.carousel"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c),g="string"==typeof c?c:f.slide;e||d.data("bs.carousel",e=new b(this,f)),"number"==typeof c?e.to(c):g?e[g]():f.interval&&e.pause().cycle()})},a.fn.carousel.Constructor=b,a.fn.carousel.noConflict=function(){return a.fn.carousel=c,this},a(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(b){var c,d=a(this),e=a(d.attr("data-target")||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,"")),f=a.extend({},e.data(),d.data()),g=d.attr("data-slide-to");g&&(f.interval=!1),e.carousel(f),(g=d.attr("data-slide-to"))&&e.data("bs.carousel").to(g),b.preventDefault()}),a(window).on("load",function(){a('[data-ride="carousel"]').each(function(){var b=a(this);b.carousel(b.data())})})}(jQuery),+function(a){"use strict";var b=function(c,d){this.$element=a(c),this.options=a.extend({},b.DEFAULTS,d),this.transitioning=null,this.options.parent&&(this.$parent=a(this.options.parent)),this.options.toggle&&this.toggle()};b.DEFAULTS={toggle:!0},b.prototype.dimension=function(){var a=this.$element.hasClass("width");return a?"width":"height"},b.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var b=a.Event("show.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.$parent&&this.$parent.find("> .panel > .in");if(c&&c.length){var d=c.data("bs.collapse");if(d&&d.transitioning)return;c.collapse("hide"),d||c.data("bs.collapse",null)}var e=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[e](0),this.transitioning=1;var f=function(){this.$element.removeClass("collapsing").addClass("collapse in")[e]("auto"),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!a.support.transition)return f.call(this);var g=a.camelCase(["scroll",e].join("-"));this.$element.one(a.support.transition.end,a.proxy(f,this)).emulateTransitionEnd(350)[e](this.$element[0][g])}}},b.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var b=a.Event("hide.bs.collapse");if(this.$element.trigger(b),!b.isDefaultPrevented()){var c=this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var d=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return a.support.transition?void this.$element[c](0).one(a.support.transition.end,a.proxy(d,this)).emulateTransitionEnd(350):d.call(this)}}},b.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var c=a.fn.collapse;a.fn.collapse=function(c){return this.each(function(){var d=a(this),e=d.data("bs.collapse"),f=a.extend({},b.DEFAULTS,d.data(),"object"==typeof c&&c);!e&&f.toggle&&"show"==c&&(c=!c),e||d.data("bs.collapse",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.collapse.Constructor=b,a.fn.collapse.noConflict=function(){return a.fn.collapse=c,this},a(document).on("click.bs.collapse.data-api","[data-toggle=collapse]",function(b){var c,d=a(this),e=d.attr("data-target")||b.preventDefault()||(c=d.attr("href"))&&c.replace(/.*(?=#[^\s]+$)/,""),f=a(e),g=f.data("bs.collapse"),h=g?"toggle":d.data(),i=d.attr("data-parent"),j=i&&a(i);g&&g.transitioning||(j&&j.find('[data-toggle=collapse][data-parent="'+i+'"]').not(d).addClass("collapsed"),d[f.hasClass("in")?"addClass":"removeClass"]("collapsed")),f.collapse(h)})}(jQuery),+function(a){"use strict";function b(b){a(d).remove(),a(e).each(function(){var d=c(a(this)),e={relatedTarget:this};d.hasClass("open")&&(d.trigger(b=a.Event("hide.bs.dropdown",e)),b.isDefaultPrevented()||d.removeClass("open").trigger("hidden.bs.dropdown",e))})}function c(b){var c=b.attr("data-target");c||(c=b.attr("href"),c=c&&/#[A-Za-z]/.test(c)&&c.replace(/.*(?=#[^\s]*$)/,""));var d=c&&a(c);return d&&d.length?d:b.parent()}var d=".dropdown-backdrop",e="[data-toggle=dropdown]",f=function(b){a(b).on("click.bs.dropdown",this.toggle)};f.prototype.toggle=function(d){var e=a(this);if(!e.is(".disabled, :disabled")){var f=c(e),g=f.hasClass("open");if(b(),!g){"ontouchstart"in document.documentElement&&!f.closest(".navbar-nav").length&&a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click",b);var h={relatedTarget:this};if(f.trigger(d=a.Event("show.bs.dropdown",h)),d.isDefaultPrevented())return;f.toggleClass("open").trigger("shown.bs.dropdown",h),e.focus()}return!1}},f.prototype.keydown=function(b){if(/(38|40|27)/.test(b.keyCode)){var d=a(this);if(b.preventDefault(),b.stopPropagation(),!d.is(".disabled, :disabled")){var f=c(d),g=f.hasClass("open");if(!g||g&&27==b.keyCode)return 27==b.which&&f.find(e).focus(),d.click();var h=" li:not(.divider):visible a",i=f.find("[role=menu]"+h+", [role=listbox]"+h);if(i.length){var j=i.index(i.filter(":focus"));38==b.keyCode&&j>0&&j--,40==b.keyCode&&j<i.length-1&&j++,~j||(j=0),i.eq(j).focus()}}}};var g=a.fn.dropdown;a.fn.dropdown=function(b){return this.each(function(){var c=a(this),d=c.data("bs.dropdown");d||c.data("bs.dropdown",d=new f(this)),"string"==typeof b&&d[b].call(c)})},a.fn.dropdown.Constructor=f,a.fn.dropdown.noConflict=function(){return a.fn.dropdown=g,this},a(document).on("click.bs.dropdown.data-api",b).on("click.bs.dropdown.data-api",".dropdown form",function(a){a.stopPropagation()}).on("click.bs.dropdown.data-api",e,f.prototype.toggle).on("keydown.bs.dropdown.data-api",e+", [role=menu], [role=listbox]",f.prototype.keydown)}(jQuery),+function(a){"use strict";var b=function(b,c){this.options=c,this.$element=a(b),this.$backdrop=this.isShown=null,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,a.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};b.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},b.prototype.toggle=function(a){return this[this.isShown?"hide":"show"](a)},b.prototype.show=function(b){var c=this,d=a.Event("show.bs.modal",{relatedTarget:b});this.$element.trigger(d),this.isShown||d.isDefaultPrevented()||(this.isShown=!0,this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',a.proxy(this.hide,this)),this.backdrop(function(){var d=a.support.transition&&c.$element.hasClass("fade");c.$element.parent().length||c.$element.appendTo(document.body),c.$element.show().scrollTop(0),d&&c.$element[0].offsetWidth,c.$element.addClass("in").attr("aria-hidden",!1),c.enforceFocus();var e=a.Event("shown.bs.modal",{relatedTarget:b});d?c.$element.find(".modal-dialog").one(a.support.transition.end,function(){c.$element.focus().trigger(e)}).emulateTransitionEnd(300):c.$element.focus().trigger(e)}))},b.prototype.hide=function(b){b&&b.preventDefault(),b=a.Event("hide.bs.modal"),this.$element.trigger(b),this.isShown&&!b.isDefaultPrevented()&&(this.isShown=!1,this.escape(),a(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),a.support.transition&&this.$element.hasClass("fade")?this.$element.one(a.support.transition.end,a.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},b.prototype.enforceFocus=function(){a(document).off("focusin.bs.modal").on("focusin.bs.modal",a.proxy(function(a){this.$element[0]===a.target||this.$element.has(a.target).length||this.$element.focus()},this))},b.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",a.proxy(function(a){27==a.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},b.prototype.hideModal=function(){var a=this;this.$element.hide(),this.backdrop(function(){a.removeBackdrop(),a.$element.trigger("hidden.bs.modal")})},b.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},b.prototype.backdrop=function(b){var c=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var d=a.support.transition&&c;if(this.$backdrop=a('<div class="modal-backdrop '+c+'" />').appendTo(document.body),this.$element.on("click.dismiss.bs.modal",a.proxy(function(a){a.target===a.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),d&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!b)return;d?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),a.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(a.support.transition.end,b).emulateTransitionEnd(150):b()):b&&b()};var c=a.fn.modal;a.fn.modal=function(c,d){return this.each(function(){var e=a(this),f=e.data("bs.modal"),g=a.extend({},b.DEFAULTS,e.data(),"object"==typeof c&&c);f||e.data("bs.modal",f=new b(this,g)),"string"==typeof c?f[c](d):g.show&&f.show(d)})},a.fn.modal.Constructor=b,a.fn.modal.noConflict=function(){return a.fn.modal=c,this},a(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(b){var c=a(this),d=c.attr("href"),e=a(c.attr("data-target")||d&&d.replace(/.*(?=#[^\s]+$)/,"")),f=e.data("bs.modal")?"toggle":a.extend({remote:!/#/.test(d)&&d},e.data(),c.data());c.is("a")&&b.preventDefault(),e.modal(f,this).one("hide",function(){c.is(":visible")&&c.focus()})}),a(document).on("show.bs.modal",".modal",function(){a(document.body).addClass("modal-open")}).on("hidden.bs.modal",".modal",function(){a(document.body).removeClass("modal-open")})}(jQuery),+function(a){"use strict";var b=function(a,b){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",a,b)};b.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},b.prototype.init=function(b,c,d){this.enabled=!0,this.type=b,this.$element=a(c),this.options=this.getOptions(d);for(var e=this.options.trigger.split(" "),f=e.length;f--;){var g=e[f];if("click"==g)this.$element.on("click."+this.type,this.options.selector,a.proxy(this.toggle,this));else if("manual"!=g){var h="hover"==g?"mouseenter":"focusin",i="hover"==g?"mouseleave":"focusout";this.$element.on(h+"."+this.type,this.options.selector,a.proxy(this.enter,this)),this.$element.on(i+"."+this.type,this.options.selector,a.proxy(this.leave,this))}}this.options.selector?this._options=a.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.getOptions=function(b){return b=a.extend({},this.getDefaults(),this.$element.data(),b),b.delay&&"number"==typeof b.delay&&(b.delay={show:b.delay,hide:b.delay}),b},b.prototype.getDelegateOptions=function(){var b={},c=this.getDefaults();return this._options&&a.each(this._options,function(a,d){c[a]!=d&&(b[a]=d)}),b},b.prototype.enter=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="in",c.options.delay&&c.options.delay.show?void(c.timeout=setTimeout(function(){"in"==c.hoverState&&c.show()},c.options.delay.show)):c.show()},b.prototype.leave=function(b){var c=b instanceof this.constructor?b:a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type);return clearTimeout(c.timeout),c.hoverState="out",c.options.delay&&c.options.delay.hide?void(c.timeout=setTimeout(function(){"out"==c.hoverState&&c.hide()},c.options.delay.hide)):c.hide()},b.prototype.show=function(){var b=a.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){if(this.$element.trigger(b),b.isDefaultPrevented())return;var c=this,d=this.tip();this.setContent(),this.options.animation&&d.addClass("fade");var e="function"==typeof this.options.placement?this.options.placement.call(this,d[0],this.$element[0]):this.options.placement,f=/\s?auto?\s?/i,g=f.test(e);g&&(e=e.replace(f,"")||"top"),d.detach().css({top:0,left:0,display:"block"}).addClass(e),this.options.container?d.appendTo(this.options.container):d.insertAfter(this.$element);var h=this.getPosition(),i=d[0].offsetWidth,j=d[0].offsetHeight;if(g){var k=this.$element.parent(),l=e,m=document.documentElement.scrollTop||document.body.scrollTop,n="body"==this.options.container?window.innerWidth:k.outerWidth(),o="body"==this.options.container?window.innerHeight:k.outerHeight(),p="body"==this.options.container?0:k.offset().left;e="bottom"==e&&h.top+h.height+j-m>o?"top":"top"==e&&h.top-m-j<0?"bottom":"right"==e&&h.right+i>n?"left":"left"==e&&h.left-i<p?"right":e,d.removeClass(l).addClass(e)}var q=this.getCalculatedOffset(e,h,i,j);this.applyPlacement(q,e),this.hoverState=null;var r=function(){c.$element.trigger("shown.bs."+c.type)};a.support.transition&&this.$tip.hasClass("fade")?d.one(a.support.transition.end,r).emulateTransitionEnd(150):r()}},b.prototype.applyPlacement=function(b,c){var d,e=this.tip(),f=e[0].offsetWidth,g=e[0].offsetHeight,h=parseInt(e.css("margin-top"),10),i=parseInt(e.css("margin-left"),10);isNaN(h)&&(h=0),isNaN(i)&&(i=0),b.top=b.top+h,b.left=b.left+i,a.offset.setOffset(e[0],a.extend({using:function(a){e.css({top:Math.round(a.top),left:Math.round(a.left)})}},b),0),e.addClass("in");var j=e[0].offsetWidth,k=e[0].offsetHeight;if("top"==c&&k!=g&&(d=!0,b.top=b.top+g-k),/bottom|top/.test(c)){var l=0;b.left<0&&(l=-2*b.left,b.left=0,e.offset(b),j=e[0].offsetWidth,k=e[0].offsetHeight),this.replaceArrow(l-f+j,j,"left")}else this.replaceArrow(k-g,k,"top");d&&e.offset(b)},b.prototype.replaceArrow=function(a,b,c){this.arrow().css(c,a?50*(1-a/b)+"%":"")},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle();a.find(".tooltip-inner")[this.options.html?"html":"text"](b),a.removeClass("fade in top bottom left right")},b.prototype.hide=function(){function b(){"in"!=c.hoverState&&d.detach(),c.$element.trigger("hidden.bs."+c.type)}var c=this,d=this.tip(),e=a.Event("hide.bs."+this.type);return this.$element.trigger(e),e.isDefaultPrevented()?void 0:(d.removeClass("in"),a.support.transition&&this.$tip.hasClass("fade")?d.one(a.support.transition.end,b).emulateTransitionEnd(150):b(),this.hoverState=null,this)},b.prototype.fixTitle=function(){var a=this.$element;(a.attr("title")||"string"!=typeof a.attr("data-original-title"))&&a.attr("data-original-title",a.attr("title")||"").attr("title","")},b.prototype.hasContent=function(){return this.getTitle()},b.prototype.getPosition=function(){var b=this.$element[0];return a.extend({},"function"==typeof b.getBoundingClientRect?b.getBoundingClientRect():{width:b.offsetWidth,height:b.offsetHeight},this.$element.offset())},b.prototype.getCalculatedOffset=function(a,b,c,d){return"bottom"==a?{top:b.top+b.height,left:b.left+b.width/2-c/2}:"top"==a?{top:b.top-d,left:b.left+b.width/2-c/2}:"left"==a?{top:b.top+b.height/2-d/2,left:b.left-c}:{top:b.top+b.height/2-d/2,left:b.left+b.width}},b.prototype.getTitle=function(){var a,b=this.$element,c=this.options;return a=b.attr("data-original-title")||("function"==typeof c.title?c.title.call(b[0]):c.title)},b.prototype.tip=function(){return this.$tip=this.$tip||a(this.options.template)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},b.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},b.prototype.enable=function(){this.enabled=!0},b.prototype.disable=function(){this.enabled=!1},b.prototype.toggleEnabled=function(){this.enabled=!this.enabled},b.prototype.toggle=function(b){var c=b?a(b.currentTarget)[this.type](this.getDelegateOptions()).data("bs."+this.type):this;c.tip().hasClass("in")?c.leave(c):c.enter(c)},b.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var c=a.fn.tooltip;a.fn.tooltip=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tooltip"),f="object"==typeof c&&c;(e||"destroy"!=c)&&(e||d.data("bs.tooltip",e=new b(this,f)),"string"==typeof c&&e[c]())})},a.fn.tooltip.Constructor=b,a.fn.tooltip.noConflict=function(){return a.fn.tooltip=c,this}}(jQuery),+function(a){"use strict";var b=function(a,b){this.init("popover",a,b)};if(!a.fn.tooltip)throw new Error("Popover requires tooltip.js");b.DEFAULTS=a.extend({},a.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),b.prototype=a.extend({},a.fn.tooltip.Constructor.prototype),b.prototype.constructor=b,b.prototype.getDefaults=function(){return b.DEFAULTS},b.prototype.setContent=function(){var a=this.tip(),b=this.getTitle(),c=this.getContent();a.find(".popover-title")[this.options.html?"html":"text"](b),a.find(".popover-content")[this.options.html?"string"==typeof c?"html":"append":"text"](c),a.removeClass("fade top bottom left right in"),a.find(".popover-title").html()||a.find(".popover-title").hide()},b.prototype.hasContent=function(){return this.getTitle()||this.getContent()},b.prototype.getContent=function(){var a=this.$element,b=this.options;return a.attr("data-content")||("function"==typeof b.content?b.content.call(a[0]):b.content)},b.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},b.prototype.tip=function(){return this.$tip||(this.$tip=a(this.options.template)),this.$tip};var c=a.fn.popover;a.fn.popover=function(c){return this.each(function(){var d=a(this),e=d.data("bs.popover"),f="object"==typeof c&&c;(e||"destroy"!=c)&&(e||d.data("bs.popover",e=new b(this,f)),"string"==typeof c&&e[c]())})},a.fn.popover.Constructor=b,a.fn.popover.noConflict=function(){return a.fn.popover=c,this}}(jQuery),+function(a){"use strict";function b(c,d){var e,f=a.proxy(this.process,this);this.$element=a(a(c).is("body")?window:c),this.$body=a("body"),this.$scrollElement=this.$element.on("scroll.bs.scroll-spy.data-api",f),this.options=a.extend({},b.DEFAULTS,d),this.selector=(this.options.target||(e=a(c).attr("href"))&&e.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.offsets=a([]),this.targets=a([]),this.activeTarget=null,this.refresh(),this.process()}b.DEFAULTS={offset:10},b.prototype.refresh=function(){var b=this.$element[0]==window?"offset":"position";this.offsets=a([]),this.targets=a([]);{var c=this;this.$body.find(this.selector).map(function(){var d=a(this),e=d.data("target")||d.attr("href"),f=/^#./.test(e)&&a(e);return f&&f.length&&f.is(":visible")&&[[f[b]().top+(!a.isWindow(c.$scrollElement.get(0))&&c.$scrollElement.scrollTop()),e]]||null}).sort(function(a,b){return a[0]-b[0]}).each(function(){c.offsets.push(this[0]),c.targets.push(this[1])})}},b.prototype.process=function(){var a,b=this.$scrollElement.scrollTop()+this.options.offset,c=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,d=c-this.$scrollElement.height(),e=this.offsets,f=this.targets,g=this.activeTarget;if(b>=d)return g!=(a=f.last()[0])&&this.activate(a);if(g&&b<=e[0])return g!=(a=f[0])&&this.activate(a);for(a=e.length;a--;)g!=f[a]&&b>=e[a]&&(!e[a+1]||b<=e[a+1])&&this.activate(f[a])},b.prototype.activate=function(b){this.activeTarget=b,a(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var c=this.selector+'[data-target="'+b+'"],'+this.selector+'[href="'+b+'"]',d=a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length&&(d=d.closest("li.dropdown").addClass("active")),d.trigger("activate.bs.scrollspy")};var c=a.fn.scrollspy;a.fn.scrollspy=function(c){return this.each(function(){var d=a(this),e=d.data("bs.scrollspy"),f="object"==typeof c&&c;e||d.data("bs.scrollspy",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.scrollspy.Constructor=b,a.fn.scrollspy.noConflict=function(){return a.fn.scrollspy=c,this},a(window).on("load",function(){a('[data-spy="scroll"]').each(function(){var b=a(this);b.scrollspy(b.data())})})}(jQuery),+function(a){"use strict";var b=function(b){this.element=a(b)};b.prototype.show=function(){var b=this.element,c=b.closest("ul:not(.dropdown-menu)"),d=b.data("target");if(d||(d=b.attr("href"),d=d&&d.replace(/.*(?=#[^\s]*$)/,"")),!b.parent("li").hasClass("active")){var e=c.find(".active:last a")[0],f=a.Event("show.bs.tab",{relatedTarget:e});if(b.trigger(f),!f.isDefaultPrevented()){var g=a(d);this.activate(b.parent("li"),c),this.activate(g,g.parent(),function(){b.trigger({type:"shown.bs.tab",relatedTarget:e})})}}},b.prototype.activate=function(b,c,d){function e(){f.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),b.addClass("active"),g?(b[0].offsetWidth,b.addClass("in")):b.removeClass("fade"),b.parent(".dropdown-menu")&&b.closest("li.dropdown").addClass("active"),d&&d()}var f=c.find("> .active"),g=d&&a.support.transition&&f.hasClass("fade");g?f.one(a.support.transition.end,e).emulateTransitionEnd(150):e(),f.removeClass("in")};var c=a.fn.tab;a.fn.tab=function(c){return this.each(function(){var d=a(this),e=d.data("bs.tab");e||d.data("bs.tab",e=new b(this)),"string"==typeof c&&e[c]()})},a.fn.tab.Constructor=b,a.fn.tab.noConflict=function(){return a.fn.tab=c,this},a(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(b){b.preventDefault(),a(this).tab("show")})}(jQuery),+function(a){"use strict";var b=function(c,d){this.options=a.extend({},b.DEFAULTS,d),this.$window=a(window).on("scroll.bs.affix.data-api",a.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",a.proxy(this.checkPositionWithEventLoop,this)),this.$element=a(c),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};b.RESET="affix affix-top affix-bottom",b.DEFAULTS={offset:0},b.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(b.RESET).addClass("affix");var a=this.$window.scrollTop(),c=this.$element.offset();return this.pinnedOffset=c.top-a},b.prototype.checkPositionWithEventLoop=function(){setTimeout(a.proxy(this.checkPosition,this),1)},b.prototype.checkPosition=function(){if(this.$element.is(":visible")){var c=a(document).height(),d=this.$window.scrollTop(),e=this.$element.offset(),f=this.options.offset,g=f.top,h=f.bottom;"top"==this.affixed&&(e.top+=d),"object"!=typeof f&&(h=g=f),"function"==typeof g&&(g=f.top(this.$element)),"function"==typeof h&&(h=f.bottom(this.$element));var i=null!=this.unpin&&d+this.unpin<=e.top?!1:null!=h&&e.top+this.$element.height()>=c-h?"bottom":null!=g&&g>=d?"top":!1;if(this.affixed!==i){this.unpin&&this.$element.css("top","");var j="affix"+(i?"-"+i:""),k=a.Event(j+".bs.affix");this.$element.trigger(k),k.isDefaultPrevented()||(this.affixed=i,this.unpin="bottom"==i?this.getPinnedOffset():null,this.$element.removeClass(b.RESET).addClass(j).trigger(a.Event(j.replace("affix","affixed"))),"bottom"==i&&this.$element.offset({top:c-h-this.$element.height()}))}}};var c=a.fn.affix;a.fn.affix=function(c){return this.each(function(){var d=a(this),e=d.data("bs.affix"),f="object"==typeof c&&c;e||d.data("bs.affix",e=new b(this,f)),"string"==typeof c&&e[c]()})},a.fn.affix.Constructor=b,a.fn.affix.noConflict=function(){return a.fn.affix=c,this},a(window).on("load",function(){a('[data-spy="affix"]').each(function(){var b=a(this),c=b.data();c.offset=c.offset||{},c.offsetBottom&&(c.offset.bottom=c.offsetBottom),c.offsetTop&&(c.offset.top=c.offsetTop),b.affix(c)})})}(jQuery);
(function() {
  $(function() {
    return $('.comments-link').click(function() {
      return alert("clicked!");
    });
  });

}).call(this);
(function() {


}).call(this);
(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' && typeof module === 'object')
    module.exports = factory(require("canvas"));
  else if(typeof define === 'function' && define.amd)
    define(["canvas"], factory);
  else if(typeof exports === 'object')
    exports["ImglyKit"] = factory(require("canvas"));
  else
    root["ImglyKit"] = factory(root["canvas"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_53__) {
return /******/ (function(modules) { // webpackBootstrap
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      exports: {},
/******/      id: moduleId,
/******/      loaded: false
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.loaded = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }


/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "";

/******/  // Load entry module and return exports
/******/  return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

  /*!
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _libRenderImage = __webpack_require__(2);

  var _libRenderImage2 = _interopRequireDefault(_libRenderImage);

  var _libImageExporter = __webpack_require__(3);

  var _libImageExporter2 = _interopRequireDefault(_libImageExporter);

  var _libVersionChecker = __webpack_require__(4);

  var _libVersionChecker2 = _interopRequireDefault(_libVersionChecker);

  var _constants = __webpack_require__(5);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var VERSION = '2.0.0-beta.15';

  /**
   * @class
   * @param {Object} options
   * @param {Image} [options.image] - The source image
   * @param {HTMLElement} [options.container] - Specifies where the UI should be
   *                                          added to. If none is given, the UI
   *                                          will automatically be disabled.
   * @param {Boolean} [options.ui.enabled=true] - Enables or disables the UI
   * @param {Boolean} [options.renderOnWindowResize] - Specifies whether the canvas
   *                                                 should re-render itself when
   *                                                 the window is being resized.
   * @param {String} [options.assetsUrl='assets'] - The base path for all external assets.
   * @param {String} [options.renderer='webgl'] - The renderer identifier. Can either
   *                                            be 'webgl' or 'canvas'.
   */

  var ImglyKit = (function () {
    function ImglyKit(options) {
      _classCallCheck(this, ImglyKit);

      // `options` is required
      if (typeof options === 'undefined') {
        throw new Error('No options given.');
      }

      // Set default options
      options = _lodash2['default'].defaults(options, {
        assetsUrl: 'assets',
        container: null,
        renderOnWindowResize: false
      });
      options.ui = options.ui || {};
      options.ui = _lodash2['default'].defaults(options.ui, {
        enabled: true
      });

      if (typeof options.image === 'undefined' && !options.ui.enabled) {
        throw new Error('`options.image` needs to be set when UI is disabled.');
      }

      /**
       * @type {Object}
       * @private
       */
      this._options = options;

      /**
       * The stack of {@link Operation} instances that will be used
       * to render the final Image
       * @type {Array.<ImglyKit.Operation>}
       */
      this.operationsStack = [];

      /**
       * The registered UI types that can be selected via the `ui` option
       * @type {Object.<String, UI>}
       * @private
       */
      this._registeredUIs = {};

      // Register the default UIs
      this._registerUIs();

      /**
       * The registered operations
       * @type {Object.<String, ImglyKit.Operation>}
       */
      this._registeredOperations = {};

      // Register the default operations
      this._registerOperations();

      if (typeof window !== 'undefined') {
        this._versionChecker = new _libVersionChecker2['default'](VERSION);
      }

      if (this._options.ui.enabled) {
        this._initUI();
        if (this._options.renderOnWindowResize) {
          this._handleWindowResize();
        }
      }
    }

    _createClass(ImglyKit, [{
      key: 'render',

      /**
       * Renders the image
       * @param  {ImglyKit.RenderType} [renderType=ImglyKit.RenderType.DATAURL] - The output type
       * @param  {ImglyKit.ImageFormat} [imageFormat=ImglyKit.ImageFormat.PNG] - The output image format
       * @param  {string} [dimensions] - The final dimensions of the image
       * @param  {Number} [quality] - The image quality, between 0 and 1
       * @return {Promise}
       */
      value: function render(renderType, imageFormat, dimensions, quality) {
        var _this = this;

        var settings = _libImageExporter2['default'].validateSettings(renderType, imageFormat);

        renderType = settings.renderType;
        imageFormat = settings.imageFormat;

        // Create a RenderImage
        var renderImage = new _libRenderImage2['default'](this._options.image, this.operationsStack, dimensions, this._options.renderer);

        // Set all operations to dirty, since we have another webgl renderer
        for (var i = 0; i < this.operationsStack.length; i++) {
          var operation = this.operationsStack[i];
          if (!operation) {
            continue;
          }
          operation.dirty = true;
        }

        // Initiate image rendering
        return renderImage.render().then(function () {
          var canvas = renderImage.getRenderer().getCanvas();
          return _libImageExporter2['default']['export'](_this._options.image, canvas, renderType, imageFormat, quality);
        });
      }
    }, {
      key: 'reset',

      /**
       * Resets all custom and selected operations
       */
      value: function reset() {}
    }, {
      key: 'getAssetPath',

      /**
       * Returns the asset path for the given filename
       * @param  {String} asset
       * @return {String}
       */
      value: function getAssetPath(asset) {
        var isBrowser = typeof window !== 'undefined';
        if (isBrowser) {
          /* istanbul ignore next */
          return this._options.assetsUrl + '/' + asset;
        } else {
          var path = __webpack_require__(52);
          return path.resolve(this._options.assetsUrl, asset);
        }
      }
    }, {
      key: '_handleWindowResize',

      /**
       * If `options.renderOnWindowResize` is set to true, this function
       * will re-render the canvas with a slight delay so that it won't
       * cause lagging of the resize
       * @private
       */
      value: function _handleWindowResize() {
        var _this2 = this;

        var timer = null;
        window.addEventListener('resize', function () {
          if (timer !== null) {
            clearTimeout(timer);
          }

          timer = setTimeout(function () {
            timer = null;
            _this2.ui.render();
          }, 300);
        });
      }
    }, {
      key: '_registerUIs',

      /**
       * Registers all default UIs
       * @private
       */
      value: function _registerUIs() {
        this.registerUI(ImglyKit.NightUI);
      }
    }, {
      key: '_registerOperations',

      /**
       * Registers all default operations
       * @private
       */
      value: function _registerOperations() {
        for (var operationName in ImglyKit.Operations) {
          this.registerOperation(ImglyKit.Operations[operationName]);
        }
      }
    }, {
      key: 'registerOperation',

      /**
       * Registers the given operation
       * @param {ImglyKit.Operation} operation - The operation class
       */
      value: function registerOperation(operation) {
        this._registeredOperations[operation.prototype.identifier] = operation;
        if (this.ui) {
          this.ui.addOperation(operation);
        }
      }
    }, {
      key: 'registerUI',

      /**
       * Registers the given UI
       * @param {UI} ui
       */
      value: function registerUI(ui) {
        this._registeredUIs[ui.prototype.identifier] = ui;
      }
    }, {
      key: '_initUI',

      /**
       * Initializes the UI
       * @private
       */
      /* istanbul ignore next */
      value: function _initUI() {
        var UI;

        if (this._options.ui.enabled === true) {
          // Select the first UI by default
          UI = _libUtils2['default'].values(this._registeredUIs)[0];
        }

        if (!UI) {
          return;
        }

        /**
         * @type {ImglyKit.UI}
         */
        this.ui = new UI(this, this._options);
      }
    }, {
      key: 'getOperationFromStack',

      /**
       * Returns the Operation instance with the given identifier,
       * if it exists
       * @param {String} identifier
       * @returns {Operation}
       */
      value: function getOperationFromStack(identifier) {
        var operation = this.operationsStack.filter(function (operation) {
          return operation.identifier === identifier;
        })[0];
        return operation;
      }
    }, {
      key: 'run',

      /**
       * Runs the UI, if present
       */
      value: function run() {
        if (typeof this.ui !== 'undefined') {
          this.ui.run();
        }
      }
    }, {
      key: 'registeredOperations',
      get: function () {
        return this._registeredOperations;
      }
    }]);

    return ImglyKit;
  })();

  /**
   * The current version of the SDK
   * @name ImglyKit.version
   * @internal Keep in sync with package.json
   */
  ImglyKit.version = VERSION;

  // Exposed classes
  ImglyKit.RenderImage = _libRenderImage2['default'];
  ImglyKit.Color = __webpack_require__(7);
  ImglyKit.Filter = __webpack_require__(8);
  ImglyKit.Operation = __webpack_require__(9);
  ImglyKit.Operations = {};
  ImglyKit.Operations.Filters = __webpack_require__(10);
  ImglyKit.Operations.Crop = __webpack_require__(11);
  ImglyKit.Operations.Rotation = __webpack_require__(12);
  ImglyKit.Operations.Saturation = __webpack_require__(13);
  ImglyKit.Operations.Contrast = __webpack_require__(14);
  ImglyKit.Operations.Brightness = __webpack_require__(15);
  ImglyKit.Operations.Flip = __webpack_require__(16);
  ImglyKit.Operations.TiltShift = __webpack_require__(17);
  ImglyKit.Operations.RadialBlur = __webpack_require__(18);
  ImglyKit.Operations.Text = __webpack_require__(19);
  ImglyKit.Operations.Stickers = __webpack_require__(20);
  ImglyKit.Operations.Frames = __webpack_require__(21);

  ImglyKit.Filters = {};
  ImglyKit.Filters.A15 = __webpack_require__(22);
  ImglyKit.Filters.Breeze = __webpack_require__(23);
  ImglyKit.Filters.BW = __webpack_require__(24);
  ImglyKit.Filters.BWHard = __webpack_require__(25);
  ImglyKit.Filters.Celsius = __webpack_require__(26);
  ImglyKit.Filters.Chest = __webpack_require__(27);
  ImglyKit.Filters.Fixie = __webpack_require__(28);
  ImglyKit.Filters.Food = __webpack_require__(29);
  ImglyKit.Filters.Fridge = __webpack_require__(30);
  ImglyKit.Filters.Front = __webpack_require__(31);
  ImglyKit.Filters.Glam = __webpack_require__(32);
  ImglyKit.Filters.Gobblin = __webpack_require__(33);
  ImglyKit.Filters.K1 = __webpack_require__(34);
  ImglyKit.Filters.K2 = __webpack_require__(35);
  ImglyKit.Filters.K6 = __webpack_require__(36);
  ImglyKit.Filters.KDynamic = __webpack_require__(37);
  ImglyKit.Filters.Lenin = __webpack_require__(38);
  ImglyKit.Filters.Lomo = __webpack_require__(39);
  ImglyKit.Filters.Mellow = __webpack_require__(40);
  ImglyKit.Filters.Morning = __webpack_require__(41);
  ImglyKit.Filters.Orchid = __webpack_require__(42);
  ImglyKit.Filters.Pola = __webpack_require__(43);
  ImglyKit.Filters.Pola669 = __webpack_require__(44);
  ImglyKit.Filters.Quozi = __webpack_require__(45);
  ImglyKit.Filters.Semired = __webpack_require__(46);
  ImglyKit.Filters.Sunny = __webpack_require__(47);
  ImglyKit.Filters.Texas = __webpack_require__(48);
  ImglyKit.Filters.X400 = __webpack_require__(49);

  // Exposed constants
  ImglyKit.RenderType = _constants.RenderType;
  ImglyKit.ImageFormat = _constants.ImageFormat;
  ImglyKit.Vector2 = __webpack_require__(50);

  // UI
  ImglyKit.NightUI = __webpack_require__(51);

  exports['default'] = ImglyKit;
  module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*!
   * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
   * Build: `lodash include="defaults,extend"`
   * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
   * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
   * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   * Available under MIT license <http://lodash.com/license>
   */
  'use strict';

  ;(function () {

    /** Used internally to indicate various things */
    var indicatorObject = {};

    /** Used to detected named functions */
    var reFuncName = /^\s*function[ \n\r\t]+\w/;

    /** Used to detect functions containing a `this` reference */
    var reThis = /\bthis\b/;

    /** Used to fix the JScript [[DontEnum]] bug */
    var shadowedProps = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];

    /** `Object#toString` result shortcuts */
    var argsClass = '[object Arguments]',
        arrayClass = '[object Array]',
        boolClass = '[object Boolean]',
        dateClass = '[object Date]',
        errorClass = '[object Error]',
        funcClass = '[object Function]',
        numberClass = '[object Number]',
        objectClass = '[object Object]',
        regexpClass = '[object RegExp]',
        stringClass = '[object String]';

    /** Used as the property descriptor for `__bindData__` */
    var descriptor = {
      'configurable': false,
      'enumerable': false,
      'value': null,
      'writable': false
    };

    /** Used as the data object for `iteratorTemplate` */
    var iteratorData = {
      'args': '',
      'array': null,
      'bottom': '',
      'firstArg': '',
      'init': '',
      'keys': null,
      'loop': '',
      'shadowedProps': null,
      'support': null,
      'top': '',
      'useHas': false
    };

    /** Used to determine if values are of the language type Object */
    var objectTypes = {
      'boolean': false,
      'function': true,
      'object': true,
      'number': false,
      'string': false,
      'undefined': false
    };

    /** Used as a reference to the global object */
    var root = objectTypes[typeof window] && window || this;

    /** Detect free variable `exports` */
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

    /** Detect free variable `module` */
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports` */
    var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

    /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
      root = freeGlobal;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Slices the `collection` from the `start` index up to, but not including,
     * the `end` index.
     *
     * Note: This function is used instead of `Array#slice` to support node lists
     * in IE < 9 and to ensure dense arrays are returned.
     *
     * @private
     * @param {Array|Object|string} collection The collection to slice.
     * @param {number} start The start index.
     * @param {number} end The end index.
     * @returns {Array} Returns the new array.
     */
    function slice(array, start, end) {
      start || (start = 0);
      if (typeof end == 'undefined') {
        end = array ? array.length : 0;
      }
      var index = -1,
          length = end - start || 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = array[start + index];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var errorProto = Error.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$');

    /** Native method shortcuts */
    var fnToString = Function.prototype.toString,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function () {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch (e) {}
      return result;
    })();

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;

    /** Used to avoid iterating non-enumerable properties in IE < 9 */
    var nonEnumProps = {};
    nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
    nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
    nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
    nonEnumProps[objectClass] = { 'constructor': true };

    (function () {
      var length = shadowedProps.length;
      while (length--) {
        var key = shadowedProps[length];
        for (var className in nonEnumProps) {
          if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], key)) {
            nonEnumProps[className][key] = false;
          }
        }
      }
    })();

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash() {}

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function () {
      var ctor = function ctor() {
        this.x = 1;
      },
          object = { '0': 1, 'length': 1 },
          props = [];

      ctor.prototype = { 'valueOf': 1, 'y': 1 };
      for (var key in new ctor()) {
        props.push(key);
      }
      for (key in arguments) {}

      /**
       * Detect if an `arguments` object's [[Class]] is resolvable (all but Firefox < 4, IE < 9).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsClass = toString.call(arguments) == argsClass;

      /**
       * Detect if `arguments` objects are `Object` objects (all but Narwhal and Opera < 10.5).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);

      /**
       * Detect if `name` or `message` properties of `Error.prototype` are
       * enumerable by default. (IE < 9, Safari < 5.1)
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

      /**
       * Detect if `prototype` properties are enumerable by default.
       *
       * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
       * (if the prototype or a property on the prototype has been set)
       * incorrectly sets a function's `prototype` property [[Enumerable]]
       * value to `true`.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(root.WinRTError) && reThis.test(function () {
        return this;
      });

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if `arguments` object indexes are non-enumerable
       * (Firefox < 4, IE < 9, PhantomJS, Safari < 5.1).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumArgs = key != 0;

      /**
       * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
       *
       * In IE < 9 an objects own properties, shadowing non-enumerable ones, are
       * made non-enumerable as well (a.k.a the JScript [[DontEnum]] bug).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.nonEnumShadows = !/valueOf/.test(props);

      /**
       * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
       *
       * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
       * and `splice()` functions that fail to remove the last element, `value[0]`,
       * of array-like objects even though the `length` property is set to `0`.
       * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
       * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);

      /**
       * Detect lack of support for accessing string characters by index.
       *
       * IE < 8 can't access characters by index and IE 8 can only access
       * characters by index on string literals.
       *
       * @memberOf _.support
       * @type boolean
       */
      support.unindexedChars = 'x'[0] + Object('x')[0] != 'xx';
    })(1);

    /*--------------------------------------------------------------------------*/

    /**
     * The template used to create iterator functions.
     *
     * @private
     * @param {Object} data The data object used to populate the text.
     * @returns {string} Returns the interpolated text.
     */
    var iteratorTemplate = function iteratorTemplate(obj) {

      var __p = 'var index, iterable = ' + obj.firstArg + ', result = ' + obj.init + ';\nif (!iterable) return result;\n' + obj.top + ';';
      if (obj.array) {
        __p += '\nvar length = iterable.length; index = -1;\nif (' + obj.array + ') {  ';
        if (support.unindexedChars) {
          __p += '\n  if (isString(iterable)) {\n    iterable = iterable.split(\'\')\n  }  ';
        }
        __p += '\n  while (++index < length) {\n    ' + obj.loop + ';\n  }\n}\nelse {  ';
      } else if (support.nonEnumArgs) {
        __p += '\n  var length = iterable.length; index = -1;\n  if (length && isArguments(iterable)) {\n    while (++index < length) {\n      index += \'\';\n      ' + obj.loop + ';\n    }\n  } else {  ';
      }

      if (support.enumPrototypes) {
        __p += '\n  var skipProto = typeof iterable == \'function\';\n  ';
      }

      if (support.enumErrorProps) {
        __p += '\n  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n  ';
      }

      var conditions = [];if (support.enumPrototypes) {
        conditions.push('!(skipProto && index == "prototype")');
      }if (support.enumErrorProps) {
        conditions.push('!(skipErrorProps && (index == "message" || index == "name"))');
      }

      if (obj.useHas && obj.keys) {
        __p += '\n  var ownIndex = -1,\n      ownProps = objectTypes[typeof iterable] && keys(iterable),\n      length = ownProps ? ownProps.length : 0;\n\n  while (++ownIndex < length) {\n    index = ownProps[ownIndex];\n';
        if (conditions.length) {
          __p += '    if (' + conditions.join(' && ') + ') {\n  ';
        }
        __p += obj.loop + ';    ';
        if (conditions.length) {
          __p += '\n    }';
        }
        __p += '\n  }  ';
      } else {
        __p += '\n  for (index in iterable) {\n';
        if (obj.useHas) {
          conditions.push('hasOwnProperty.call(iterable, index)');
        }if (conditions.length) {
          __p += '    if (' + conditions.join(' && ') + ') {\n  ';
        }
        __p += obj.loop + ';    ';
        if (conditions.length) {
          __p += '\n    }';
        }
        __p += '\n  }    ';
        if (support.nonEnumShadows) {
          __p += '\n\n  if (iterable !== objectProto) {\n    var ctor = iterable.constructor,\n        isProto = iterable === (ctor && ctor.prototype),\n        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n        nonEnum = nonEnumProps[className];\n      ';
          for (k = 0; k < 7; k++) {
            __p += '\n    index = \'' + obj.shadowedProps[k] + '\';\n    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))';
            if (!obj.useHas) {
              __p += ' || (!nonEnum[index] && iterable[index] !== objectProto[index])';
            }
            __p += ') {\n      ' + obj.loop + ';\n    }      ';
          }
          __p += '\n  }    ';
        }
      }

      if (obj.array || support.nonEnumArgs) {
        __p += '\n}';
      }
      __p += obj.bottom + ';\nreturn result';

      return __p;
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function () {
        function Object() {}
        return function (prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object();
            Object.prototype = null;
          }
          return result || root.Object();
        };
      })();
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || bindData !== true && bindData[1] & 1) {
        return func;
      }
      switch (argCount) {
        case 1:
          return function (value) {
            return func.call(thisArg, value);
          };
        case 2:
          return function (a, b) {
            return func.call(thisArg, a, b);
          };
        case 3:
          return function (value, index, collection) {
            return func.call(thisArg, value, index, collection);
          };
        case 4:
          return function (accumulator, value, index, collection) {
            return func.call(thisArg, accumulator, value, index, collection);
          };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, isCurryBound ? bitmask : bitmask & ~3, args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(_x, _x2, _x3, _x4, _x5, _x6) {
      var _arguments = arguments;
      var _again = true;

      _function: while (_again) {
        var func = _x,
            bitmask = _x2,
            partialArgs = _x3,
            partialRightArgs = _x4,
            thisArg = _x5,
            arity = _x6;
        isBind = isBindKey = isCurry = isCurryBound = isPartial = isPartialRight = bindData = creater = undefined;
        _again = false;

        var isBind = bitmask & 1,
            isBindKey = bitmask & 2,
            isCurry = bitmask & 4,
            isCurryBound = bitmask & 8,
            isPartial = bitmask & 16,
            isPartialRight = bitmask & 32;

        if (!isBindKey && !isFunction(func)) {
          throw new TypeError();
        }
        if (isPartial && !partialArgs.length) {
          bitmask &= ~16;
          isPartial = partialArgs = false;
        }
        if (isPartialRight && !partialRightArgs.length) {
          bitmask &= ~32;
          isPartialRight = partialRightArgs = false;
        }
        var bindData = func && func.__bindData__;
        if (bindData && bindData !== true) {
          // clone `bindData`
          bindData = slice(bindData);
          if (bindData[2]) {
            bindData[2] = slice(bindData[2]);
          }
          if (bindData[3]) {
            bindData[3] = slice(bindData[3]);
          }
          // set `thisBinding` is not previously bound
          if (isBind && !(bindData[1] & 1)) {
            bindData[4] = thisArg;
          }
          // set if previously bound but not currently (subsequent curried functions)
          if (!isBind && bindData[1] & 1) {
            bitmask |= 8;
          }
          // set curried arity if not yet set
          if (isCurry && !(bindData[1] & 4)) {
            bindData[5] = arity;
          }
          // append partial left arguments
          if (isPartial) {
            push.apply(bindData[2] || (bindData[2] = []), partialArgs);
          }
          // append partial right arguments
          if (isPartialRight) {
            unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
          }
          // merge flags
          bindData[1] |= bitmask;
          _arguments = bindData;
          _x = _arguments[0];
          _x2 = _arguments[1];
          _x3 = _arguments[2];
          _x4 = _arguments[3];
          _x5 = _arguments[4];
          _x6 = _arguments[5];
          _again = true;
          continue _function;
        }
        // fast path for `_.bind`
        var creater = bitmask == 1 || bitmask === 17 ? baseBind : baseCreateWrapper;
        return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
      }
    }

    /**
     * Creates compiled iteration functions.
     *
     * @private
     * @param {...Object} [options] The compile options object(s).
     * @param {string} [options.array] Code to determine if the iterable is an array or array-like.
     * @param {boolean} [options.useHas] Specify using `hasOwnProperty` checks in the object loop.
     * @param {Function} [options.keys] A reference to `_.keys` for use in own property iteration.
     * @param {string} [options.args] A comma separated string of iteration function arguments.
     * @param {string} [options.top] Code to execute before the iteration branches.
     * @param {string} [options.loop] Code to execute in the object loop.
     * @param {string} [options.bottom] Code to execute after the iteration branches.
     * @returns {Function} Returns the compiled function.
     */
    function createIterator() {
      // data properties
      iteratorData.shadowedProps = shadowedProps;

      // iterator options
      iteratorData.array = iteratorData.bottom = iteratorData.loop = iteratorData.top = '';
      iteratorData.init = 'iterable';
      iteratorData.useHas = true;

      // merge options into a template data object
      for (var object, index = 0; object = arguments[index]; index++) {
        for (var key in object) {
          iteratorData[key] = object[key];
        }
      }
      var args = iteratorData.args;
      iteratorData.firstArg = /^[^,]+/.exec(args)[0];

      // create the function factory
      var factory = Function('baseCreateCallback, errorClass, errorProto, hasOwnProperty, ' + 'indicatorObject, isArguments, isArray, isString, keys, objectProto, ' + 'objectTypes, nonEnumProps, stringClass, stringProto, toString', 'return function(' + args + ') {\n' + iteratorTemplate(iteratorData) + '\n}');

      // return the compiled function
      return factory(baseCreateCallback, errorClass, errorProto, hasOwnProperty, indicatorObject, isArguments, isArray, isString, iteratorData.keys, objectProto, objectTypes, nonEnumProps, stringClass, stringProto, toString);
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function (func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' && toString.call(value) == argsClass || false;
    }
    // fallback for browsers that can't detect `arguments` objects by [[Class]]
    if (!support.argsClass) {
      isArguments = function (value) {
        return value && typeof value == 'object' && typeof value.length == 'number' && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
      };
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function (value) {
      return value && typeof value == 'object' && typeof value.length == 'number' && toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = createIterator({
      'args': 'object',
      'init': '[]',
      'top': 'if (!(objectTypes[typeof object])) return result',
      'loop': 'result.push(index)'
    });

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function (object) {
      if (!isObject(object)) {
        return [];
      }
      if (support.enumPrototypes && typeof object == 'function' || support.nonEnumArgs && object.length && isArguments(object)) {
        return shimKeys(object);
      }
      return nativeKeys(object);
    };

    /** Reusable iterator options for `assign` and `defaults` */
    var defaultsIteratorOptions = {
      'args': 'object, source, guard',
      'top': 'var args = arguments,\n' + '    argsIndex = 0,\n' + '    argsLength = typeof guard == \'number\' ? 2 : args.length;\n' + 'while (++argsIndex < argsLength) {\n' + '  iterable = args[argsIndex];\n' + '  if (iterable && objectTypes[typeof iterable]) {',
      'keys': keys,
      'loop': 'if (typeof result[index] == \'undefined\') result[index] = iterable[index]',
      'bottom': '  }\n}'
    };

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = createIterator(defaultsIteratorOptions, {
      'top': defaultsIteratorOptions.top.replace(';', ';\n' + 'if (argsLength > 3 && typeof args[argsLength - 2] == \'function\') {\n' + '  var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);\n' + '} else if (argsLength > 2 && typeof args[argsLength - 1] == \'function\') {\n' + '  callback = args[--argsLength];\n' + '}'),
      'loop': 'result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]'
    });

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = createIterator(defaultsIteratorOptions);

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }
    // fallback for older versions of Chrome and Safari
    if (isFunction(/x/)) {
      isFunction = function (value) {
        return typeof value == 'function' && toString.call(value) == funcClass;
      };
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' || value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2 ? createWrapper(func, 17, slice(arguments, 2), null, thisArg) : createWrapper(func, 1, null, null, thisArg);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {}

    /*--------------------------------------------------------------------------*/

    lodash.assign = assign;
    lodash.bind = bind;
    lodash.defaults = defaults;
    lodash.keys = keys;

    lodash.extend = assign;

    /*--------------------------------------------------------------------------*/

    lodash.identity = identity;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isFunction = isFunction;
    lodash.isObject = isObject;
    lodash.isString = isString;
    lodash.noop = noop;

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    /*--------------------------------------------------------------------------*/

    // some AMD build optimizers like r.js check for condition patterns like the following:
    if (true) {
      // Expose Lo-Dash to the global object even when an AMD loader is present in
      // case Lo-Dash is loaded with a RequireJS shim config.
      // See http://requirejs.org/docs/api.html#config-shim
      root._ = lodash;

      // define as an anonymous module so, through path mapping, it can be
      // referenced as the "underscore" module
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
        return lodash;
      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    // check for `exports` after `define` in case a build optimizer adds an `exports` object
    else if (freeExports && freeModule) {
      // in Node.js or RingoJS
      if (moduleExports) {
        (freeModule.exports = lodash)._ = lodash;
      }
      // in Narwhal or Rhino -require
      else {
        freeExports._ = lodash;
      }
    } else {
      // in a browser or Rhino
      root._ = lodash;
    }
  }).call(undefined);

  // no operation performed

  // no operation performed
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(76)(module), (function() { return this; }())))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _imageDimensions = __webpack_require__(54);

  var _imageDimensions2 = _interopRequireDefault(_imageDimensions);

  var _mathVector2 = __webpack_require__(50);

  var _mathVector22 = _interopRequireDefault(_mathVector2);

  var _renderersCanvasRenderer = __webpack_require__(55);

  var _renderersCanvasRenderer2 = _interopRequireDefault(_renderersCanvasRenderer);

  var _renderersWebglRenderer = __webpack_require__(56);

  var _renderersWebglRenderer2 = _interopRequireDefault(_renderersWebglRenderer);

  /**
   * Handles the image rendering process
   * @class
   * @alias ImglyKit.RenderImage
   * @param {Image} image
   * @param {Array.<ImglyKit.Operation>} operationsStack
   * @param {string} dimensions
   * @param {string} preferredRenderer
   * @private
   */

  var RenderImage = (function () {
    function RenderImage(image, operationsStack, dimensions, preferredRenderer) {
      _classCallCheck(this, RenderImage);

      /**
       * @type {Object}
       * @private
       */
      this._options = {
        preferredRenderer: preferredRenderer
      };

      /**
       * @type {Boolean}
       * @private
       * @default false
       */
      this._webglEnabled = false;

      /**
       * @type {Renderer}
       * @private
       */
      this._renderer = null;

      /**
       * @type {Image}
       * @private
       */
      this._image = image;

      /**
       * @type {Array.<ImglyKit.Operation>}
       * @private
       */
      this._stack = operationsStack;

      /**
       * @type {ImglyKit.ImageDimensions}
       * @private
       */
      this._dimensions = new _imageDimensions2['default'](dimensions);

      /**
       * @type {Vector2}
       * @private
       */
      this._initialDimensions = new _mathVector22['default'](this._image.width, this._image.height);

      this._initRenderer();
    }

    _createClass(RenderImage, [{
      key: '_initRenderer',

      /**
       * Creates a renderer (canvas or webgl, depending on support)
       * @return {Promise}
       * @private
       */
      value: function _initRenderer() {
        /* istanbul ignore if */
        if (_renderersWebglRenderer2['default'].isSupported() && this._options.preferredRenderer !== 'canvas') {
          this._renderer = new _renderersWebglRenderer2['default'](this._initialDimensions);
          this._webglEnabled = true;
        } else if (_renderersCanvasRenderer2['default'].isSupported()) {
          this._renderer = new _renderersCanvasRenderer2['default'](this._initialDimensions);
          this._webglEnabled = false;
        }

        /* istanbul ignore if */
        if (this._renderer === null) {
          throw new Error('Neither Canvas nor WebGL renderer are supported.');
        }

        this._renderer.drawImage(this._image);
      }
    }, {
      key: 'render',

      /**
       * Renders the image
       * @return {Promise}
       */
      value: function render() {
        var _this = this;

        var stack = this.sanitizedStack;

        var validationPromises = [];
        for (var i = 0; i < stack.length; i++) {
          var operation = stack[i];
          validationPromises.push(operation.validateSettings());
        }

        return Promise.all(validationPromises).then(function () {
          var promises = [];
          for (var i = 0; i < stack.length; i++) {
            var operation = stack[i];
            promises.push(operation.render(_this._renderer));
          }
          return Promise.all(promises);
        }).then(function () {
          return _this._renderer.renderFinal();
        }).then(function () {
          var initialSize = _this._renderer.getSize();
          var finalDimensions = _this._dimensions.calculateFinalDimensions(initialSize);

          if (finalDimensions.equals(initialSize)) {
            // No need to resize
            return;
          }

          return _this._renderer.resizeTo(finalDimensions);
        });
      }
    }, {
      key: 'getRenderer',

      /**
       * Returns the renderer
       * @return {Renderer}
       */
      value: function getRenderer() {
        return this._renderer;
      }
    }, {
      key: 'sanitizedStack',

      /**
       * Returns the operations stack without falsy values
       * @type {Array.<Operation>}
       */
      get: function () {
        var sanitizedStack = [];
        for (var i = 0; i < this._stack.length; i++) {
          var operation = this._stack[i];
          if (!operation) continue;
          sanitizedStack.push(operation);
        }
        return sanitizedStack;
      }
    }]);

    return RenderImage;
  })();

  exports['default'] = RenderImage;
  module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(process) {/* global Image */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _constants = __webpack_require__(5);

  var _exifRestorer = __webpack_require__(57);

  var _exifRestorer2 = _interopRequireDefault(_exifRestorer);

  var _utils = __webpack_require__(6);

  var _utils2 = _interopRequireDefault(_utils);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  /**
   * @class
   * @alias ImglyKit.ImageExporter
   * @private
   */

  var ImageExporter = (function () {
    function ImageExporter() {
      _classCallCheck(this, ImageExporter);
    }

    _createClass(ImageExporter, null, [{
      key: 'validateSettings',
      value: function validateSettings(renderType, imageFormat) {
        var settings = {
          renderType: renderType,
          imageFormat: imageFormat
        };

        // Validate RenderType
        if (typeof settings.renderType !== 'undefined' && settings.renderType !== null && _utils2['default'].values(_constants.RenderType).indexOf(settings.renderType) === -1) {
          throw new Error('Invalid render type: ' + settings.renderType);
        } else if (typeof renderType === 'undefined') {
          settings.renderType = _constants.RenderType.DATAURL;
        }

        // Validate ImageFormat
        if (typeof settings.imageFormat !== 'undefined' && settings.imageFormat !== null && _utils2['default'].values(_constants.ImageFormat).indexOf(settings.imageFormat) === -1) {
          throw new Error('Invalid image format: ' + settings.imageFormat);
        } else if (typeof imageFormat === 'undefined') {
          settings.imageFormat = _constants.ImageFormat.PNG;
        }

        // Render type 'buffer' only available in node
        if (settings.renderType === _constants.RenderType.BUFFER && typeof process === 'undefined') {
          throw new Error('Render type \'buffer\' is only available when using node.js');
        }

        return settings;
      }
    }, {
      key: 'export',

      /**
       * Exports the image from the given canvas with the given options
       * @param  {Image} image
       * @param  {Canvas} canvas
       * @param  {ImglyKit.RenderType} renderType
       * @param  {ImglyKit.ImageFormat} imageFormat
       * @param  {Number} quality = 0.8
       * @return {Promise}
       */
      value: function _export(image, canvas, renderType, imageFormat) {
        var quality = arguments[4] === undefined ? 0.8 : arguments[4];

        return new _vendorPromise2['default'](function (resolve, reject) {
          var result = undefined;
          if (renderType === _constants.RenderType.IMAGE || renderType === _constants.RenderType.DATAURL) {
            if (typeof window === 'undefined') {
              // Quality not supported in node environment / node-canvas
              result = canvas.toDataURL(imageFormat);
            } else {
              result = canvas.toDataURL(imageFormat, quality);
            }

            // When image's `src` attribute is a jpeg data url, we can restore
            // the exif information
            var jpegMatch = /^data:image\/jpeg/i;
            if (image.src.match(jpegMatch) && result.match(jpegMatch)) {
              result = _exifRestorer2['default'].restore(image.src, result);
            }
          }

          if (renderType === _constants.RenderType.IMAGE) {
            var outputImage = undefined;

            /* istanbul ignore else  */
            if (typeof window === 'undefined') {
              // Not a browser environment
              var CanvasImage = __webpack_require__(53).Image;
              outputImage = new CanvasImage();
            } else {
              outputImage = new Image();
            }

            outputImage.src = result;
            resolve(outputImage);
          } else if (renderType === _constants.RenderType.DATAURL) {
            resolve(result);
          } else if (renderType === _constants.RenderType.BUFFER) {
            resolve(canvas.toBuffer());
          } else if (renderType === _constants.RenderType.MSBLOB) {
            resolve(canvas.msToBlob());
          } else if (renderType === _constants.RenderType.BLOB) {
            canvas.toBlob(function (blob) {
              resolve(blob);
            }, imageFormat, quality);
          }
        });
      }
    }]);

    return ImageExporter;
  })();

  exports['default'] = ImageExporter;
  module.exports = exports['default'];
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(75)))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var VERSION_CHECK_FN = 'imglySDKVersionCallback';
  var VERSION_CHECK_URL = 'http://sdk.img.ly/version.json?sdk=html5&jsoncallback=' + VERSION_CHECK_FN;

  var VersionChecker = (function () {
    function VersionChecker(version) {
      _classCallCheck(this, VersionChecker);

      this._version = version;
      this._check();
    }

    _createClass(VersionChecker, [{
      key: '_check',

      /**
       * Checks if this version of the SDK is outdated
       * @private
       */
      value: function _check() {
        var self = this;
        window[VERSION_CHECK_FN] = function (response) {
          if (response.outdated) {
            console.warn('imgly-sdk-html5: Your version ' + self._version + ' is outdated.');
            console.warn('imgly-sdk-html5: Current version is ' + response.version + '.');
          }
        };

        var script = document.createElement('script');
        script.src = VERSION_CHECK_URL + '&version=' + this._version;
        script.async = true;
        document.getElementsByTagName('head')[0].appendChild(script);
      }
    }]);

    return VersionChecker;
  })();

  exports['default'] = VersionChecker;
  module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * The available render types
   * @enum {string}
   * @alias ImglyKit.RenderType
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var RenderType = {
    IMAGE: 'image',
    DATAURL: 'data-url',
    BUFFER: 'buffer',
    BLOB: 'blob',
    MSBLOB: 'ms-blob'
  };

  exports.RenderType = RenderType;
  /**
   * The available output image formats
   * @enum {string}
   * @alias ImglyKit.ImageFormat
   */
  var ImageFormat = {
    PNG: 'image/png',
    JPEG: 'image/jpeg'
  };
  exports.ImageFormat = ImageFormat;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

  /* global HTMLElement */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _mathVector2 = __webpack_require__(50);

  var _mathVector22 = _interopRequireDefault(_mathVector2);

  /**
   * Provides utility functions for internal use
   * @class
   * @alias ImglyKit.Utils
   * @private
   */

  var Utils = (function () {
    function Utils() {
      _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
      key: 'isArray',

      /**
       * Checks if the given object is an Array
       * @param  {Object}  object
       * @return {Boolean}
       */
      value: function isArray(object) {
        return Object.prototype.toString.call(object) === '[object Array]';
      }
    }, {
      key: 'select',

      /**
       * Returns the items selected by the given selector
       * @param  {Array} items
       * @param  {ImglyKit~Selector} selector - The selector
       * @return {Array} The selected items
       */
      value: function select(items) {
        var selector = arguments[1] === undefined ? null : arguments[1];

        if (selector === null) {
          return items;
        }

        // Turn string parameter into an array
        if (typeof selector === 'string') {
          selector = selector.split(',').map(function (identifier) {
            return identifier.trim();
          });
        }

        // Turn array parameter into an object with `only`
        if (Utils.isArray(selector)) {
          selector = { only: selector };
        }

        if (typeof selector.only !== 'undefined') {
          if (typeof selector.only === 'string') {
            selector.only = selector.only.split(',').map(function (identifier) {
              return identifier.trim();
            });
          }

          // Select only the given identifiers
          return items.filter(function (item) {
            return selector.only.indexOf(item) !== -1;
          });
        } else if (typeof selector.except !== 'undefined') {
          if (typeof selector.except === 'string') {
            selector.except = selector.except.split(',').map(function (identifier) {
              return identifier.trim();
            });
          }

          // Select all but the given identifiers
          return items.filter(function (item) {
            return selector.except.indexOf(item) === -1;
          });
        }

        throw new Error('Utils#select failed to filter items.');
      }
    }, {
      key: 'values',

      /**
       * Returns the given object's values as an array
       * @param {Object} object
       * @returns {Array<*>}
       */
      value: function values(object) {
        var values = [];
        for (var key in object) {
          values.push(object[key]);
        }
        return values;
      }
    }, {
      key: 'isDOMElement',

      /**
       * Checks if the given object is a DOM element
       * @param  {Object}  o
       * @return {Boolean}
       */
      /* istanbul ignore next */
      value: function isDOMElement(o) {
        return typeof HTMLElement === 'object' ? o instanceof HTMLElement : o && typeof o === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
      }
    }, {
      key: 'getEventPosition',

      /**
       * Gets the x and y position for the given event.
       * @param {Event} e
       * @return {Vector2}
       */
      value: function getEventPosition(e) {
        var x = e.pageX;
        var y = e.pageY;
        if (e.type.indexOf('touch') !== -1) {
          x = e.touches[0].pageX;
          y = e.touches[0].pageY;
        }
        return new _mathVector22['default'](x, y);
      }
    }]);

    return Utils;
  })();

  exports['default'] = Utils;
  module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Represents a color
   * @class
   * @alias ImglyKit.Color
   * @param {Number} r
   * @param {Number} g
   * @param {Number} b
   * @param {Number} [a]
   * @private
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Color = (function () {
    function Color(r, g, b, a) {
      _classCallCheck(this, Color);

      if (typeof a === 'undefined') {
        a = 1;
      }

      this.r = r;
      this.g = g;
      this.b = b;
      this.a = a;
    }

    _createClass(Color, [{
      key: 'toRGBA',

      /**
       * Returns an rgba() representation of this color
       * @return {String}
       */
      value: function toRGBA() {
        var colors = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255), this.a];
        return 'rgba(' + colors.join(',') + ')';
      }
    }, {
      key: 'toHex',

      /**
       * Returns a hex representation of this color
       * @return {String}
       */
      value: function toHex() {
        var components = [this._componentToHex(Math.round(this.r * 255)), this._componentToHex(Math.round(this.g * 255)), this._componentToHex(Math.round(this.b * 255))];
        return '#' + components.join('');
      }
    }, {
      key: 'toGLColor',

      /**
       * Returns an array with 4 values (0...1)
       * @return {Array.<Number>}
       */
      value: function toGLColor() {
        return [this.r, this.g, this.b, this.a];
      }
    }, {
      key: 'toRGBGLColor',

      /**
       * Returns an array with 3 values (0...1)
       * @return {Array.<Number>}
       */
      value: function toRGBGLColor() {
        return [this.r, this.g, this.b];
      }
    }, {
      key: 'toHSV',

      /**
       * Converts the RGB value to HSV
       * @return {Array.<Number>}
       */
      value: function toHSV() {
        var max = Math.max(this.r, this.g, this.b);
        var min = Math.min(this.r, this.g, this.b);
        var h = undefined;
        var s = undefined;
        var v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;

        if (max === min) {
          h = 0 // achromatic
          ;
        } else {
          switch (max) {
            case this.r:
              h = (this.g - this.b) / d + (this.g < this.b ? 6 : 0);
              break;
            case this.g:
              h = (this.b - this.r) / d + 2;
              break;
            case this.b:
              h = (this.r - this.g) / d + 4;
              break;
          }
          h /= 6;
        }

        return [h, s, v];
      }
    }, {
      key: 'fromHSV',

      /**
       * Sets the RGB values of this color to match the given HSV values
       * @param {Number} h
       * @param {Number} s
       * @param {Number} v
       */
      value: function fromHSV(h, s, v) {
        var r = this.r;
        var g = this.g;
        var b = this.b;

        var i = Math.floor(h * 6);
        var f = h * 6 - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);

        switch (i % 6) {
          case 0:
            r = v;
            g = t;
            b = p;
            break;
          case 1:
            r = q;
            g = v;
            b = p;
            break;
          case 2:
            r = p;
            g = v;
            b = t;
            break;
          case 3:
            r = p;
            g = q;
            b = v;
            break;
          case 4:
            r = t;
            g = p;
            b = v;
            break;
          case 5:
            r = v;
            g = p;
            b = q;
            break;
        }

        this.r = r;
        this.g = g;
        this.b = b;
      }
    }, {
      key: 'clone',

      /**
       * Returns a clone of the current color
       * @return {Color}
       */
      value: function clone() {
        return new Color(this.r, this.g, this.b, this.a);
      }
    }, {
      key: '_componentToHex',

      /**
       * Returns the given number as hex
       * @param  {Number} component
       * @return {String}
       * @private
       */
      value: function _componentToHex(component) {
        var hex = component.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
      }
    }, {
      key: 'toString',

      /**
       * Returns the string representation of this color
       * @returns {String}
       */
      value: function toString() {
        return 'Color(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.a + ')';
      }
    }]);

    return Color;
  })();

  exports['default'] = Color;
  module.exports = exports['default'];

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

  /* jshint unused: false */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Base class for filters. Extendable via {@link ImglyKit.Filter#extend}
   * @class
   * @alias ImglyKit.Filter
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Filter = (function () {
    function Filter() {
      _classCallCheck(this, Filter);
    }

    _createClass(Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        /* istanbul ignore next */
        throw new Error('Filter#render is abstract and not implemented in inherited class.');
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return null;
      }
    }]);

    return Filter;
  })();

  /**
   * To create an {@link ImglyKit.Filter} class of your own, call this
   * method and provide instance properties and functions.
   * @function
   */
  Filter.extend = __webpack_require__(59);

  // Exposed classes
  Filter.PrimitivesStack = __webpack_require__(60);
  Filter.Primitives = {};
  Filter.Primitives.Saturation = __webpack_require__(61);
  Filter.Primitives.LookupTable = __webpack_require__(62);
  Filter.Primitives.ToneCurve = __webpack_require__(63);
  Filter.Primitives.SoftColorOverlay = __webpack_require__(64);
  Filter.Primitives.Desaturation = __webpack_require__(65);
  Filter.Primitives.X400 = __webpack_require__(66);
  Filter.Primitives.Grayscale = __webpack_require__(67);
  Filter.Primitives.Contrast = __webpack_require__(68);
  Filter.Primitives.Glow = __webpack_require__(69);
  Filter.Primitives.Gobblin = __webpack_require__(70);
  Filter.Primitives.Brightness = __webpack_require__(71);

  exports['default'] = Filter;
  module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

  /* jshint unused:false */
  /* jshint -W083 */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  /**
   * To create an {@link ImglyKit.Operation} class of your own, call this
   * method and provide instance properties and functions.
   * @function
   */

  var _libExtend = __webpack_require__(59);

  var _libExtend2 = _interopRequireDefault(_libExtend);

  /**
   * Base class for Operations. Extendable via {@link ImglyKit.Operation#extend}.
   * @class
   * @alias ImglyKit.Operation
   */

  var Operation = (function (_EventEmitter) {
    function Operation(kit, options) {
      _classCallCheck(this, Operation);

      _get(Object.getPrototypeOf(Operation.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this.availableOptions = _lodash2['default'].extend(this.availableOptions || {}, {
        numberFormat: { type: 'string', 'default': 'relative', available: ['absolute', 'relative'] }
      });
      this._dirty = true;

      this._glslPrograms = {};
      this._uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0;
        var v = c === 'x' ? r : r & 3 | 8;
        return v.toString(16);
      });

      this._initOptions(options || {});
    }

    _inherits(Operation, _EventEmitter);

    _createClass(Operation, [{
      key: 'validateSettings',

      /**
       * Checks whether this Operation can be applied the way it is configured
       * @return {Promise}
       */
      value: function validateSettings() {
        var _this = this;

        var identifier = this.identifier;
        return new _vendorPromise2['default'](function (resolve, reject) {
          // Check for required options
          for (var optionName in _this.availableOptions) {
            var optionConfig = _this.availableOptions[optionName];
            if (optionConfig.required && typeof _this._options[optionName] === 'undefined') {
              return reject(new Error('Operation `' + identifier + '`: Option `' + optionName + '` is required.'));
            }
          }

          resolve();
        });
      }
    }, {
      key: 'render',

      /**
       * Applies this operation
       * @param  {Renderer} renderer
       * @return {Promise}
       * @abstract
       */
      value: function render(renderer) {
        var renderFn = undefined;
        if (renderer.identifier === 'webgl') {
          /* istanbul ignore next */
          renderFn = this._renderWebGL.bind(this);
        } else {
          renderFn = this._renderCanvas.bind(this);
        }

        // Handle caching
        if (this._dirty) {
          renderFn(renderer);
          renderer.cache(this._uuid);
          this._dirty = false;
        } else {
          renderer.drawCached(this._uuid);
        }
      }
    }, {
      key: '_renderWebGL',

      /**
       * Applies this operation using WebGL
       * @return {WebGLRenderer} renderer
       * @private
       */
      /* istanbul ignore next */
      value: function _renderWebGL() {
        throw new Error('Operation#_renderWebGL is abstract and not implemented in inherited class.');
      }
    }, {
      key: '_renderCanvas',

      /**
       * Applies this operation using Canvas2D
       * @return {CanvasRenderer} renderer
       * @private
       */
      value: function _renderCanvas() {
        throw new Error('Operation#_renderCanvas is abstract and not implemented in inherited class.');
      }
    }, {
      key: '_initOptions',

      /**
       * Goes through the available options, sets _options defaults
       * @param {Object} userOptions
       * @private
       */
      value: function _initOptions(userOptions) {
        this._options = {};

        // Set defaults, create getters and setters
        var optionName, option, capitalized;
        var self = this;
        for (optionName in this.availableOptions) {
          capitalized = optionName.charAt(0).toUpperCase() + optionName.slice(1);
          option = this.availableOptions[optionName];

          // Create setter and getter
          var fn = function fn(optionName, option) {
            self['set' + capitalized] = function (value) {
              self._setOption(optionName, value);
            };

            // Default getter
            self['get' + capitalized] = function () {
              return self._getOption(optionName);
            };
          };
          fn(optionName, option);

          // Set default if available
          if (typeof option['default'] !== 'undefined') {
            this['set' + capitalized](option['default']);
          }
        }

        // Overwrite options with the ones given by user
        for (optionName in userOptions) {
          // Check if option is available
          if (typeof this.availableOptions[optionName] === 'undefined') {
            throw new Error('Invalid option: ' + optionName);
          }

          // Call setter
          capitalized = optionName.charAt(0).toUpperCase() + optionName.slice(1);
          this['set' + capitalized](userOptions[optionName]);
        }
      }
    }, {
      key: 'set',

      /**
       * Sets the given options
       * @param {Object} options
       */
      value: function set(options) {
        for (var optionName in options) {
          this._setOption(optionName, options[optionName], false);
        }

        this.emit('update');
      }
    }, {
      key: '_getOption',

      /**
       * Returns the value for the given option
       * @param {String} optionName
       * @return {*}
       * @private
       */
      value: function _getOption(optionName) {
        return this._options[optionName];
      }
    }, {
      key: '_setOption',

      /**
       * Sets the value for the given option, validates it
       * @param {String} optionName
       * @param {*} value
       * @param {Boolean} update
       * @private
       */
      value: function _setOption(optionName, value) {
        var update = arguments[2] === undefined ? true : arguments[2];

        var optionConfig = this.availableOptions[optionName];
        var identifier = this.identifier;

        if (typeof optionConfig.setter !== 'undefined') {
          value = optionConfig.setter.call(this, value);
        }

        if (typeof optionConfig.validation !== 'undefined') {
          optionConfig.validation(value);
        }

        switch (optionConfig.type) {
          // String options
          case 'string':
            if (typeof value !== 'string') {
              throw new Error('Operation `' + identifier + '`: Option `' + optionName + '` has to be a string.');
            }

            // String value restrictions
            var available = optionConfig.available;
            if (typeof available !== 'undefined' && available.indexOf(value) === -1) {
              throw new Error('Operation `' + identifier + '`: Invalid value for `' + optionName + '` (valid values are: ' + optionConfig.available.join(', ') + ')');
            }

            this._options[optionName] = value;
            break;

          // Number options
          case 'number':
            if (typeof value !== 'number') {
              throw new Error('Operation `' + identifier + '`: Option `' + optionName + '` has to be a number.');
            }

            this._options[optionName] = value;
            break;

          // Boolean options
          case 'boolean':
            if (typeof value !== 'boolean') {
              throw new Error('Operation `' + identifier + '`: Option `' + optionName + '` has to be a boolean.');
            }

            this._options[optionName] = value;
            break;

          // Vector2 options
          case 'vector2':
            if (!(value instanceof _libMathVector22['default'])) {
              throw new Error('Operation `' + identifier + '`: Option `' + optionName + '` has to be an instance of ImglyKit.Vector2.');
            }

            this._options[optionName] = value.clone();

            break;

          // Color options
          case 'color':
            if (!(value instanceof _libColor2['default'])) {
              throw new Error('Operation `' + identifier + '`: Option `' + optionName + '` has to be an instance of ImglyKit.Color.');
            }

            this._options[optionName] = value;
            break;

          // Object options
          case 'object':
            this._options[optionName] = value;
            break;
        }

        this._dirty = true;
        if (update) {
          this.emit('update');
        }
      }
    }, {
      key: 'getNewDimensions',

      /**
       * Gets the new dimensions
       * @param {Renderer} renderer
       * @param {Vector2} [dimensions]
       * @return {Vector2}
       * @private
       */
      value: function getNewDimensions(renderer, dimensions) {
        var canvas = renderer.getCanvas();
        dimensions = dimensions || new _libMathVector22['default'](canvas.width, canvas.height);

        return dimensions;
      }
    }, {
      key: 'dirty',

      /**
       * Sets this operation to dirty, so that it will re-render next time
       * @param {Boolean} dirty = true
       */
      set: function (dirty) {
        this._dirty = dirty;
      },

      /**
       * Returns the dirty state
       * @type {Boolean}
       */
      get: function () {
        return this._dirty;
      }
    }]);

    return Operation;
  })(_libEventEmitter2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  Operation.prototype.identifier = null;
  Operation.extend = _libExtend2['default'];

  exports['default'] = Operation;
  module.exports = exports['default'];

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _filtersIdentityFilter = __webpack_require__(73);

  var _filtersIdentityFilter2 = _interopRequireDefault(_filtersIdentityFilter);

  /**
   * An operation that can apply a selected filter
   *
   * @class
   * @alias ImglyKit.Operations.FiltersOperation
   * @extends ImglyKit.Operation
   */

  var FiltersOperation = (function (_Operation) {
    function FiltersOperation() {
      _classCallCheck(this, FiltersOperation);

      if (_Operation != null) {
        _Operation.apply(this, arguments);
      }
    }

    _inherits(FiltersOperation, _Operation);

    _createClass(FiltersOperation, [{
      key: '_renderWebGL',

      /**
       * Renders the filter using WebGL
       * @param  {WebGLRenderer} renderer
       * @override
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_renderCanvas',

      /**
       * Renders the filter using Canvas2D
       * @param {CanvasRenderer} renderer
       * @override
       */
      value: function _renderCanvas(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_render',

      /**
       * Renders the filter (all renderers supported)
       * @param {Renderer} renderer
       * @private
       */
      value: function _render(renderer) {
        this._selectedFilter.render(renderer);
      }
    }]);

    return FiltersOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  FiltersOperation.prototype.identifier = 'filters';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  FiltersOperation.prototype.availableOptions = {
    filter: { type: 'object', 'default': _filtersIdentityFilter2['default'],
      setter: function setter(Filter) {
        this._selectedFilter = new Filter();
        return Filter;
      }
    }
  };

  exports['default'] = FiltersOperation;
  module.exports = exports['default'];

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  /**
   * An operation that can crop out a part of the image
   *
   * @class
   * @alias ImglyKit.Operations.CropOperation
   * @extends ImglyKit.Operation
   */

  var CropOperation = (function (_Operation) {
    function CropOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, CropOperation);

      _get(Object.getPrototypeOf(CropOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader used for this operation
       */
      this.fragmentShader = '\n      precision mediump float;\n      uniform sampler2D u_image;\n      varying vec2 v_texCoord;\n      uniform vec2 u_cropStart;\n      uniform vec2 u_cropEnd;\n\n      void main() {\n        vec2 size = u_cropEnd - u_cropStart;\n        gl_FragColor = texture2D(u_image, v_texCoord * size + u_cropStart);\n      }\n    ';
    }

    _inherits(CropOperation, _Operation);

    _createClass(CropOperation, [{
      key: '_renderWebGL',

      /**
       * Rotates and crops the image using WebGL
       * @param  {WebGLRenderer} renderer
       * @override
       * @private
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var canvas = renderer.getCanvas();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var start = this._options.start.clone();
        var end = this._options.end.clone();

        if (this._options.numberFormat === 'absolute') {
          start.divide(canvasSize);
          end.divide(canvasSize);
        }

        // 0..1 > 1..0 on y-axis
        var originalStartY = start.y;
        start.y = 1 - end.y;
        end.y = 1 - originalStartY;

        // The new size
        var newDimensions = this.getNewDimensions(renderer);

        // Resize the canvas
        canvas.width = newDimensions.x;
        canvas.height = newDimensions.y;

        // Run the cropping shader
        renderer.runShader(null, this.fragmentShader, {
          uniforms: {
            u_cropStart: { type: '2f', value: [start.x, start.y] },
            u_cropEnd: { type: '2f', value: [end.x, end.y] }
          }
        });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas
       * @param {CanvasRenderer} renderer
       * @override
       * @private
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var dimensions = new _libMathVector22['default'](canvas.width, canvas.height);

        var newDimensions = this.getNewDimensions(renderer);

        // Create a temporary canvas to draw to
        var newCanvas = renderer.createCanvas();
        newCanvas.width = newDimensions.x;
        newCanvas.height = newDimensions.y;
        var newContext = newCanvas.getContext('2d');

        // The upper left corner of the cropped area on the original image
        var startPosition = this._options.start.clone();

        if (this._options.numberFormat === 'relative') {
          startPosition.multiply(dimensions);
        }

        // Draw the source canvas onto the new one
        newContext.drawImage(canvas, startPosition.x, startPosition.y, // source x, y
        newDimensions.x, newDimensions.y, // source dimensions
        0, 0, // destination x, y
        newDimensions.x, newDimensions.y // destination dimensions
        );

        // Set the new canvas
        renderer.setCanvas(newCanvas);
      }
    }, {
      key: 'getNewDimensions',

      /**
       * Gets the new dimensions
       * @param {Renderer} renderer
       * @param {Vector2} [dimensions]
       * @return {Vector2}
       */
      value: function getNewDimensions(renderer, dimensions) {
        var canvas = renderer.getCanvas();
        dimensions = dimensions || new _libMathVector22['default'](canvas.width, canvas.height);

        var newDimensions = this._options.end.clone().subtract(this._options.start);

        if (this._options.numberFormat === 'relative') {
          newDimensions.multiply(dimensions);
        }

        return newDimensions;
      }
    }]);

    return CropOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  CropOperation.prototype.identifier = 'crop';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  CropOperation.prototype.availableOptions = {
    start: { type: 'vector2', required: true, 'default': new _libMathVector22['default'](0, 0) },
    end: { type: 'vector2', required: true, 'default': new _libMathVector22['default'](1, 1) }
  };

  exports['default'] = CropOperation;
  module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  /**
   * An operation that can crop out a part of the image and rotates it
   *
   * @class
   * @alias ImglyKit.Operations.RotationOperation
   * @extends ImglyKit.Operation
   */

  var RotationOperation = (function (_Operation) {
    function RotationOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, RotationOperation);

      _get(Object.getPrototypeOf(RotationOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader used for this operation
       */
      this.vertexShader = '\n      attribute vec2 a_position;\n      attribute vec2 a_texCoord;\n      varying vec2 v_texCoord;\n      uniform mat3 u_matrix;\n\n      void main() {\n        gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\n        v_texCoord = a_texCoord;\n      }\n    ';
    }

    _inherits(RotationOperation, _Operation);

    _createClass(RotationOperation, [{
      key: '_renderWebGL',

      /**
       * Rotates the image using WebGL
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var canvas = renderer.getCanvas();

        var actualDegrees = this._options.degrees % 360;

        // If we're not rotating by 180 degrees, we need to resize the canvas
        // and the texture
        if (actualDegrees % 180 !== 0) {
          var newDimensions = this.getNewDimensions(renderer);

          // Resize the canvas
          canvas.width = newDimensions.x;
          canvas.height = newDimensions.y;
        }

        // Build the rotation matrix
        var radians = actualDegrees * (Math.PI / 180);
        var c = Math.cos(radians);
        var s = Math.sin(radians);
        var rotationMatrix = [c, -s, 0, s, c, 0, 0, 0, 1];

        // Run the shader
        renderer.runShader(this.vertexShader, null, {
          uniforms: {
            u_matrix: { type: 'mat3fv', value: rotationMatrix }
          }
        });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();

        var actualDegrees = this._options.degrees % 360;
        var newDimensions = this.getNewDimensions(renderer);

        // Create a rotated canvas
        var newCanvas = renderer.createCanvas();
        newCanvas.width = newDimensions.x;
        newCanvas.height = newDimensions.y;
        var newContext = newCanvas.getContext('2d');

        newContext.save();

        // Translate the canvas
        newContext.translate(newCanvas.width / 2, newCanvas.height / 2);

        // Rotate the canvas
        newContext.rotate(actualDegrees * (Math.PI / 180));

        // Create a temporary canvas so that we can draw the image
        // with the applied transformation
        var tempCanvas = renderer.cloneCanvas();
        newContext.drawImage(tempCanvas, -canvas.width / 2, -canvas.height / 2);

        // Restore old transformation
        newContext.restore();

        renderer.setCanvas(newCanvas);
      }
    }, {
      key: 'getNewDimensions',

      /**
       * Gets the new dimensions
       * @param {Renderer} renderer
       * @param {Vector2} [dimensions]
       * @return {Vector2}
       */
      value: function getNewDimensions(renderer, dimensions) {
        var canvas = renderer.getCanvas();
        dimensions = dimensions || new _libMathVector22['default'](canvas.width, canvas.height);

        var actualDegrees = this._options.degrees % 360;
        if (actualDegrees % 180 !== 0) {
          var tempX = dimensions.x;
          dimensions.x = dimensions.y;
          dimensions.y = tempX;
        }

        return dimensions;
      }
    }]);

    return RotationOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  RotationOperation.prototype.identifier = 'rotation';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  RotationOperation.prototype.availableOptions = {
    degrees: { type: 'number', 'default': 0, validation: function validation(value) {
        if (value % 90 !== 0) {
          throw new Error('RotationOperation: `rotation` has to be a multiple of 90.');
        }
      } }
  };

  exports['default'] = RotationOperation;
  module.exports = exports['default'];

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _filtersPrimitivesStack = __webpack_require__(60);

  var _filtersPrimitivesStack2 = _interopRequireDefault(_filtersPrimitivesStack);

  var _filtersPrimitivesSaturation = __webpack_require__(61);

  var _filtersPrimitivesSaturation2 = _interopRequireDefault(_filtersPrimitivesSaturation);

  /**
   * @class
   * @alias ImglyKit.Operations.SaturationOperation
   * @extends ImglyKit.Operation
   */

  var SaturationOperation = (function (_Operation) {
    function SaturationOperation() {
      _classCallCheck(this, SaturationOperation);

      if (_Operation != null) {
        _Operation.apply(this, arguments);
      }
    }

    _inherits(SaturationOperation, _Operation);

    _createClass(SaturationOperation, [{
      key: '_renderWebGL',

      /**
       * Renders the saturation using WebGL
       * @param  {WebGLRenderer} renderer
       * @override
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_renderCanvas',

      /**
       * Renders the saturation using Canvas2D
       * @param {CanvasRenderer} renderer
       * @override
       */
      value: function _renderCanvas(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_render',

      /**
       * Renders the saturation (all renderers supported)
       * @param  {Renderer} renderer
       * @private
       */
      value: function _render(renderer) {
        if (!this._stack) {
          this._stack = new _filtersPrimitivesStack2['default']();
          this._primitive = new _filtersPrimitivesSaturation2['default']({
            saturation: this._options.saturation
          });
          this._stack.add(this._primitive);
        }

        // @TODO
        // Primitives should have the same option logic as operations - which
        // should allow us to do `this._primitive.setSaturation`
        this._primitive.options.saturation = this._options.saturation;
        this._stack.render(renderer);
      }
    }]);

    return SaturationOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  SaturationOperation.prototype.identifier = 'saturation';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  SaturationOperation.prototype.availableOptions = {
    saturation: { type: 'number', 'default': 1 }
  };

  exports['default'] = SaturationOperation;
  module.exports = exports['default'];

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _filtersPrimitivesStack = __webpack_require__(60);

  var _filtersPrimitivesStack2 = _interopRequireDefault(_filtersPrimitivesStack);

  var _filtersPrimitivesContrast = __webpack_require__(68);

  var _filtersPrimitivesContrast2 = _interopRequireDefault(_filtersPrimitivesContrast);

  /**
   * @class
   * @alias ImglyKit.Operations.ContrastOperation
   * @extends ImglyKit.Operation
   */

  var ContrastOperation = (function (_Operation) {
    function ContrastOperation() {
      _classCallCheck(this, ContrastOperation);

      if (_Operation != null) {
        _Operation.apply(this, arguments);
      }
    }

    _inherits(ContrastOperation, _Operation);

    _createClass(ContrastOperation, [{
      key: '_renderWebGL',

      /**
       * Renders the contrast using WebGL
       * @param  {WebGLRenderer} renderer
       * @override
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_renderCanvas',

      /**
       * Renders the contrast using Canvas2D
       * @param {CanvasRenderer} renderer
       * @override
       */
      value: function _renderCanvas(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_render',

      /**
       * Renders the contrast (all renderers supported)
       * @param  {Renderer} renderer
       * @private
       */
      value: function _render(renderer) {
        if (!this._stack) {
          this._stack = new _filtersPrimitivesStack2['default']();
          this._primitive = new _filtersPrimitivesContrast2['default']({
            contrast: this._options.contrast
          });
          this._stack.add(this._primitive);
        }

        // @TODO
        // Primitives should have the same option logic as operations - which
        // should allow us to do `this._primitive.setContrast`
        this._primitive.options.contrast = this._options.contrast;
        this._stack.render(renderer);
      }
    }]);

    return ContrastOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  ContrastOperation.prototype.identifier = 'contrast';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  ContrastOperation.prototype.availableOptions = {
    contrast: { type: 'number', 'default': 1 }
  };

  exports['default'] = ContrastOperation;
  module.exports = exports['default'];

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _filtersPrimitivesStack = __webpack_require__(60);

  var _filtersPrimitivesStack2 = _interopRequireDefault(_filtersPrimitivesStack);

  var _filtersPrimitivesBrightness = __webpack_require__(71);

  var _filtersPrimitivesBrightness2 = _interopRequireDefault(_filtersPrimitivesBrightness);

  /**
   * @class
   * @alias ImglyKit.Operations.BrightnessOperation
   * @extends ImglyKit.Operation
   */

  var BrightnessOperation = (function (_Operation) {
    function BrightnessOperation() {
      _classCallCheck(this, BrightnessOperation);

      if (_Operation != null) {
        _Operation.apply(this, arguments);
      }
    }

    _inherits(BrightnessOperation, _Operation);

    _createClass(BrightnessOperation, [{
      key: '_renderWebGL',

      /**
       * Renders the brightness using WebGL
       * @param  {WebGLRenderer} renderer
       * @override
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_renderCanvas',

      /**
       * Renders the brightness using Canvas2D
       * @param {CanvasRenderer} renderer
       * @override
       */
      value: function _renderCanvas(renderer) {
        this._render(renderer);
      }
    }, {
      key: '_render',

      /**
       * Renders the brightness (all renderers supported)
       * @param {Renderer} renderer
       * @private
       */
      value: function _render(renderer) {
        if (!this._stack) {
          this._stack = new _filtersPrimitivesStack2['default']();
          this._primitive = new _filtersPrimitivesBrightness2['default']({
            brightness: this._options.brightness
          });
          this._stack.add(this._primitive);
        }

        // @TODO
        // Primitives should have the same option logic as operations - which
        // should allow us to do `this._primitive.setBrightness`
        this._primitive.options.brightness = this._options.brightness;
        this._stack.render(renderer);
      }
    }]);

    return BrightnessOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  BrightnessOperation.prototype.identifier = 'brightness';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  BrightnessOperation.prototype.availableOptions = {
    brightness: { type: 'number', 'default': 0 }
  };

  exports['default'] = BrightnessOperation;
  module.exports = exports['default'];

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  /**
   * An operation that can flip the canvas
   *
   * @class
   * @alias ImglyKit.Operations.FlipOperation
   * @extends ImglyKit.Operation
   */

  var FlipOperation = (function (_Operation) {
    function FlipOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, FlipOperation);

      _get(Object.getPrototypeOf(FlipOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader used for this operation
       */
      this.fragmentShader = '\n      precision mediump float;\n      uniform sampler2D u_image;\n      varying vec2 v_texCoord;\n      uniform bool u_flipVertical;\n      uniform bool u_flipHorizontal;\n\n      void main() {\n        vec2 texCoord = vec2(v_texCoord);\n        if (u_flipVertical) {\n          texCoord.y = 1.0 - texCoord.y;\n        }\n        if (u_flipHorizontal) {\n          texCoord.x = 1.0 - texCoord.x;\n        }\n        gl_FragColor = texture2D(u_image, texCoord);\n      }\n    ';
    }

    _inherits(FlipOperation, _Operation);

    _createClass(FlipOperation, [{
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        renderer.runShader(null, this.fragmentShader, {
          uniforms: {
            u_flipVertical: { type: 'f', value: this._options.vertical },
            u_flipHorizontal: { type: 'f', value: this._options.horizontal }
          }
        });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var context = renderer.getContext();

        var scaleX = 1,
            scaleY = 1;
        var translateX = 0,
            translateY = 0;

        if (this._options.horizontal) {
          scaleX = -1;
          translateX = canvas.width;
        }

        if (this._options.vertical) {
          scaleY = -1;
          translateY = canvas.height;
        }

        // Save the current state
        context.save();

        // Apply the transformation
        context.translate(translateX, translateY);
        context.scale(scaleX, scaleY);

        // Create a temporary canvas so that we can draw the image
        // with the applied transformation
        var tempCanvas = renderer.cloneCanvas();
        context.drawImage(tempCanvas, 0, 0);

        // Restore old transformation
        context.restore();
      }
    }]);

    return FlipOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  FlipOperation.prototype.identifier = 'flip';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  FlipOperation.prototype.availableOptions = {
    horizontal: { type: 'boolean', 'default': false },
    vertical: { type: 'boolean', 'default': false }
  };

  exports['default'] = FlipOperation;
  module.exports = exports['default'];

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ('value' in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _vendorStackBlur = __webpack_require__(74);

  var _vendorStackBlur2 = _interopRequireDefault(_vendorStackBlur);

  /**
   * An operation that can crop out a part of the image
   *
   * @class
   * @alias ImglyKit.Operations.TiltShiftOperation
   * @extends ImglyKit.Operation
   */

  var TiltShiftOperation = (function (_Operation) {
    function TiltShiftOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, TiltShiftOperation);

      _get(Object.getPrototypeOf(TiltShiftOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader used for this operation
       * @internal Based on evanw's glfx.js tilt shift shader:
       *           https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js
       */
      this._fragmentShader = '\n      precision mediump float;\n      uniform sampler2D u_image;\n      uniform float blurRadius;\n      uniform float gradientRadius;\n      uniform vec2 start;\n      uniform vec2 end;\n      uniform vec2 delta;\n      uniform vec2 texSize;\n      varying vec2 v_texCoord;\n\n      float random(vec3 scale, float seed) {\n        return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n      }\n\n      void main() {\n          vec4 color = vec4(0.0);\n          float total = 0.0;\n\n          float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n          vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n          float radius = smoothstep(0.0, 1.0, abs(dot(v_texCoord * texSize - start, normal)) / gradientRadius) * blurRadius;\n          for (float t = -30.0; t <= 30.0; t++) {\n              float percent = (t + offset - 0.5) / 30.0;\n              float weight = 1.0 - abs(percent);\n              vec4 sample = texture2D(u_image, v_texCoord + delta * percent * radius / texSize);\n\n              sample.rgb *= sample.a;\n\n              color += sample * weight;\n              total += weight;\n          }\n\n          gl_FragColor = color / total;\n          gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n      }\n    ';

      this._cachedBlurredCanvas = null;
      this._lastBlurRadius = this._options.blurRadius;
      this._lastGradientRadius = this._options.gradientRadius;
    }

    _inherits(TiltShiftOperation, _Operation);

    _createClass(TiltShiftOperation, [{
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var canvas = renderer.getCanvas();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var start = this._options.start.clone();
        var end = this._options.end.clone();

        if (this._options.numberFormat === 'relative') {
          start.multiply(canvasSize);
          end.multiply(canvasSize);
        }

        start.y = canvasSize.y - start.y;
        end.y = canvasSize.y - end.y;

        var delta = end.clone().subtract(start);
        var d = Math.sqrt(delta.x * delta.x + delta.y * delta.y);

        var uniforms = {
          blurRadius: { type: 'f', value: this._options.blurRadius },
          gradientRadius: { type: 'f', value: this._options.gradientRadius },
          start: { type: '2f', value: [start.x, start.y] },
          end: { type: '2f', value: [end.x, end.y] },
          delta: { type: '2f', value: [delta.x / d, delta.y / d] },
          texSize: { type: '2f', value: [canvas.width, canvas.height] }
        };

        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], { uniforms: uniforms });

        // Update delta for second pass
        uniforms.delta.value = [-delta.y / d, delta.x / d];

        renderer.runProgram(this._glslPrograms[renderer.id], { uniforms: uniforms });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();

        var optionsChanged = this._options.blurRadius !== this._lastBlurRadius || this._options.gradientRadius !== this._lastGradientRadius;
        var blurryCanvas = undefined;
        if (optionsChanged || this._cachedBlurredCanvas === null) {
          // Blur and cache canvas
          blurryCanvas = this._blurCanvas(renderer);
          this._cachedBlurredCanvas = blurryCanvas;
          this._lastBlurRadius = this._options.blurRadius;
          this._lastGradientRadius = this._options.gradientRadius;
        } else {
          // Use cached canvas
          blurryCanvas = this._cachedBlurredCanvas;
        }

        var maskCanvas = this._createMask(renderer);

        this._applyMask(canvas, blurryCanvas, maskCanvas);
      }
    }, {
      key: '_blurCanvas',

      /**
       * Creates a blurred copy of the canvas
       * @param  {CanvasRenderer} renderer
       * @return {Canvas}
       * @private
       */
      value: function _blurCanvas(renderer) {
        var newCanvas = renderer.cloneCanvas();
        var blurryContext = newCanvas.getContext('2d');
        var blurryImageData = blurryContext.getImageData(0, 0, newCanvas.width, newCanvas.height);
        _vendorStackBlur2['default'].stackBlurCanvasRGBA(blurryImageData, 0, 0, newCanvas.width, newCanvas.height, this._options.blurRadius);
        blurryContext.putImageData(blurryImageData, 0, 0);

        return newCanvas;
      }
    }, {
      key: '_createMask',

      /**
       * Creates the mask canvas
       * @param  {CanvasRenderer} renderer
       * @return {Canvas}
       * @private
       */
      value: function _createMask(renderer) {
        var canvas = renderer.getCanvas();

        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var gradientRadius = this._options.gradientRadius;

        var maskCanvas = renderer.createCanvas(canvas.width, canvas.height);
        var maskContext = maskCanvas.getContext('2d');

        var start = this._options.start.clone();
        var end = this._options.end.clone();

        if (this._options.numberFormat === 'relative') {
          start.multiply(canvasSize);
          end.multiply(canvasSize);
        }

        var dist = end.clone().subtract(start);
        var middle = start.clone().add(dist.clone().divide(2));

        var totalDist = Math.sqrt(Math.pow(dist.x, 2) + Math.pow(dist.y, 2));
        var factor = dist.clone().divide(totalDist);

        var gradientStart = middle.clone().add(gradientRadius * factor.y, -gradientRadius * factor.x);
        var gradientEnd = middle.clone().add(-gradientRadius * factor.y, gradientRadius * factor.x);

        // Build gradient
        var gradient = maskContext.createLinearGradient(gradientStart.x, gradientStart.y, gradientEnd.x, gradientEnd.y);
        gradient.addColorStop(0, '#000000');
        gradient.addColorStop(0.5, '#FFFFFF');
        gradient.addColorStop(1, '#000000');

        // Draw gradient
        maskContext.fillStyle = gradient;
        maskContext.fillRect(0, 0, canvas.width, canvas.height);

        return maskCanvas;
      }
    }, {
      key: '_applyMask',

      /**
       * Applies the blur and mask to the input canvas
       * @param  {Canvas} inputCanvas
       * @param  {Canvas} blurryCanvas
       * @param  {Canvas} maskCanvas
       * @private
       */
      value: function _applyMask(inputCanvas, blurryCanvas, maskCanvas) {
        var inputContext = inputCanvas.getContext('2d');
        var blurryContext = blurryCanvas.getContext('2d');
        var maskContext = maskCanvas.getContext('2d');

        var inputImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
        var pixels = inputImageData.data;
        var blurryPixels = blurryContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
        var maskPixels = maskContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;

        for (var i = 0; i < maskPixels.length; i++) {
          var alpha = maskPixels[i] / 255;
          pixels[i] = alpha * pixels[i] + (1 - alpha) * blurryPixels[i];
        }

        inputContext.putImageData(inputImageData, 0, 0);
      }
    }, {
      key: 'dirty',

      /**
       * Sets the dirty state of this operation
       * @param {Boolean} dirty
       * @comment Since blur operations do seperate caching of the
       *          blurred canvas, we need to invalidate the cache when the
       *          dirty state changes.
       */
      set: function (dirty) {
        _set(Object.getPrototypeOf(TiltShiftOperation.prototype), 'dirty', dirty, this);
        this._cachedBlurredCanvas = null;
      },

      /**
       * Returns the dirty state
       * @type {Boolean}
       */
      get: function () {
        return _get(Object.getPrototypeOf(TiltShiftOperation.prototype), 'dirty', this);
      }
    }]);

    return TiltShiftOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  TiltShiftOperation.prototype.identifier = 'tilt-shift';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  TiltShiftOperation.prototype.availableOptions = {
    start: { type: 'vector2', 'default': new _libMathVector22['default'](0, 0.5) },
    end: { type: 'vector2', 'default': new _libMathVector22['default'](1, 0.5) },
    blurRadius: { type: 'number', 'default': 30 },
    gradientRadius: { type: 'number', 'default': 50 }
  };

  exports['default'] = TiltShiftOperation;
  module.exports = exports['default'];

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ('value' in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _vendorStackBlur = __webpack_require__(74);

  var _vendorStackBlur2 = _interopRequireDefault(_vendorStackBlur);

  /**
   * An operation that can crop out a part of the image
   *
   * @class
   * @alias ImglyKit.Operations.RadialBlurOperation
   * @extends ImglyKit.Operation
   */

  var RadialBlurOperation = (function (_Operation) {
    function RadialBlurOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, RadialBlurOperation);

      _get(Object.getPrototypeOf(RadialBlurOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader used for this operation
       * @internal Based on evanw's glfx.js tilt shift shader:
       *           https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js
       */
      this._fragmentShader = '\n      precision mediump float;\n      uniform sampler2D u_image;\n      uniform float blurRadius;\n      uniform float gradientRadius;\n      uniform vec2 position;\n      uniform vec2 delta;\n      uniform vec2 texSize;\n      varying vec2 v_texCoord;\n\n      float random(vec3 scale, float seed) {\n        return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n      }\n\n      void main() {\n          vec4 color = vec4(0.0);\n          float total = 0.0;\n\n          float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n          float radius = smoothstep(0.0, 1.0, abs(distance(v_texCoord * texSize, position)) / (gradientRadius * 2.0)) * blurRadius;\n          for (float t = -30.0; t <= 30.0; t++) {\n              float percent = (t + offset - 0.5) / 30.0;\n              float weight = 1.0 - abs(percent);\n              vec4 sample = texture2D(u_image, v_texCoord + delta * percent * radius / texSize);\n\n              sample.rgb *= sample.a;\n\n              color += sample * weight;\n              total += weight;\n          }\n\n          gl_FragColor = color / total;\n          gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n      }\n    ';

      this._cachedBlurredCanvas = null;
      this._lastBlurRadius = this._options.blurRadius;
      this._lastGradientRadius = this._options.gradientRadius;
    }

    _inherits(RadialBlurOperation, _Operation);

    _createClass(RadialBlurOperation, [{
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var canvas = renderer.getCanvas();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var position = this._options.position.clone();
        position.y = 1 - position.y;

        if (this._options.numberFormat === 'relative') {
          position.multiply(canvasSize);
        }

        var uniforms = {
          blurRadius: { type: 'f', value: this._options.blurRadius },
          gradientRadius: { type: 'f', value: this._options.gradientRadius },
          position: { type: '2f', value: [position.x, position.y] },
          texSize: { type: '2f', value: [canvas.width, canvas.height] },
          delta: { type: '2f', value: [1, 1] }
        };

        // Setup program
        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], { uniforms: uniforms });

        // Update delta for second pass
        uniforms.delta.value = [-1, 1];

        renderer.runProgram(this._glslPrograms[renderer.id], { uniforms: uniforms });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();

        var blurRadiusChanged = this._options.blurRadius !== this._lastBlurRadius;
        var blurryCanvas = undefined;
        if (blurRadiusChanged || this._cachedBlurredCanvas === null) {
          // Blur and cache canvas
          blurryCanvas = this._blurCanvas(renderer);
          this._cachedBlurredCanvas = blurryCanvas;
          this._lastBlurRadius = this._options.blurRadius;
          this._lastGradientRadius = this._options.gradientRadius;
        } else {
          // Use cached canvas
          blurryCanvas = this._cachedBlurredCanvas;
        }

        var maskCanvas = this._createMask(renderer);

        this._applyMask(canvas, blurryCanvas, maskCanvas);
      }
    }, {
      key: '_blurCanvas',

      /**
       * Creates a blurred copy of the canvas
       * @param  {CanvasRenderer} renderer
       * @return {Canvas}
       * @private
       */
      value: function _blurCanvas(renderer) {
        var newCanvas = renderer.cloneCanvas();
        var blurryContext = newCanvas.getContext('2d');
        var blurryImageData = blurryContext.getImageData(0, 0, newCanvas.width, newCanvas.height);
        _vendorStackBlur2['default'].stackBlurCanvasRGBA(blurryImageData, 0, 0, newCanvas.width, newCanvas.height, this._options.blurRadius);
        blurryContext.putImageData(blurryImageData, 0, 0);

        return newCanvas;
      }
    }, {
      key: '_createMask',

      /**
       * Creates the mask canvas
       * @param  {CanvasRenderer} renderer
       * @return {Canvas}
       * @private
       */
      value: function _createMask(renderer) {
        var canvas = renderer.getCanvas();

        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var gradientRadius = this._options.gradientRadius;

        var maskCanvas = renderer.createCanvas(canvas.width, canvas.height);
        var maskContext = maskCanvas.getContext('2d');

        var position = this._options.position.clone();

        if (this._options.numberFormat === 'relative') {
          position.multiply(canvasSize);
        }

        // Build gradient
        var gradient = maskContext.createRadialGradient(position.x, position.y, 0, position.x, position.y, gradientRadius);
        gradient.addColorStop(0, '#FFFFFF');
        gradient.addColorStop(1, '#000000');

        // Draw gradient
        maskContext.fillStyle = gradient;
        maskContext.fillRect(0, 0, canvas.width, canvas.height);

        return maskCanvas;
      }
    }, {
      key: '_applyMask',

      /**
       * Applies the blur and mask to the input canvas
       * @param  {Canvas} inputCanvas
       * @param  {Canvas} blurryCanvas
       * @param  {Canvas} maskCanvas
       * @private
       */
      value: function _applyMask(inputCanvas, blurryCanvas, maskCanvas) {
        var inputContext = inputCanvas.getContext('2d');
        var blurryContext = blurryCanvas.getContext('2d');
        var maskContext = maskCanvas.getContext('2d');

        var inputImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
        var pixels = inputImageData.data;
        var blurryPixels = blurryContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
        var maskPixels = maskContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;

        var index, alpha;
        for (var y = 0; y < inputCanvas.height; y++) {
          for (var x = 0; x < inputCanvas.width; x++) {
            index = (y * inputCanvas.width + x) * 4;
            alpha = maskPixels[index] / 255;

            pixels[index] = alpha * pixels[index] + (1 - alpha) * blurryPixels[index];
            pixels[index + 1] = alpha * pixels[index + 1] + (1 - alpha) * blurryPixels[index + 1];
            pixels[index + 2] = alpha * pixels[index + 2] + (1 - alpha) * blurryPixels[index + 2];
          }
        }

        inputContext.putImageData(inputImageData, 0, 0);
      }
    }, {
      key: 'dirty',

      /**
       * Sets the dirty state of this operation
       * @param {Boolean} dirty
       * @comment Since blur operations do seperate caching of the
       *          blurred canvas, we need to invalidate the cache when the
       *          dirty state changes.
       */
      set: function (dirty) {
        _set(Object.getPrototypeOf(RadialBlurOperation.prototype), 'dirty', dirty, this);
        this._cachedBlurredCanvas = null;
      },

      /**
       * Returns the dirty state
       * @type {Boolean}
       */
      get: function () {
        return _get(Object.getPrototypeOf(RadialBlurOperation.prototype), 'dirty', this);
      }
    }]);

    return RadialBlurOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  RadialBlurOperation.prototype.identifier = 'radial-blur';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  RadialBlurOperation.prototype.availableOptions = {
    position: { type: 'vector2', 'default': new _libMathVector22['default'](0.5, 0.5) },
    gradientRadius: { type: 'number', 'default': 50 },
    blurRadius: { type: 'number', 'default': 20 }
  };

  exports['default'] = RadialBlurOperation;
  module.exports = exports['default'];

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  /**
   * An operation that can draw text on the canvas
   *
   * @class
   * @alias ImglyKit.Operations.TextOperation
   * @extends ImglyKit.Operation
   */

  var TextOperation = (function (_Operation) {
    function TextOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, TextOperation);

      _get(Object.getPrototypeOf(TextOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The texture index used for the text
       * @type {Number}
       * @private
       */
      this._textureIndex = 1;

      /**
       * The fragment shader used for this operation
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform sampler2D u_textImage;\n      uniform vec2 u_position;\n      uniform vec2 u_size;\n\n      void main() {\n        vec4 color0 = texture2D(u_image, v_texCoord);\n        vec2 relative = (v_texCoord - u_position) / u_size;\n\n        if (relative.x >= 0.0 && relative.x <= 1.0 &&\n          relative.y >= 0.0 && relative.y <= 1.0) {\n\n            vec4 color1 = texture2D(u_textImage, relative);\n\n            // GL_SOURCE_ALPHA, GL_ONE_MINUS_SOURCE_ALPHA\n            gl_FragColor = color1 + color0 * (1.0 - color1.a);\n\n        } else {\n\n          gl_FragColor = color0;\n\n        }\n      }\n    ';
    }

    _inherits(TextOperation, _Operation);

    _createClass(TextOperation, [{
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var textCanvas = this._renderTextCanvas(renderer);

        var canvas = renderer.getCanvas();
        var gl = renderer.getContext();

        var position = this._options.position.clone();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var size = new _libMathVector22['default'](textCanvas.width, textCanvas.height).divide(canvasSize);

        if (this._options.numberFormat === 'absolute') {
          position.divide(canvasSize);
        }

        position.y = 1 - position.y; // Invert y
        position.y -= size.y; // Fix y

        // Adjust vertical alignment
        if (this._options.verticalAlignment === 'center') {
          position.y += size.y / 2;
        } else if (this._options.verticalAlignment === 'bottom') {
          position.y += size.y;
        }

        // Adjust horizontal alignment
        if (this._options.alignment === 'center') {
          position.x -= size.x / 2;
        } else if (this._options.alignment === 'right') {
          position.x -= size.x;
        }

        // Upload the texture
        gl.activeTexture(gl.TEXTURE0 + this._textureIndex);
        this._texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this._texture);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // Set premultiplied alpha
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textCanvas);
        gl.activeTexture(gl.TEXTURE0);

        // Execute the shader
        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_textImage: { type: 'i', value: this._textureIndex },
            u_position: { type: '2f', value: [position.x, position.y] },
            u_size: { type: '2f', value: [size.x, size.y] }
          }
        });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       */
      value: function _renderCanvas(renderer) {
        var textCanvas = this._renderTextCanvas(renderer);

        var canvas = renderer.getCanvas();
        var context = renderer.getContext();

        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var scaledPosition = this._options.position.clone();

        if (this._options.numberFormat === 'relative') {
          scaledPosition.multiply(canvasSize);
        }

        // Adjust vertical alignment
        if (this._options.verticalAlignment === 'center') {
          scaledPosition.y -= textCanvas.height / 2;
        } else if (this._options.verticalAlignment === 'bottom') {
          scaledPosition.y -= textCanvas.height;
        }

        // Adjust horizontal alignment
        if (this._options.alignment === 'center') {
          scaledPosition.x -= textCanvas.width / 2;
        } else if (this._options.alignment === 'right') {
          scaledPosition.x -= textCanvas.width;
        }

        context.drawImage(textCanvas, scaledPosition.x, scaledPosition.y);
      }
    }, {
      key: '_renderTextCanvas',

      /**
       * Renders the text canvas that will be used as a texture in WebGL
       * and as an image in canvas
       * @return {Canvas}
       * @private
       */
      value: function _renderTextCanvas(renderer) {
        var line = undefined,
            lineNum = undefined;
        var canvas = renderer.createCanvas();
        var context = canvas.getContext('2d');

        var outputCanvas = renderer.getCanvas();
        var canvasSize = new _libMathVector22['default'](outputCanvas.width, outputCanvas.height);

        var maxWidth = this._options.maxWidth;
        var actualFontSize = this._options.fontSize * canvasSize.y;
        var actualLineHeight = this._options.lineHeight * actualFontSize;

        if (this._options.numberFormat === 'relative') {
          maxWidth *= renderer.getCanvas().width;
        }

        // Apply text options
        this._applyTextOptions(renderer, context);

        var boundingBox = new _libMathVector22['default']();

        var lines = this._options.text.split('\n');
        if (typeof maxWidth !== 'undefined') {
          // Calculate the bounding box
          boundingBox.x = maxWidth;
          lines = this._buildOutputLines(context, maxWidth);
        } else {
          for (lineNum = 0; lineNum < lines.length; lineNum++) {
            line = lines[lineNum];
            boundingBox.x = Math.max(boundingBox.x, context.measureText(line).width);
          }
        }

        // Calculate boundingbox height
        boundingBox.y = actualLineHeight * lines.length;

        // Resize the canvas
        canvas.width = boundingBox.x;
        canvas.height = boundingBox.y;

        // Get the context again
        context = canvas.getContext('2d');

        // Render background color
        context.fillStyle = this._options.backgroundColor.toRGBA();
        context.fillRect(0, 0, canvas.width, canvas.height);

        // Apply text options
        this._applyTextOptions(renderer, context);

        // Draw lines
        for (lineNum = 0; lineNum < lines.length; lineNum++) {
          line = lines[lineNum];
          this._drawText(context, line, actualLineHeight * lineNum);
        }

        return canvas;
      }
    }, {
      key: '_applyTextOptions',

      /**
       * Applies the text options on the given context
       * @param  {Renderer} renderer
       * @param  {RenderingContext2D} context
       * @private
       */
      value: function _applyTextOptions(renderer, context) {
        var canvas = renderer.getCanvas();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var actualFontSize = this._options.fontSize * canvasSize.y;

        context.font = this._options.fontWeight + ' ' + actualFontSize + 'px ' + this._options.fontFamily;
        context.textBaseline = 'top';
        context.textAlign = this._options.alignment;
        context.fillStyle = this._options.color.toRGBA();
      }
    }, {
      key: '_buildOutputLines',

      /**
       * Iterate over all lines and split them into multiple lines, depending
       * on the width they need
       * @param {RenderingContext2d} context
       * @param {Number} maxWidth
       * @return {Array.<string>}
       * @private
       */
      value: function _buildOutputLines(context, maxWidth) {
        var inputLines = this._options.text.split('\n');
        var outputLines = [];
        var currentChars = [];

        for (var lineNum = 0; lineNum < inputLines.length; lineNum++) {
          var inputLine = inputLines[lineNum];
          var lineChars = inputLine.split('');

          if (lineChars.length === 0) {
            outputLines.push('');
          }

          for (var charNum = 0; charNum < lineChars.length; charNum++) {
            var currentChar = lineChars[charNum];
            currentChars.push(currentChar);
            var currentLine = currentChars.join('');
            var lineWidth = context.measureText(currentLine).width;

            if (lineWidth > maxWidth && currentChars.length === 1) {
              outputLines.push(currentChars[0]);
              currentChars = [];
            } else if (lineWidth > maxWidth) {
              // Remove the last word
              var lastWord = currentChars.pop();

              // Add the line, clear the words
              outputLines.push(currentChars.join(''));
              currentChars = [];

              // Make sure to use the last word for the next line
              currentChars = [lastWord];
            } else if (charNum === lineChars.length - 1) {
              // Add the line, clear the words
              outputLines.push(currentChars.join(''));
              currentChars = [];
            }
          }

          // Line ended, but there's words left
          if (currentChars.length) {
            outputLines.push(currentChars.join(''));
            currentChars = [];
          }
        }

        return outputLines;
      }
    }, {
      key: '_drawText',

      /**
       * Draws the given line onto the given context at the given Y position
       * @param  {RenderingContext2D} context
       * @param  {String} text
       * @param  {Number} y
       * @private
       */
      value: function _drawText(context, text, y) {
        var canvas = context.canvas;
        if (this._options.alignment === 'center') {
          context.fillText(text, canvas.width / 2, y);
        } else if (this._options.alignment === 'left') {
          context.fillText(text, 0, y);
        } else if (this._options.alignment === 'right') {
          context.fillText(text, canvas.width, y);
        }
      }
    }]);

    return TextOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  TextOperation.prototype.identifier = 'text';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  TextOperation.prototype.availableOptions = {
    fontSize: { type: 'number', 'default': 0.1 },
    lineHeight: { type: 'number', 'default': 1.1 },
    fontFamily: { type: 'string', 'default': 'Times New Roman' },
    fontWeight: { type: 'string', 'default': 'normal' },
    alignment: { type: 'string', 'default': 'left', available: ['left', 'center', 'right'] },
    verticalAlignment: { type: 'string', 'default': 'top', available: ['top', 'center', 'bottom'] },
    color: { type: 'color', 'default': new _libColor2['default'](1, 1, 1, 1) },
    backgroundColor: { type: 'color', 'default': new _libColor2['default'](0, 0, 0, 0) },
    position: { type: 'vector2', 'default': new _libMathVector22['default'](0, 0) },
    text: { type: 'string', required: true },
    maxWidth: { type: 'number', 'default': 1 }
  };

  exports['default'] = TextOperation;
  module.exports = exports['default'];

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

  /* global Image */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  /**
   * An operation that can draw text on the canvas
   *
   * @class
   * @alias ImglyKit.Operations.StickersOperation
   * @extends ImglyKit.Operation
   */

  var StickersOperation = (function (_Operation) {
    function StickersOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, StickersOperation);

      _get(Object.getPrototypeOf(StickersOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The texture index used for the sticker
       * @type {Number}
       * @private
       */
      this._textureIndex = 1;

      /**
       * The fragment shader used for this operation
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform sampler2D u_stickerImage;\n      uniform vec2 u_position;\n      uniform vec2 u_size;\n\n      void main() {\n        vec4 color0 = texture2D(u_image, v_texCoord);\n        vec2 relative = (v_texCoord - u_position) / u_size;\n\n        if (relative.x >= 0.0 && relative.x <= 1.0 &&\n          relative.y >= 0.0 && relative.y <= 1.0) {\n\n            vec4 color1 = texture2D(u_stickerImage, relative);\n\n            // GL_SOURCE_ALPHA, GL_ONE_MINUS_SOURCE_ALPHA\n            gl_FragColor = color1 + color0 * (1.0 - color1.a);\n\n        } else {\n\n          gl_FragColor = color0;\n\n        }\n      }\n    ';

      this._loadedStickers = {};
    }

    _inherits(StickersOperation, _Operation);

    _createClass(StickersOperation, [{
      key: 'render',

      /**
       * Applies this operation
       * @param  {Renderer} renderer
       * @return {Promise}
       * @abstract
       */
      value: function render(renderer) {
        var self = this;
        return this._loadSticker().then(function (image) {
          if (renderer.identifier === 'webgl') {
            /* istanbul ignore next */
            return self._renderWebGL(renderer, image);
          } else {
            return self._renderCanvas(renderer, image);
          }
        });
      }
    }, {
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       * @param  {Image} image
       * @private
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer, image) {
        var canvas = renderer.getCanvas();
        var gl = renderer.getContext();

        var position = this._options.position.clone();
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        if (this._options.numberFormat === 'absolute') {
          position.divide(canvasSize);
        }

        var size = new _libMathVector22['default'](image.width, image.height);
        if (typeof this._options.size !== 'undefined') {
          size.copy(this._options.size);

          if (this._options.numberFormat === 'relative') {
            size.multiply(canvasSize);
          }

          // Calculate image ratio, scale by width
          var ratio = image.height / image.width;
          size.y = size.x * ratio;
        }
        size.divide(canvasSize);

        position.y = 1 - position.y; // Invert y
        position.y -= size.y; // Fix y

        // Upload the texture
        gl.activeTexture(gl.TEXTURE0 + this._textureIndex);
        this._texture = gl.createTexture();

        gl.bindTexture(gl.TEXTURE_2D, this._texture);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        // Set premultiplied alpha
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        gl.activeTexture(gl.TEXTURE0);

        // Execute the shader
        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_stickerImage: { type: 'i', value: this._textureIndex },
            u_position: { type: '2f', value: [position.x, position.y] },
            u_size: { type: '2f', value: [size.x, size.y] }
          }
        });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       * @param  {Image} image
       * @private
       */
      value: function _renderCanvas(renderer, image) {
        var canvas = renderer.getCanvas();
        var context = renderer.getContext();

        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var scaledPosition = this._options.position.clone();

        if (this._options.numberFormat === 'relative') {
          scaledPosition.multiply(canvasSize);
        }

        var size = new _libMathVector22['default'](image.width, image.height);
        if (typeof this._options.size !== 'undefined') {
          size.copy(this._options.size);

          if (this._options.numberFormat === 'relative') {
            size.multiply(canvasSize);
          }
        }

        context.drawImage(image, 0, 0, image.width, image.height, scaledPosition.x, scaledPosition.y, size.x, size.y);
      }
    }, {
      key: '_loadSticker',

      /**
       * Loads the sticker
       * @return {Promise}
       * @private
       */
      value: function _loadSticker() {
        var isBrowser = typeof window !== 'undefined';
        if (isBrowser) {
          return this._loadImageBrowser(this._options.sticker);
        } else {
          return this._loadImageNode(this._options.sticker);
        }
      }
    }, {
      key: '_loadImageBrowser',

      /**
       * Loads the given image using the browser's `Image` class
       * @param  {String} fileName
       * @return {Promise}
       * @private
       */
      value: function _loadImageBrowser(fileName) {
        var self = this;
        return new _vendorPromise2['default'](function (resolve, reject) {
          // Return preloaded sticker if available
          if (self._loadedStickers[fileName]) {
            return resolve(self._loadedStickers[fileName]);
          }

          var image = new Image();

          image.addEventListener('load', function () {
            self._loadedStickers[fileName] = image;
            resolve(image);
          });
          image.addEventListener('error', function () {
            reject(new Error('Could not load sticker: ' + fileName));
          });

          image.src = self._kit.getAssetPath(fileName);
        });
      }
    }, {
      key: '_loadImageNode',

      /**
       * Loads the given image using node.js' `fs` and node-canvas `Image`
       * @param  {String} fileName
       * @return {Promise}
       * @private
       */
      value: function _loadImageNode(fileName) {
        var Canvas = __webpack_require__(53);


        var self = this;
        var image = new Canvas.Image();
        var path = self._kit.getAssetPath(fileName);

        return new _vendorPromise2['default'](function (resolve, reject) {
          fs.readFile(path, function (err, buffer) {
            if (err) return reject(err);

            image.src = buffer;
            resolve(image);
          });
        });
      }
    }, {
      key: 'stickers',

      /**
       * The registered stickers
       * @type {Object.<String,String>}
       */
      get: function () {
        return this._stickers;
      }
    }]);

    return StickersOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  StickersOperation.prototype.identifier = 'stickers';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  StickersOperation.prototype.availableOptions = {
    sticker: { type: 'string' },
    position: { type: 'vector2', 'default': new _libMathVector22['default'](0, 0) },
    size: { type: 'vector2', 'default': new _libMathVector22['default'](0, 0) }
  };

  exports['default'] = StickersOperation;
  module.exports = exports['default'];

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _operation = __webpack_require__(9);

  var _operation2 = _interopRequireDefault(_operation);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  /**
   * An operation that can frames on the canvas
   *
   * @class
   * @alias ImglyKit.Operations.FramesOperation
   * @extends ImglyKit.Operation
   */

  var FramesOperation = (function (_Operation) {
    function FramesOperation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, FramesOperation);

      _get(Object.getPrototypeOf(FramesOperation.prototype), 'constructor', this).apply(this, args);

      /**
       * The texture index used for the frame
       * @type {Number}
       * @private
       */
      this._textureIndex = 1;

      /**
       * The fragment shader used for this operation
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform sampler2D u_frameImage;\n      uniform vec4 u_color;\n      uniform vec2 u_thickness;\n\n      void main() {\n        vec4 fragColor = texture2D(u_image, v_texCoord);\n        if (v_texCoord.x < u_thickness.x || v_texCoord.x > 1.0 - u_thickness.x ||\n          v_texCoord.y < u_thickness.y || v_texCoord.y > 1.0 - u_thickness.y) {\n            fragColor = mix(fragColor, u_color, u_color.a);\n          }\n\n        gl_FragColor = fragColor;\n      }\n    ';
    }

    _inherits(FramesOperation, _Operation);

    _createClass(FramesOperation, [{
      key: '_renderWebGL',

      /**
       * Crops this image using WebGL
       * @param  {WebGLRenderer} renderer
       * @private
       */
      /* istanbul ignore next */
      value: function _renderWebGL(renderer) {
        var canvas = renderer.getCanvas();

        var color = this._options.color;
        var thickness = this._options.thickness * canvas.height;
        var thicknessVec2 = [thickness / canvas.width, thickness / canvas.height];

        var uniforms = {
          u_color: { type: '4f', value: color.toGLColor() },
          u_thickness: { type: '2f', value: thicknessVec2 }
        };

        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], { uniforms: uniforms });
      }
    }, {
      key: '_renderCanvas',

      /**
       * Crops the image using Canvas2D
       * @param  {CanvasRenderer} renderer
       * @private
       */
      value: function _renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var context = renderer.getContext();

        var color = this._options.color;
        var thickness = this._options.thickness * canvas.height;

        context.save();
        context.beginPath();
        context.lineWidth = thickness * 2;
        context.strokeStyle = color.toRGBA();
        context.rect(0, 0, canvas.width, canvas.height);
        context.stroke();
        context.restore();
      }
    }]);

    return FramesOperation;
  })(_operation2['default']);

  /**
   * A unique string that identifies this operation. Can be used to select
   * operations.
   * @type {String}
   */
  FramesOperation.prototype.identifier = 'frames';

  /**
   * Specifies the available options for this operation
   * @type {Object}
   */
  FramesOperation.prototype.availableOptions = {
    color: { type: 'color', 'default': new _libColor2['default'](0, 0, 0, 1) },
    thickness: { type: 'number', 'default': 0.02 }
  };

  exports['default'] = FramesOperation;
  module.exports = exports['default'];

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * A15 Filter
   * @class
   * @alias ImglyKit.Filters.A15Filter
   * @extends {ImglyKit.Filter}
   */

  var A15Filter = (function (_Filter) {
    function A15Filter() {
      _classCallCheck(this, A15Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(A15Filter, _Filter);

    _createClass(A15Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 0.63
        }));

        stack.add(new _filter2['default'].Primitives.Brightness({
          brightness: 0.12
        }));

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 38], [94, 94], [148, 142], [175, 187], [255, 255]],
            green: [[0, 0], [77, 53], [171, 190], [255, 255]],
            blue: [[0, 10], [48, 85], [174, 228], [255, 255]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return '15';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'a15';
      }
    }]);

    return A15Filter;
  })(_filter2['default']);

  exports['default'] = A15Filter;
  module.exports = exports['default'];

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Breeze Filter
   * @class
   * @alias ImglyKit.Filters.BreezeFilter
   * @extends {ImglyKit.Filter}
   */

  var BreezeFilter = (function (_Filter) {
    function BreezeFilter() {
      _classCallCheck(this, BreezeFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(BreezeFilter, _Filter);

    _createClass(BreezeFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Desaturation
        stack.add(new _filter2['default'].Primitives.Desaturation({
          desaturation: 0.5
        }));

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [170, 170], [212, 219], [234, 242], [255, 255]],
            green: [[0, 0], [170, 168], [234, 231], [255, 255]],
            blue: [[0, 0], [170, 170], [212, 208], [255, 255]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Breeze';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'breeze';
      }
    }]);

    return BreezeFilter;
  })(_filter2['default']);

  exports['default'] = BreezeFilter;
  module.exports = exports['default'];

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * BW Filter
   * @class
   * @alias ImglyKit.Filters.BWFilter
   * @extends {ImglyKit.Filter}
   */

  var BWFilter = (function (_Filter) {
    function BWFilter() {
      _classCallCheck(this, BWFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(BWFilter, _Filter);

    _createClass(BWFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Grayscale());

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'B&W';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'bw';
      }
    }]);

    return BWFilter;
  })(_filter2['default']);

  exports['default'] = BWFilter;
  module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * BWHard Filter
   * @class
   * @alias ImglyKit.Filters.BWHardFilter
   * @extends {ImglyKit.Filter}
   */

  var BWHardFilter = (function (_Filter) {
    function BWHardFilter() {
      _classCallCheck(this, BWHardFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(BWHardFilter, _Filter);

    _createClass(BWHardFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Grayscale());
        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 1.5
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return '1920';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'bwhard';
      }
    }]);

    return BWHardFilter;
  })(_filter2['default']);

  exports['default'] = BWHardFilter;
  module.exports = exports['default'];

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Celsius Filter
   * @class
   * @alias ImglyKit.Filters.CelsiusFilter
   * @extends {ImglyKit.Filter}
   */

  var CelsiusFilter = (function (_Filter) {
    function CelsiusFilter() {
      _classCallCheck(this, CelsiusFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(CelsiusFilter, _Filter);

    _createClass(CelsiusFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 69], [55, 110], [202, 230], [255, 255]],
            green: [[0, 44], [89, 93], [185, 141], [255, 189]],
            blue: [[0, 76], [39, 82], [218, 138], [255, 171]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Celsius';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'celsius';
      }
    }]);

    return CelsiusFilter;
  })(_filter2['default']);

  exports['default'] = CelsiusFilter;
  module.exports = exports['default'];

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Chest Filter
   * @class
   * @alias ImglyKit.Filters.ChestFilter
   * @extends {ImglyKit.Filter}
   */

  var ChestFilter = (function (_Filter) {
    function ChestFilter() {
      _classCallCheck(this, ChestFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(ChestFilter, _Filter);

    _createClass(ChestFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [44, 44], [124, 143], [221, 204], [255, 255]],
            green: [[0, 0], [130, 127], [213, 199], [255, 255]],
            blue: [[0, 0], [51, 52], [219, 204], [255, 255]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Chest';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'chest';
      }
    }]);

    return ChestFilter;
  })(_filter2['default']);

  exports['default'] = ChestFilter;
  module.exports = exports['default'];

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Fixie Filter
   * @class
   * @alias ImglyKit.Filters.FixieFilter
   * @extends {ImglyKit.Filter}
   */

  var FixieFilter = (function (_Filter) {
    function FixieFilter() {
      _classCallCheck(this, FixieFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(FixieFilter, _Filter);

    _createClass(FixieFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [44, 28], [63, 48], [128, 132], [235, 248], [255, 255]],
            green: [[0, 0], [20, 10], [60, 45], [190, 209], [211, 231], [255, 255]],
            blue: [[0, 31], [41, 62], [150, 142], [234, 212], [255, 224]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Fixie';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'fixie';
      }
    }]);

    return FixieFilter;
  })(_filter2['default']);

  exports['default'] = FixieFilter;
  module.exports = exports['default'];

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Food Filter
   * @class
   * @alias ImglyKit.Filters.FoodFilter
   * @extends {ImglyKit.Filter}
   */

  var FoodFilter = (function (_Filter) {
    function FoodFilter() {
      _classCallCheck(this, FoodFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(FoodFilter, _Filter);

    _createClass(FoodFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 1.35
        }));

        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 1.1
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Food';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'food';
      }
    }]);

    return FoodFilter;
  })(_filter2['default']);

  exports['default'] = FoodFilter;
  module.exports = exports['default'];

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Fridge Filter
   * @class
   * @alias ImglyKit.Filters.FridgeFilter
   * @extends {ImglyKit.Filter}
   */

  var FridgeFilter = (function (_Filter) {
    function FridgeFilter() {
      _classCallCheck(this, FridgeFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(FridgeFilter, _Filter);

    _createClass(FridgeFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 9], [21, 11], [45, 24], [255, 220]],
            green: [[0, 12], [21, 21], [42, 42], [150, 150], [170, 173], [255, 210]],
            blue: [[0, 28], [43, 72], [128, 185], [255, 220]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Fridge';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'fridge';
      }
    }]);

    return FridgeFilter;
  })(_filter2['default']);

  exports['default'] = FridgeFilter;
  module.exports = exports['default'];

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Front Filter
   * @class
   * @alias ImglyKit.Filters.FrontFilter
   * @extends {ImglyKit.Filter}
   */

  var FrontFilter = (function (_Filter) {
    function FrontFilter() {
      _classCallCheck(this, FrontFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(FrontFilter, _Filter);

    _createClass(FrontFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 65], [28, 67], [67, 113], [125, 183], [187, 217], [255, 229]],
            green: [[0, 52], [42, 59], [104, 134], [169, 209], [255, 240]],
            blue: [[0, 52], [65, 68], [93, 104], [150, 153], [255, 198]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Front';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'front';
      }
    }]);

    return FrontFilter;
  })(_filter2['default']);

  exports['default'] = FrontFilter;
  module.exports = exports['default'];

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Glam Filter
   * @class
   * @alias ImglyKit.Filters.GlamFilter
   * @extends {ImglyKit.Filter}
   */

  var GlamFilter = (function (_Filter) {
    function GlamFilter() {
      _classCallCheck(this, GlamFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(GlamFilter, _Filter);

    _createClass(GlamFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 1.1
        }));

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [94, 74], [181, 205], [255, 255]],
            green: [[0, 0], [127, 127], [255, 255]],
            blue: [[0, 0], [102, 73], [227, 213], [255, 255]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Glam';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'glam';
      }
    }]);

    return GlamFilter;
  })(_filter2['default']);

  exports['default'] = GlamFilter;
  module.exports = exports['default'];

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Gobblin Filter
   * @class
   * @alias ImglyKit.Filters.GobblinFilter
   * @extends {ImglyKit.Filter}
   */

  var GobblinFilter = (function (_Filter) {
    function GobblinFilter() {
      _classCallCheck(this, GobblinFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(GobblinFilter, _Filter);

    _createClass(GobblinFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.Gobblin());

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Gobblin';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'gobblin';
      }
    }]);

    return GobblinFilter;
  })(_filter2['default']);

  exports['default'] = GobblinFilter;
  module.exports = exports['default'];

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * K1 Filter
   * @class
   * @alias ImglyKit.Filters.K1Filter
   * @extends {ImglyKit.Filter}
   */

  var K1Filter = (function (_Filter) {
    function K1Filter() {
      _classCallCheck(this, K1Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(K1Filter, _Filter);

    _createClass(K1Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [53, 32], [91, 80], [176, 205], [255, 255]]
        }));

        // Saturation
        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 0.9
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'K1';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'k1';
      }
    }]);

    return K1Filter;
  })(_filter2['default']);

  exports['default'] = K1Filter;
  module.exports = exports['default'];

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  /**
   * K2 Filter
   * @class
   * @alias ImglyKit.Filters.K2Filter
   * @extends {ImglyKit.Filter}
   */

  var K2Filter = (function (_Filter) {
    function K2Filter() {
      _classCallCheck(this, K2Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(K2Filter, _Filter);

    _createClass(K2Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [54, 33], [77, 82], [94, 103], [122, 126], [177, 193], [229, 232], [255, 255]]
        }));

        // Soft color overlay
        stack.add(new _filter2['default'].Primitives.SoftColorOverlay({
          color: new _libColor2['default'](40 / 255, 40 / 255, 40 / 255)
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'K2';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'k2';
      }
    }]);

    return K2Filter;
  })(_filter2['default']);

  exports['default'] = K2Filter;
  module.exports = exports['default'];

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * K6 Filter
   * @class
   * @alias ImglyKit.Filters.K6Filter
   * @extends {ImglyKit.Filter}
   */

  var K6Filter = (function (_Filter) {
    function K6Filter() {
      _classCallCheck(this, K6Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(K6Filter, _Filter);

    _createClass(K6Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Saturation
        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 0.5
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'K6';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'k6';
      }
    }]);

    return K6Filter;
  })(_filter2['default']);

  exports['default'] = K6Filter;
  module.exports = exports['default'];

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * KDynamic Filter
   * @class
   * @alias ImglyKit.Filters.KDynamicFilter
   * @extends {ImglyKit.Filter}
   */

  var KDynamicFilter = (function (_Filter) {
    function KDynamicFilter() {
      _classCallCheck(this, KDynamicFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(KDynamicFilter, _Filter);

    _createClass(KDynamicFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [17, 27], [46, 69], [90, 112], [156, 200], [203, 243], [255, 255]]
        }));

        // Saturation
        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 0.7
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'KDynamic';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'kdynamic';
      }
    }]);

    return KDynamicFilter;
  })(_filter2['default']);

  exports['default'] = KDynamicFilter;
  module.exports = exports['default'];

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Lenin Filter
   * @class
   * @alias ImglyKit.Filters.LeninFilter
   * @extends {ImglyKit.Filter}
   */

  var LeninFilter = (function (_Filter) {
    function LeninFilter() {
      _classCallCheck(this, LeninFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(LeninFilter, _Filter);

    _createClass(LeninFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Desaturation
        stack.add(new _filter2['default'].Primitives.Desaturation({
          desaturation: 0.4
        }));

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 20], [40, 20], [106, 111], [129, 153], [190, 223], [255, 255]],
            green: [[0, 20], [40, 20], [62, 41], [106, 108], [132, 159], [203, 237], [255, 255]],
            blue: [[0, 40], [40, 40], [73, 60], [133, 160], [191, 297], [203, 237], [237, 239], [255, 255]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Lenin';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'lenin';
      }
    }]);

    return LeninFilter;
  })(_filter2['default']);

  exports['default'] = LeninFilter;
  module.exports = exports['default'];

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Lomo Filter
   * @class
   * @alias ImglyKit.Filters.LomoFilter
   * @extends {ImglyKit.Filter}
   */

  var LomoFilter = (function (_Filter) {
    function LomoFilter() {
      _classCallCheck(this, LomoFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(LomoFilter, _Filter);

    _createClass(LomoFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [87, 20], [131, 156], [183, 205], [255, 200]]
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Lomo';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'lomo';
      }
    }]);

    return LomoFilter;
  })(_filter2['default']);

  exports['default'] = LomoFilter;
  module.exports = exports['default'];

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Mellow Filter
   * @class
   * @alias ImglyKit.Filters.MellowFilter
   * @extends {ImglyKit.Filter}
   */

  var MellowFilter = (function (_Filter) {
    function MellowFilter() {
      _classCallCheck(this, MellowFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(MellowFilter, _Filter);

    _createClass(MellowFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [41, 84], [87, 134], [255, 255]],
            green: [[0, 0], [255, 216]],
            blue: [[0, 0], [255, 131]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Mellow';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'mellow';
      }
    }]);

    return MellowFilter;
  })(_filter2['default']);

  exports['default'] = MellowFilter;
  module.exports = exports['default'];

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Morning Filter
   * @class
   * @alias ImglyKit.Filters.MorningFilter
   * @extends {ImglyKit.Filter}
   */

  var MorningFilter = (function (_Filter) {
    function MorningFilter() {
      _classCallCheck(this, MorningFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(MorningFilter, _Filter);

    _createClass(MorningFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 40], [255, 230]],
            green: [[0, 10], [255, 225]],
            blue: [[0, 20], [255, 181]]
          }
        }));

        stack.add(new _filter2['default'].Primitives.Glow());

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Morning';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'morning';
      }
    }]);

    return MorningFilter;
  })(_filter2['default']);

  exports['default'] = MorningFilter;
  module.exports = exports['default'];

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Orchid Filter
   * @class
   * @alias ImglyKit.Filters.OrchidFilter
   * @extends {ImglyKit.Filter}
   */

  var OrchidFilter = (function (_Filter) {
    function OrchidFilter() {
      _classCallCheck(this, OrchidFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(OrchidFilter, _Filter);

    _createClass(OrchidFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [115, 130], [195, 215], [255, 255]],
            green: [[0, 0], [148, 153], [172, 215], [255, 255]],
            blue: [[0, 46], [58, 75], [178, 205], [255, 255]]
          }
        }));

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [117, 151], [189, 217], [255, 255]]
        }));

        // Desaturation
        stack.add(new _filter2['default'].Primitives.Desaturation({
          desaturation: 0.65
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Orchid';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'orchid';
      }
    }]);

    return OrchidFilter;
  })(_filter2['default']);

  exports['default'] = OrchidFilter;
  module.exports = exports['default'];

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Pola Filter
   * @class
   * @alias ImglyKit.Filters.PolaFilter
   * @extends {ImglyKit.Filter}
   */

  var PolaFilter = (function (_Filter) {
    function PolaFilter() {
      _classCallCheck(this, PolaFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(PolaFilter, _Filter);

    _createClass(PolaFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [94, 74], [181, 205], [255, 255]],
            green: [[0, 0], [34, 34], [99, 76], [176, 190], [255, 255]],
            blue: [[0, 0], [102, 73], [227, 213], [255, 255]]
          }
        }));

        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 0.8
        }));

        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 1.5
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Pola SX';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'pola';
      }
    }]);

    return PolaFilter;
  })(_filter2['default']);

  exports['default'] = PolaFilter;
  module.exports = exports['default'];

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Pola669 Filter
   * @class
   * @alias ImglyKit.Filters.Pola669Filter
   * @extends {ImglyKit.Filter}
   */

  var Pola669Filter = (function (_Filter) {
    function Pola669Filter() {
      _classCallCheck(this, Pola669Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(Pola669Filter, _Filter);

    _createClass(Pola669Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [56, 18], [196, 209], [255, 255]],
            green: [[0, 38], [71, 84], [255, 255]],
            blue: [[0, 0], [131, 133], [204, 211], [255, 255]]
          }
        }));

        stack.add(new _filter2['default'].Primitives.Saturation({
          saturation: 0.8
        }));

        stack.add(new _filter2['default'].Primitives.Contrast({
          contrast: 1.5
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Pola 669';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'pola669';
      }
    }]);

    return Pola669Filter;
  })(_filter2['default']);

  exports['default'] = Pola669Filter;
  module.exports = exports['default'];

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Quozi Filter
   * @class
   * @alias ImglyKit.Filters.QuoziFilter
   * @extends {ImglyKit.Filter}
   */

  var QuoziFilter = (function (_Filter) {
    function QuoziFilter() {
      _classCallCheck(this, QuoziFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(QuoziFilter, _Filter);

    _createClass(QuoziFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        // Desaturation
        stack.add(new _filter2['default'].Primitives.Desaturation({
          desaturation: 0.65
        }));

        // Tone curve
        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 50], [40, 78], [118, 170], [181, 211], [255, 255]],
            green: [[0, 27], [28, 45], [109, 157], [157, 195], [179, 208], [206, 212], [255, 240]],
            blue: [[0, 50], [12, 55], [46, 103], [103, 162], [194, 182], [241, 201], [255, 219]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Quozi';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'quozi';
      }
    }]);

    return QuoziFilter;
  })(_filter2['default']);

  exports['default'] = QuoziFilter;
  module.exports = exports['default'];

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Semired Filter
   * @class
   * @alias ImglyKit.Filters.SemiredFilter
   * @extends {ImglyKit.Filter}
   */

  var SemiredFilter = (function (_Filter) {
    function SemiredFilter() {
      _classCallCheck(this, SemiredFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(SemiredFilter, _Filter);

    _createClass(SemiredFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 129], [75, 153], [181, 227], [255, 255]],
            green: [[0, 8], [111, 85], [212, 158], [255, 226]],
            blue: [[0, 5], [75, 22], [193, 90], [255, 229]]
          }
        }));

        stack.add(new _filter2['default'].Primitives.Glow());

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Semi Red';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'semired';
      }
    }]);

    return SemiredFilter;
  })(_filter2['default']);

  exports['default'] = SemiredFilter;
  module.exports = exports['default'];

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Sunny Filter
   * @class
   * @alias ImglyKit.Filters.SunnyFilter
   * @extends {ImglyKit.Filter}
   */

  var SunnyFilter = (function (_Filter) {
    function SunnyFilter() {
      _classCallCheck(this, SunnyFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(SunnyFilter, _Filter);

    _createClass(SunnyFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 0], [62, 82], [141, 154], [255, 255]],
            green: [[0, 39], [56, 96], [192, 176], [255, 255]],
            blue: [[0, 0], [174, 99], [255, 235]]
          }
        }));

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          controlPoints: [[0, 0], [55, 20], [158, 191], [255, 255]]
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Sunny';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'sunny';
      }
    }]);

    return SunnyFilter;
  })(_filter2['default']);

  exports['default'] = SunnyFilter;
  module.exports = exports['default'];

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Texas Filter
   * @class
   * @alias ImglyKit.Filters.TexasFilter
   * @extends {ImglyKit.Filter}
   */

  var TexasFilter = (function (_Filter) {
    function TexasFilter() {
      _classCallCheck(this, TexasFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(TexasFilter, _Filter);

    _createClass(TexasFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.ToneCurve({
          rgbControlPoints: {
            red: [[0, 72], [89, 99], [176, 212], [255, 237]],
            green: [[0, 49], [255, 192]],
            blue: [[0, 72], [255, 151]]
          }
        }));

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Texas';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'texas';
      }
    }]);

    return TexasFilter;
  })(_filter2['default']);

  exports['default'] = TexasFilter;
  module.exports = exports['default'];

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * X400 Filter
   * @class
   * @alias ImglyKit.Filters.X400Filter
   * @extends {ImglyKit.Filter}
   */

  var X400Filter = (function (_Filter) {
    function X400Filter() {
      _classCallCheck(this, X400Filter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(X400Filter, _Filter);

    _createClass(X400Filter, [{
      key: 'render',

      /**
       * Renders the filter
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        var stack = new _filter2['default'].PrimitivesStack();

        stack.add(new _filter2['default'].Primitives.X400());

        stack.render(renderer);
      }
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'X400';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'x400';
      }
    }]);

    return X400Filter;
  })(_filter2['default']);

  exports['default'] = X400Filter;
  module.exports = exports['default'];

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Represents a 2-dimensional vector while providing math functions to
   * modify / clone the vector. Fully chainable.
   * @class
   * @alias ImglyKit.Vector2
   * @param {number} x
   * @param {number} y
   * @private
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Vector2 = (function () {
    function Vector2(x, y) {
      _classCallCheck(this, Vector2);

      this.x = x;
      this.y = y;
      if (typeof this.x === 'undefined') {
        this.x = 0;
      }
      if (typeof this.y === 'undefined') {
        this.y = 0;
      }
    }

    _createClass(Vector2, [{
      key: 'set',

      /**
       * Sets the given values
       * @param {number} x
       * @param {number} y
       * @return {Vector2}
       */
      value: function set(x, y) {
        this.x = x;
        this.y = y;
        return this;
      }
    }, {
      key: 'clone',

      /**
       * Creates a clone of this vector
       * @return {Vector2}
       */
      value: function clone() {
        return new Vector2(this.x, this.y);
      }
    }, {
      key: 'copy',

      /**
       * Copies the values of the given vector
       * @param  {Vector2} other
       * @return {Vector2}
       */
      value: function copy(other) {
        this.x = other.x;
        this.y = other.y;
        return this;
      }
    }, {
      key: 'clamp',

      /**
       * Clamps this vector with the given Vector2 / number
       * @param  {(number|Vector2)} minimum
       * @param  {(number|Vector2)} maximum
       * @return {Vector2}
       */
      value: function clamp(minimum, maximum) {
        var minimumSet = minimum !== null && typeof minimum !== 'undefined';
        var maximumSet = maximum !== null && typeof maximum !== 'undefined';

        /* istanbul ignore else  */
        if (!(minimum instanceof Vector2) && minimumSet) {
          minimum = new Vector2(minimum, minimum);
        }
        /* istanbul ignore else  */
        if (!(maximum instanceof Vector2) && maximumSet) {
          maximum = new Vector2(maximum, maximum);
        }

        if (minimumSet) {
          this.x = Math.max(minimum.x, this.x);
          this.y = Math.max(minimum.y, this.y);
        }

        if (maximumSet) {
          this.x = Math.min(maximum.x, this.x);
          this.y = Math.min(maximum.y, this.y);
        }
        return this;
      }
    }, {
      key: 'divide',

      /**
       * Divides this vector by the given Vector2 / number
       * @param  {(number|Vector2)} divisor
       * @param  {number} [y]
       * @return {Vector2}
       */
      value: function divide(divisor, y) {
        if (divisor instanceof Vector2) {
          this.x /= divisor.x;
          this.y /= divisor.y;
        } else {
          this.x /= divisor;
          this.y /= typeof y === 'undefined' ? divisor : y;
        }
        return this;
      }
    }, {
      key: 'subtract',

      /**
       * Subtracts the given Vector2 / number from this vector
       * @param  {(number|Vector2)} subtrahend
       * @param  {number} [y]
       * @return {Vector2}
       */
      value: function subtract(subtrahend, y) {
        if (subtrahend instanceof Vector2) {
          this.x -= subtrahend.x;
          this.y -= subtrahend.y;
        } else {
          this.x -= subtrahend;
          this.y -= typeof y === 'undefined' ? subtrahend : y;
        }
        return this;
      }
    }, {
      key: 'multiply',

      /**
       * Multiplies the given Vector2 / number with this vector
       * @param  {(number|Vector2)} subtrahend
       * @param  {number} [y]
       * @return {Vector2}
       */
      value: function multiply(factor, y) {
        if (factor instanceof Vector2) {
          this.x *= factor.x;
          this.y *= factor.y;
        } else {
          this.x *= factor;
          this.y *= typeof y === 'undefined' ? factor : y;
        }
        return this;
      }
    }, {
      key: 'add',

      /**
       * Adds the given Vector2 / numbers to this vector
       * @param {(number|Vector2)} addend
       * @param {number} [y]
       */
      value: function add(addend, y) {
        if (addend instanceof Vector2) {
          this.x += addend.x;
          this.y += addend.y;
        } else {
          this.x += addend;
          this.y += typeof y === 'undefined' ? addend : y;
        }
        return this;
      }
    }, {
      key: 'equals',

      /**
       * Checks whether the x and y value are the same as the given ones
       * @param  {(number|Vector2)} vec
       * @param  {number} y
       * @return {boolean}
       */
      value: function equals(vec, y) {
        if (vec instanceof Vector2) {
          return vec.x === this.x && vec.y === this.y;
        } else {
          return vec === this.x && y === this.y;
        }
      }
    }, {
      key: 'flip',

      /**
       * Flips the x and y values of this vector
       * @return {Vector2}
       */
      value: function flip() {
        var tempX = this.x;
        this.x = this.y;
        this.y = tempX;
        return this;
      }
    }, {
      key: 'toString',

      /**
       * Returns a string representation of this vector
       * @return {String}
       */
      value: function toString() {
        return 'Vector2({ x: ' + this.x + ', y: ' + this.y + ' })';
      }
    }]);

    return Vector2;
  })();

  exports['default'] = Vector2;
  module.exports = exports['default'];

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

  /* global FileReader, Image */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _baseUi = __webpack_require__(77);

  var _baseUi2 = _interopRequireDefault(_baseUi);

  var _libCanvas = __webpack_require__(78);

  var _libCanvas2 = _interopRequireDefault(_libCanvas);

  var _libFileLoader = __webpack_require__(79);

  var _libFileLoader2 = _interopRequireDefault(_libFileLoader);

  var _libTopControls = __webpack_require__(80);

  var _libTopControls2 = _interopRequireDefault(_libTopControls);

  var _libScrollbar = __webpack_require__(81);

  var _libScrollbar2 = _interopRequireDefault(_libScrollbar);

  var _constants = __webpack_require__(5);



  var NightUI = (function (_UI) {
    function NightUI() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, NightUI);

      _get(Object.getPrototypeOf(NightUI.prototype), 'constructor', this).apply(this, args);

      this._operationsMap = {};
      this._template = "<div class=\"imglykit-container\">\n  <div class=\"imglykit-loadingOverlay\">\n    <div class=\"imglykit-loadingOverlay-content\">\n      <img src=\"{{= it.helpers.assetPath('ui/night/loading.gif')}}\" />\n      <span>Loading...</span>\n    </div>\n  </div>\n  {{? !it.options.ui.hideHeader }}\n  <div class=\"imglykit-header\">\n    \n\n    {{? it.options.ui.showCloseButton }}\n    <div class=\"imglykit-close-button\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/close.png')}}\" />\n    </div>\n    {{?}}\n  </div>\n  {{?}}\n  <div class=\"imglykit-top-controls{{? !it.options.ui.hideHeader }} imglykit-header-padding{{?}}\">\n    <div class=\"imglykit-top-controls-left\">\n      {{? it.options.ui.showNewButton }}\n      <div class=\"imglykit-new\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/top/new.png')}}\" />\n        New\n      </div>\n      {{?}}\n      <div class=\"imglykit-undo\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/top/undo.png')}}\" />\n        Undo\n      </div>\n      {{? it.options.ui.showExportButton }}\n      <div class=\"imglykit-export\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/top/export.png')}}\" />\n        Export\n      </div>\n      {{?}}\n    </div>\n    <div class=\"imglykit-top-controls-right\">\n      <div class=\"imglykit-zoom-fit\"></div>\n      <div class=\"imglykit-zoom-level\">Zoom: <span class=\"imglykit-zoom-level-num\">100</span>%</div>\n      <div class=\"imglykit-zoom-in\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/top/zoom-in.png')}}\" />\n      </div>\n      <div class=\"imglykit-zoom-out\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/top/zoom-out.png')}}\" />\n      </div>\n    </div>\n  </div>\n\n  <div class=\"imglykit-canvas-container{{? !it.options.ui.hideHeader }} imglykit-header-padding{{?}}\">\n    <div class=\"imglykit-canvas-inner-container\">\n      <canvas class=\"imglykit-canvas-draggable\"></canvas>\n      <div class=\"imglykit-canvas-controls imglykit-canvas-controls-disabled\"></div>\n    </div>\n    {{? it.renderDropArea }}\n    <div class=\"imglykit-drop-area-container{{? !it.options.ui.hideHeader }} imglykit-header-padding{{?}}\">\n      <div class=\"imglykit-drop-area\">\n        <input type=\"file\" class=\"imglykit-drop-area-hidden-input\" />\n        <img src=\"{{=it.helpers.assetPath('ui/night/upload.png')}}\" />\n\n        <div class=\"imglykit-drop-area-content\">\n          <h1>Upload a picture</h1>\n          <span>Click to upload a picture from your library or just drag and drop</span>\n        </div>\n      </div>\n    </div>\n    {{?}}\n  </div>\n\n  <div class=\"imglykit-controls-container\">\n    <div class=\"imglykit-controls\">\n\n      <div>\n        <div class=\"imglykit-controls-overview\">\n          <ul class=\"imglykit-controls-list\">\n          {{ for (var identifier in it.controls) { }}\n            {{ var control = it.controls[identifier]; }}\n            <li data-identifier=\"{{= control.identifier}}\"{{? it.controlsDisabled }} data-disabled{{?}}>\n              <img src=\"{{=it.helpers.assetPath('ui/night/operations/' + control.identifier + '.png') }}\" />\n            </li>\n          {{ } }}\n          </ul>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n";
      this._registeredControls = {};
      this._history = [];

      // The `Night` UI has a fixed operation order
      this._preferredOperationOrder = [
      // First, all operations that affect the image dimensions
      'rotation', 'crop', 'flip',

      // Then color operations (first filters, then fine-tuning)
      'filters', 'contrast', 'brightness', 'saturation',

      // Then post-processing
      'radial-blur', 'tilt-shift', 'frames', 'stickers', 'text'];

      this._paused = false;

      this._options.ui = _lodash2['default'].defaults(this._options.ui, {
        showNewButton: !this._options.image,
        showHeader: true,
        showCloseButton: false,
        showExportButton: false,
        'export': {}
      });

      this._options.ui['export'] = _lodash2['default'].defaults(this._options.ui['export'], {
        type: _constants.ImageFormat.JPEG,
        quality: 0.8
      });
    }

    _inherits(NightUI, _UI);

    _createClass(NightUI, [{
      key: 'run',

      /**
       * Prepares the UI for use
       */
      value: function run() {
        this._registerControls();

        _get(Object.getPrototypeOf(NightUI.prototype), 'run', this).call(this);

        var container = this._options.container;

        this._controlsContainer = container.querySelector('.imglykit-controls');
        this._canvasControlsContainer = container.querySelector('.imglykit-canvas-controls');
        this._overviewControlsContainer = container.querySelector('.imglykit-controls-overview');
        this._loadingOverlay = container.querySelector('.imglykit-loadingOverlay');
        this._loadingSpan = container.querySelector('.imglykit-loadingOverlay span');

        this._handleOverview();

        if (this._options.image) {
          this._initCanvas();
        }

        if (this._options.ui.showNewButton) {
          this._initFileLoader();
        }

        this._initTopControls();
        this._initControls();

        if (this._options.image) {
          this.showZoom();
        }

        if (this._options.ui.showCloseButton) {
          this._handleCloseButton();
        }

        this._topControls.updateExportButton();
      }
    }, {
      key: '_initFileLoader',

      /**
       * Initializes the file loader
       * @private
       */
      value: function _initFileLoader() {
        this._fileLoader = new _libFileLoader2['default'](this._kit, this);
        this._fileLoader.on('file', this._onFileLoaded.bind(this));
      }
    }, {
      key: '_onFileLoaded',

      /**
       * Gets called when the user loaded a file using the FileLoader
       * @param {File} file
       * @private
       */
      value: function _onFileLoaded(file) {
        var _this = this;

        var reader = new FileReader();
        reader.onload = (function () {
          return function (e) {
            var data = e.target.result;
            var image = new Image();

            image.addEventListener('load', function () {
              _this._setImage(image);
            });

            image.src = data;
          };
        })(file);
        reader.readAsDataURL(file);
      }
    }, {
      key: '_setImage',

      /**
       * Sets the image option and starts rendering
       * @param {Image} image
       * @private
       */
      value: function _setImage(image) {
        this._options.image = image;
        if (this._canvas) {
          this._canvas.reset();
        }

        this._fileLoader.removeDOM();

        if (!this._canvas) {
          this._initCanvas();
        } else {
          this._canvas.setImage(this._options.image);
        }

        this.showZoom();
        this._topControls.init();
        this._enableControls();

        this._topControls.updateExportButton();
      }
    }, {
      key: '_initTopControls',

      /**
       * Initializes the top controls
       * @private
       */
      value: function _initTopControls() {
        var _this2 = this;

        this._topControls = new _libTopControls2['default'](this._kit, this);
        this._topControls.run();

        this._topControls.on('undo', function () {
          _this2.undo();
        });

        this._topControls.on('export', function () {
          _this2['export']();
        });

        // Pass zoom in event
        this._topControls.on('zoom-in', function () {
          _this2._canvas.zoomIn().then(function () {
            if (_this2._currentControl) {
              _this2._currentControl.onZoom();
            }
          });
        });

        // Pass zoom out event
        this._topControls.on('zoom-out', function () {
          _this2._canvas.zoomOut().then(function () {
            if (_this2._currentControl) {
              _this2._currentControl.onZoom();
            }
          });
        });
      }
    }, {
      key: '_initCanvas',

      /**
       * Inititializes the canvas
       * @private
       */
      value: function _initCanvas() {
        var _this3 = this;

        this._canvas = new _libCanvas2['default'](this._kit, this, this._options);
        this._canvas.run();
        this._canvas.on('zoom', function () {
          _this3._topControls.updateZoomLevel();
        });
      }
    }, {
      key: 'selectOperations',

      /**
       * Selects the enabled operations
       * @param {ImglyKit.Selector}
       */
      value: function selectOperations(selector) {
        _get(Object.getPrototypeOf(NightUI.prototype), 'selectOperations', this).call(this, selector);
      }
    }, {
      key: 'getOrCreateOperation',

      /**
       * Returns or creates an instance of the operation with the given identifier
       * @param {String} identifier
       */
      value: function getOrCreateOperation(identifier) {
        var _kit = this._kit;
        var operationsStack = _kit.operationsStack;
        var registeredOperations = _kit.registeredOperations;

        var Operation = registeredOperations[identifier];

        if (typeof this._operationsMap[identifier] === 'undefined') {
          // Create operation
          var operationInstance = new Operation(this._kit);
          this._operationsMap[identifier] = operationInstance;

          // Find index in preferred operation order
          var index = this._preferredOperationOrder.indexOf(identifier);
          if (index === -1) {
            index = this._preferredOperationOrder.length;
          }
          operationsStack[index] = operationInstance;

          return operationInstance;
        } else {
          return this._operationsMap[identifier];
        }
      }
    }, {
      key: 'removeOperation',

      /**
       * Removes the operation with the given identifier from the stack
       * @param {String} identifier
       */
      value: function removeOperation(identifier) {
        if (!this._operationsMap[identifier]) return;

        var operation = this._operationsMap[identifier];
        delete this._operationsMap[identifier];

        var index = this._kit.operationsStack.indexOf(operation);
        this._kit.operationsStack.splice(index, 1);
      }
    }, {
      key: '_registerControls',

      /**
       * Registers all default operation controls
       * @private
       */
      value: function _registerControls() {
        this.registerControl('filters', 'filters', __webpack_require__(82));
        this.registerControl('rotation', 'rotation', __webpack_require__(83));
        this.registerControl('flip', 'flip', __webpack_require__(84));
        this.registerControl('brightness', 'brightness', __webpack_require__(85));
        this.registerControl('contrast', 'contrast', __webpack_require__(86));
        this.registerControl('saturation', 'saturation', __webpack_require__(87));
        this.registerControl('crop', 'crop', __webpack_require__(88));
        this.registerControl('radial-blur', 'radial-blur', __webpack_require__(89));
        this.registerControl('tilt-shift', 'tilt-shift', __webpack_require__(90));
        this.registerControl('frames', 'frames', __webpack_require__(91));
        this.registerControl('stickers', 'stickers', __webpack_require__(92));
        this.registerControl('text', 'text', __webpack_require__(93));
      }
    }, {
      key: '_handleOverview',

      /**
       * Handles the overview button click events
       * @private
       */
      value: function _handleOverview() {
        var _this4 = this;

        var itemsList = this._overviewControlsContainer.querySelector('ul');
        if (!itemsList.parentNode === this._overviewControlsContainer) {
          return;
        }
        var listItems = [].filter.call(itemsList.querySelectorAll('li'), function (el) {
          return el.parentNode === itemsList;
        });

        var _loop = function (i) {
          var listItem = listItems[i];
          var identifier = listItem.dataset.identifier;

          listItem.addEventListener('click', function () {
            _this4.switchToControl(identifier);
          });
        };

        // Add click events to all items
        for (var i = 0; i < listItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_enableControls',

      /**
       * Enables the overview controls
       * @private
       */
      value: function _enableControls() {
        var itemsList = this._overviewControlsContainer.querySelector('ul');
        if (!itemsList.parentNode === this._overviewControlsContainer) {
          return;
        }
        var listItems = [].filter.call(itemsList.querySelectorAll('li'), function (el) {
          return el.parentNode === itemsList;
        });

        // Add click events to all items
        for (var i = 0; i < listItems.length; i++) {
          var listItem = listItems[i];
          listItem.removeAttribute('data-disabled');
        }
      }
    }, {
      key: 'switchToControl',

      /**
       * Gets called when an overview button has been clicked
       * @private
       */
      value: function switchToControl(identifier) {
        if (this.context.controlsDisabled) return;
        this._overviewControlsContainer.style.display = 'none';

        this._scrollbar.remove();

        if (this._currentControl) {
          this._currentControl.leave();
        }

        this._currentControl = this._registeredControls[identifier];
        this._currentControl.enter();
        this._currentControl.once('back', this._switchToOverview.bind(this));
      }
    }, {
      key: '_switchToOverview',

      /**
       * Switches back to the overview controls
       * @private
       */
      value: function _switchToOverview() {
        if (this._currentControl) {
          this._currentControl.leave();
        }

        this._currentControl = null;
        this._overviewControlsContainer.style.display = '';

        this._initScrollbar();
      }
    }, {
      key: 'registerControl',

      /**
       * Registers the controls for an operation
       * @param {String} identifier
       * @param {String} operationIdentifier
       * @param {Control} ControlClass
       */
      value: function registerControl(identifier, operationIdentifier, ControlClass) {
        if (!this.isOperationSelected(operationIdentifier)) return;

        var instance = new ControlClass(this._kit, this);
        this._registeredControls[identifier] = instance;
      }
    }, {
      key: '_initControls',

      /**
       * Initializes the registered controls
       * @private
       */
      value: function _initControls() {
        for (var identifier in this._registeredControls) {
          var control = this._registeredControls[identifier];
          control.setContainers(this._controlsContainer, this._canvasControlsContainer);
          control.init();
        }

        this._initScrollbar();
      }
    }, {
      key: '_initScrollbar',

      /**
       * Initializes the custom scrollbar
       * @private
       */
      value: function _initScrollbar() {
        var container = this._controlsContainer.querySelector('.imglykit-controls-list').parentNode;
        this._scrollbar = new _libScrollbar2['default'](container);
      }
    }, {
      key: '_handleCloseButton',

      /**
       * Handles the click event on the close button, emits a `close` event
       * when clicking
       * @private
       */
      value: function _handleCloseButton() {
        var _this5 = this;

        var closeButton = this._options.container.querySelector('.imglykit-close-button');
        closeButton.addEventListener('click', function (e) {
          e.preventDefault();
          _this5.emit('close');
        });
      }
    }, {
      key: 'render',

      /**
       * Re-renders the canvas
       */
      value: function render() {
        if (this._canvas) {
          this._canvas.render();
        }
      }
    }, {
      key: 'pause',

      /**
       * Pauses the UI. Operation updates will not cause a re-rendering
       * of the canvas.
       */
      value: function pause() {
        this._paused = true;
      }
    }, {
      key: 'resume',

      /**
       * Resumes the UI and re-renders the canvas
       * @param {Boolean} rerender = true
       */
      value: function resume() {
        var rerender = arguments[0] === undefined ? true : arguments[0];

        this._paused = false;
        if (rerender) {
          this.render();
        }
      }
    }, {
      key: 'addHistory',

      /**
       * Adds the given operation and options to the history stack
       * @param {Operation} operation
       * @param {Object.<String, *>} options
       * @param {Boolean} existent
       */
      value: function addHistory(operation, options, existent) {
        this._history.push({ operation: operation, options: options, existent: existent });
        this._topControls.updateUndoButton();
      }
    }, {
      key: 'hideZoom',

      /**
       * Hides the zoom control
       */
      value: function hideZoom() {
        this._topControls.hideZoom();
      }
    }, {
      key: 'showZoom',

      /**
       * Hides the zoom control
       */
      value: function showZoom() {
        this._topControls.showZoom();
      }
    }, {
      key: 'undo',

      /**
       * Takes the last history item and applies its options
       */
      value: function undo() {
        var lastItem = this._history.pop();
        if (lastItem) {
          var operation = lastItem.operation;
          var existent = lastItem.existent;
          var options = lastItem.options;

          if (!existent) {
            this.removeOperation(operation.identifier);
          } else {
            operation = this.getOrCreateOperation(operation.identifier);
            operation.set(options);
          }
          this.canvas.zoomToFit(true);
        }
        this._topControls.updateUndoButton();
      }
    }, {
      key: 'export',

      /**
       * Exports the current image with the default settings
       */
      value: function _export() {
        var _this6 = this;

        this.displayLoadingMessage('Exporting...');

        var renderType = _constants.RenderType.DATAURL;

        // Check if msToBlob is available
        var canvas = document.createElement('canvas');
        if (typeof canvas.msToBlob !== 'undefined') {
          renderType = _constants.RenderType.MSBLOB;
        }

        setTimeout(function () {
          _this6._kit.render(renderType, _this6._options.ui['export'].type, _this6._options.ui['export'].dimensions, _this6._options.ui['export'].quality).then(function (data) {
            switch (renderType) {
              case _constants.RenderType.DATAURL:
                var link = document.createElement('a');
                var extension = _this6._options.ui['export'].type.split('/').pop();
                link.download = 'imglykit-export.' + extension;

                link.href = data;
                document.body.appendChild(link);
                link.click();
                // Cleanup the DOM
                document.body.removeChild(link);
                break;
              case _constants.RenderType.MSBLOB:
                navigator.msSaveBlob(data, 'imglykit-export.png');
                break;
            }

            _this6.hideLoadingMessage();
          });
        }, 1000);
      }
    }, {
      key: 'displayLoadingMessage',

      /**
       * Displays the given message inside the loading overlay
       * @param {String} message
       */
      value: function displayLoadingMessage(message) {
        this._loadingSpan.innerText = message;
        this._loadingOverlay.style.display = 'block';
      }
    }, {
      key: 'hideLoadingMessage',

      /**
       * Hides the loading message
       */
      value: function hideLoadingMessage() {
        this._loadingOverlay.style.display = 'none';
      }
    }, {
      key: 'identifier',

      /**
       * A unique string that represents this UI
       * @type {String}
       */
      get: function () {
        return 'night';
      }
    }, {
      key: 'operations',

      /**
       * An object containing all active operations
       * @type {Object.<String,Operation>}
       */
      get: function () {
        return this._operationsMap;
      }
    }, {
      key: 'controls',

      /**
       * An object containing all registered controls
       * @type {Object.<String,Control>}
       */
      get: function () {
        return this._registeredControls;
      }
    }, {
      key: 'context',

      /**
       * The data that is passed to the template renderer
       * @type {Object}
       */
      get: function () {
        var context = _get(Object.getPrototypeOf(NightUI.prototype), 'context', this);
        context.controls = this._registeredControls;
        context.renderDropArea = this._options.ui.showNewButton;
        context.controlsDisabled = !this._options.image;
        return context;
      }
    }, {
      key: 'history',

      /**
       * The undo history
       * @type {Array.<Object>}
       */
      get: function () {
        return this._history;
      }
    }, {
      key: 'fileLoader',

      /**
       * The file loader
       * @type {FileLoader}
       */
      get: function () {
        return this._fileLoader;
      }
    }]);

    return NightUI;
  })(_baseUi2['default']);

  NightUI.Control = __webpack_require__(94);

  exports['default'] = NightUI;
  module.exports = exports['default'];

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {



/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = __WEBPACK_EXTERNAL_MODULE_53__;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Parses the dimensions string and provides calculation functions
   * @class
   * @alias ImglyKit.ImageDimensions
   * @param {string} dimensions
   * @private
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var ImageDimensions = (function () {
    function ImageDimensions(dimensions) {
      _classCallCheck(this, ImageDimensions);

      /**
       * The available dimension modifiers
       * @type {Object}
       * @private
       */
      this._modifiers = {
        FIXED: '!'
      };

      /**
       * @type {string}
       * @private
       */
      this._dimensionsString = dimensions;

      /**
       * An object that represents the parsed dimensions string
       * @type {Object}
       */
      this._rules = this._parse();

      this._validateRules();
    }

    _createClass(ImageDimensions, [{
      key: '_parse',

      /**
       * Parses the dimensions string
       * @private
       */
      value: function _parse() {
        if (typeof this._dimensionsString === 'undefined' || this._dimensionsString === null) {
          return null;
        }

        var match = this._dimensionsString.match(/^([0-9]+)?x([0-9]+)?([\!])?$/i);
        if (!match) {
          throw new Error('Invalid size option: ' + this._dimensionsString);
        }

        return {
          x: isNaN(match[1]) ? null : parseInt(match[1], 10),
          y: isNaN(match[2]) ? null : parseInt(match[2], 10),
          modifier: match[3]
        };
      }
    }, {
      key: '_validateRules',

      /**
       * Validates the rules
       * @private
       */
      value: function _validateRules() {
        if (this._rules === null) return;

        var xAvailable = this._rules.x !== null;
        var yAvailable = this._rules.y !== null;

        if (this._rules.modifier === this._modifiers.FIXED && !(xAvailable && yAvailable)) {
          throw new Error('Both `x` and `y` have to be set when using the fixed (!) modifier.');
        }

        if (!xAvailable && !yAvailable) {
          throw new Error('Neither `x` nor `y` are given.');
        }
      }
    }, {
      key: 'calculateFinalDimensions',

      /**
       * Calculates the final dimensions using the dimensions string and the
       * given initial dimensions
       * @param  {Vector2} initialDimensions
       * @return {Vector2}
       */
      value: function calculateFinalDimensions(initialDimensions) {
        var dimensions = initialDimensions.clone(),
            ratio;

        if (this._rules === null) return dimensions;

        /* istanbul ignore else */
        if (this._rules.modifier === this._modifiers.FIXED) {
          // Fixed dimensions
          dimensions.set(this._rules.x, this._rules.y);
        } else if (this._rules.x !== null && this._rules.y !== null) {
          // Both x and y given, resize to fit
          ratio = Math.min(this._rules.x / dimensions.x, this._rules.y / dimensions.y);
          dimensions.multiply(ratio);
        } else if (this._rules.x !== null) {
          // Fixed x, y by ratio
          ratio = initialDimensions.y / initialDimensions.x;
          dimensions.x = this._rules.x;
          dimensions.y = dimensions.x * ratio;
        } else if (this._rules.y !== null) {
          // Fixed y, x by ratio
          ratio = initialDimensions.x / initialDimensions.y;
          dimensions.y = this._rules.y;
          dimensions.x = dimensions.y * ratio;
        }

        return dimensions;
      }
    }]);

    return ImageDimensions;
  })();

  exports['default'] = ImageDimensions;
  module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _renderer = __webpack_require__(96);

  var _renderer2 = _interopRequireDefault(_renderer);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  /**
   * @class
   * @alias ImglyKit.CanvasRenderer
   * @extends {ImglyKit.Renderer}
   * @private
   */

  var CanvasRenderer = (function (_Renderer) {
    function CanvasRenderer() {
      _classCallCheck(this, CanvasRenderer);

      if (_Renderer != null) {
        _Renderer.apply(this, arguments);
      }
    }

    _inherits(CanvasRenderer, _Renderer);

    _createClass(CanvasRenderer, [{
      key: 'cache',

      /**
       * Caches the current canvas content for the given identifier
       * @param {String} identifier
       */
      value: function cache(identifier) {
        this._cache[identifier] = {
          data: this._context.getImageData(0, 0, this._canvas.width, this._canvas.height),
          size: new _libMathVector22['default'](this._canvas.width, this._canvas.height)
        };
      }
    }, {
      key: 'drawCached',

      /**
       * Draws the stored texture / image data for the given identifier
       * @param {String} identifier
       */
      value: function drawCached(identifier) {
        var _cache$identifier = this._cache[identifier];
        var data = _cache$identifier.data;
        var size = _cache$identifier.size;

        this._canvas.width = size.x;
        this._canvas.height = size.y;
        this._context.putImageData(data, 0, 0);
      }
    }, {
      key: '_getContext',

      /**
       * Gets the rendering context from the Canva
       * @return {RenderingContext}
       * @abstract
       */
      value: function _getContext() {
        /* istanbul ignore next */
        return this._canvas.getContext('2d');
      }
    }, {
      key: 'drawImage',

      /**
       * Draws the given image on the canvas
       * @param  {Image} image
       * @returns {Promis}
       */
      value: function drawImage(image) {
        var _this = this;

        return new _vendorPromise2['default'](function (resolve, reject) {
          _this._context.drawImage(image, 0, 0, image.width, image.height, 0, 0, _this._canvas.width, _this._canvas.height);
          resolve();
        });
      }
    }, {
      key: 'resizeTo',

      /**
       * Resizes the current canvas picture to the given dimensions
       * @param  {Vector2} dimensions
       * @return {Promise}
       */
      value: function resizeTo(dimensions) {
        // Create a temporary canvas to draw to
        var newCanvas = this.createCanvas();
        newCanvas.width = dimensions.x;
        newCanvas.height = dimensions.y;
        var newContext = newCanvas.getContext('2d');

        // Draw the source canvas onto the new one
        newContext.drawImage(this._canvas, 0, 0, this._canvas.width, this._canvas.height, 0, 0, newCanvas.width, newCanvas.height);

        // Set the new canvas and context
        this.setCanvas(newCanvas);
      }
    }, {
      key: 'cloneCanvas',

      /**
       * Returns a cloned version of the current canvas
       * @return {Canvas}
       */
      value: function cloneCanvas() {
        var canvas = this.createCanvas();
        var context = canvas.getContext('2d');

        // Resize the canvas
        canvas.width = this._canvas.width;
        canvas.height = this._canvas.height;

        // Draw the current canvas on the new one
        context.drawImage(this._canvas, 0, 0);

        return canvas;
      }
    }, {
      key: 'reset',

      /**
       * Resets the renderer
       * @param {Boolean} resetCache = false
       * @override
       */
      value: function reset() {
        var resetCache = arguments[0] === undefined ? false : arguments[0];

        if (resetCache) {
          this._cache = [];
        }
      }
    }], [{
      key: 'isSupported',

      /**
       * Checks whether this type of renderer is supported in the current environment
       * @abstract
       * @returns {boolean}
       */
      value: function isSupported() {
        var elem = this.prototype.createCanvas();
        return !!(elem.getContext && elem.getContext('2d'));
      }
    }, {
      key: 'identifier',

      /**
       * A unique string that identifies this renderer
       * @type {String}
       */
      get: function () {
        return 'canvas';
      }
    }]);

    return CanvasRenderer;
  })(_renderer2['default']);

  exports['default'] = CanvasRenderer;
  module.exports = exports['default'];

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

  /* global Image */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _renderer = __webpack_require__(96);

  var _renderer2 = _interopRequireDefault(_renderer);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libExifRestorer = __webpack_require__(57);

  var _libExifRestorer2 = _interopRequireDefault(_libExifRestorer);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  /**
   * @class
   * @alias ImglyKit.WebGLRenderer
   * @extends {ImglyKit.Renderer}
   * @private
   */

  var WebGLRenderer = (function (_Renderer) {
    function WebGLRenderer() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, WebGLRenderer);

      _get(Object.getPrototypeOf(WebGLRenderer.prototype), 'constructor', this).apply(this, args);

      this._defaultProgram = this.setupGLSLProgram();
      this.reset();

      this.id = WebGLRenderer.contextId;
      WebGLRenderer.contextId++;
    }

    _inherits(WebGLRenderer, _Renderer);

    _createClass(WebGLRenderer, [{
      key: 'cache',

      /**
       * Caches the current canvas content for the given identifier
       * @param {String} identifier
       */
      value: function cache(identifier) {
        var size = new _libMathVector22['default'](this._canvas.width, this._canvas.height);

        // Re-use FBO and textures
        var fbo = undefined,
            texture = undefined,
            cacheObject = undefined;
        if (!this._cache[identifier]) {
          cacheObject = this._createFramebuffer();
        } else {
          cacheObject = this._cache[identifier];
        }

        // Extract FBO and texture
        fbo = cacheObject.fbo;
        texture = cacheObject.texture;

        // Resize output texture
        var gl = this._context;
        gl.useProgram(this._defaultProgram);

        // Resize cached texture
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.x, size.y, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        // Render to FBO
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.viewport(0, 0, size.x, size.y);

        // Use last fbo texture as input
        gl.bindTexture(gl.TEXTURE_2D, this._lastTexture);

        gl.drawArrays(gl.TRIANGLES, 0, 6);

        this._cache[identifier] = { fbo: fbo, texture: texture, size: size };
      }
    }, {
      key: '_drawCachedFinal',

      /**
       * Debugging method to draw a cached texture to the canvas instead
       * to an FBO
       * @private
       */
      value: function _drawCachedFinal(identifier) {
        var _cache$identifier = this._cache[identifier];
        var texture = _cache$identifier.texture;
        var size = _cache$identifier.size;

        var gl = this._context;
        gl.useProgram(this._defaultProgram);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // Use the cached texture as input
        gl.bindTexture(gl.TEXTURE_2D, texture);

        // Resize the canvas
        this._canvas.width = size.x;
        this._canvas.height = size.y;

        gl.viewport(0, 0, size.x, size.y);

        // Draw the rectangle
        gl.drawArrays(gl.TRIANGLES, 0, 6);
      }
    }, {
      key: 'drawCached',

      /**
       * Draws the stored texture / image data for the given identifier
       * @param {String} identifier
       */
      value: function drawCached(identifier) {
        var _cache$identifier2 = this._cache[identifier];
        var texture = _cache$identifier2.texture;
        var size = _cache$identifier2.size;

        var fbo = this.getCurrentFramebuffer();
        var currentTexture = this.getCurrentTexture();

        var gl = this._context;
        gl.useProgram(this._defaultProgram);

        // Resize the canvas
        this._canvas.width = size.x;
        this._canvas.height = size.y;

        // Resize all textures
        for (var i = 0; i < this._textures.length; i++) {
          var otherTexture = this._textures[i];
          gl.bindTexture(gl.TEXTURE_2D, otherTexture);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.x, size.y, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        }

        // Select the current framebuffer to draw to
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);

        // Resize the texture we're drawing to
        gl.bindTexture(gl.TEXTURE_2D, currentTexture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.x, size.y, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        // Use the cached texture as input
        gl.bindTexture(gl.TEXTURE_2D, texture);

        gl.viewport(0, 0, size.x, size.y);

        // Clear
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // Draw the rectangle
        gl.drawArrays(gl.TRIANGLES, 0, 6);

        this.setLastTexture(currentTexture);
        this.selectNextBuffer();
      }
    }, {
      key: '_getContext',

      /**
       * Gets the rendering context from the Canvas
       * @return {RenderingContext}
       * @abstract
       */
      value: function _getContext() {
        /* istanbul ignore next */
        var gl = this._canvas.getContext('webgl', this._contextOptions) || this._canvas.getContext('experimental-webgl', this._contextOptions);

        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.CULL_FACE);

        this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);

        return gl;
      }
    }, {
      key: 'drawImage',

      /**
       * Draws the given image on the canvas
       * @param  {Image} image
       * @returns {Promise}
       */
      /* istanbul ignore next */
      value: function drawImage(image) {
        var _this = this;

        return new _vendorPromise2['default'](function (resolve, reject) {
          var gl = _this._context;
          gl.useProgram(_this._defaultProgram);

          // Create the texture
          var texture = _this.createTexture();
          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
          _this._inputTexture = texture;
          _this.setLastTexture(texture);

          // Set premultiplied alpha
          gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);

          // Upload the image into the texture
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

          _this._clear(gl);

          // Draw the rectangle
          gl.drawArrays(gl.TRIANGLES, 0, 6);

          resolve();
        });
      }
    }, {
      key: 'prepareImage',

      /**
       * Resizes the given image to fit the maximum texture size
       * @param {Image}
       * @returns {Promise}
       * @private
       */
      value: function prepareImage(image) {
        if (image.width <= this._maxTextureSize && image.height <= this._maxTextureSize) {
          return _vendorPromise2['default'].resolve(image);
        }

        // Calculate new size that fits the graphics card's max texture size
        var maxSize = new _libMathVector22['default'](this._maxTextureSize, this._maxTextureSize);
        var size = new _libMathVector22['default'](image.width, image.height);
        var scale = Math.min(maxSize.x / size.x, maxSize.y / size.y);
        var newSize = size.clone().multiply(scale);

        // Create a new canvas to draw the image to
        var canvas = this.createCanvas(newSize.x, newSize.y);
        var context = canvas.getContext('2d');

        // Draw the resized image
        context.drawImage(image, 0, 0, size.x, size.y, 0, 0, newSize.x, newSize.y);

        // Turn into a data url and make an image out of it
        var data = canvas.toDataURL('image/jpeg');

        var jpegMatch = /^data:image\/jpeg/i;
        if (image.src.match(jpegMatch) && data.match(jpegMatch)) {
          data = _libExifRestorer2['default'].restore(image.src, data);
        }

        return new _vendorPromise2['default'](function (resolve, reject) {
          var image = new Image();
          image.addEventListener('load', function () {
            resolve(image);
          });
          image.src = data;
        });
      }
    }, {
      key: '_clear',

      /**
       * Clears the WebGL context
       * @param {WebGLRenderingContext} gl
       * @private
       */
      value: function _clear(gl) {
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT);
      }
    }, {
      key: 'runProgram',
      value: function runProgram(program, options) {
        var gl = this._context;
        gl.useProgram(program);

        var fbo = this.getCurrentFramebuffer();
        var currentTexture = this.getCurrentTexture();

        // Select the current framebuffer
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        gl.viewport(0, 0, this._canvas.width, this._canvas.height);

        // Resize the texture to canvas size
        gl.bindTexture(gl.TEXTURE_2D, currentTexture);

        // Set premultiplied alpha
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this._canvas.width, this._canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        // Make sure we select the current texture
        gl.bindTexture(gl.TEXTURE_2D, this._lastTexture);

        // Set the uniforms
        for (var name in options.uniforms) {
          var location = gl.getUniformLocation(program, name);
          var uniform = options.uniforms[name];

          switch (uniform.type) {
            case 'i':
            case '1i':
              gl.uniform1i(location, uniform.value);
              break;
            case 'f':
            case '1f':
              gl.uniform1f(location, uniform.value);
              break;
            case '2f':
              gl.uniform2f(location, uniform.value[0], uniform.value[1]);
              break;
            case '3f':
              gl.uniform3f(location, uniform.value[0], uniform.value[1], uniform.value[2]);
              break;
            case '4f':
              gl.uniform4f(location, uniform.value[0], uniform.value[1], uniform.value[2], uniform.value[3]);
              break;
            case '2fv':
              gl.uniform2fv(location, uniform.value);
              break;
            case 'mat3fv':
              gl.uniformMatrix3fv(location, false, uniform.value);
              break;
            default:
              throw new Error('Unknown uniform type: ' + uniform.type);
          }
        }

        // Clear
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        // Draw the rectangle
        gl.drawArrays(gl.TRIANGLES, 0, 6);

        this.setLastTexture(currentTexture);
        this.selectNextBuffer();
      }
    }, {
      key: 'runShader',

      /**
       * Runs the given shader
       * @param  {String} [vertexShader]
       * @param  {String} [fragmentShader]
       */
      /* istanbul ignore next */
      value: function runShader(vertexShader, fragmentShader, options) {
        if (typeof options === 'undefined') options = {};
        if (typeof options.uniforms === 'undefined') options.uniforms = {};

        var program = this.setupGLSLProgram(vertexShader, fragmentShader);
        this.runProgram(program, options);
      }
    }, {
      key: 'renderFinal',

      /**
       * Draws the last used buffer onto the canvas
       */
      /* istanbul ignore next */
      value: function renderFinal() {
        var gl = this._context;
        var program = this._defaultProgram;
        gl.useProgram(program);

        // Don't draw to framebuffer
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);

        // Make sure the viewport size is correct
        gl.viewport(0, 0, this._canvas.width, this._canvas.height);

        // Select the last texture that has been rendered to
        gl.bindTexture(gl.TEXTURE_2D, this._lastTexture);

        // Clear
        this._clear(gl);

        // Draw the rectangle
        gl.drawArrays(gl.TRIANGLES, 0, 6);
      }
    }, {
      key: 'setupGLSLProgram',

      /**
       * Sets up a GLSL program. Uses the default vertex and fragment shader
       * if none are given.
       * @param {String} [vertexShader]
       * @param {String} [fragmentShader]
       * @return {WebGLProgram}
       */
      /* istanbul ignore next */
      value: function setupGLSLProgram(vertexShader, fragmentShader) {
        var gl = this._context;
        var shaders = [];

        // Use default vertex shader
        vertexShader = this._createShader(gl.VERTEX_SHADER, vertexShader || WebGLRenderer.prototype.defaultVertexShader);
        shaders.push(vertexShader);

        // Use default fragment shader
        fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentShader || WebGLRenderer.prototype.defaultFragmentShader);
        shaders.push(fragmentShader);

        // Create the program
        var program = gl.createProgram();

        // Attach the shaders
        for (var i = 0; i < shaders.length; i++) {
          gl.attachShader(program, shaders[i]);
        }

        // Link the program
        gl.linkProgram(program);

        // Check linking status
        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
        if (!linked) {
          var lastError = gl.getProgramInfoLog(program);
          gl.deleteProgram(program);
          throw new Error('WebGL program linking error: ' + lastError);
        }

        // Lookup texture coordinates location
        var positionLocation = gl.getAttribLocation(program, 'a_position');
        var texCoordLocation = gl.getAttribLocation(program, 'a_texCoord');

        // Provide texture coordinates
        var texCoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, texCoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        // First triangle
        0, 0, 1, 0, 0, 1,

        // Second triangle
        0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
        gl.enableVertexAttribArray(texCoordLocation);
        gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0);

        // Create a buffer for the rectangle positions
        var buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([
        // First triangle
        -1, -1, 1, -1, -1, 1,

        // Second triangle
        -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);

        return program;
      }
    }, {
      key: '_createShader',

      /**
       * Creates a WebGL shader with the given type and source code
       * @param  {WebGLShaderType} shaderType
       * @param  {String} shaderSource
       * @return {WebGLShader}
       * @private
       */
      /* istanbul ignore next */
      value: function _createShader(shaderType, shaderSource) {
        var gl = this._context;

        // Create the shader and compile it
        var shader = gl.createShader(shaderType);
        gl.shaderSource(shader, shaderSource);
        gl.compileShader(shader);

        // Check compilation status
        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
        if (!compiled) {
          var lastError = gl.getShaderInfoLog(shader);
          gl.deleteShader(shader);
          throw new Error('WebGL shader compilation error: ' + lastError);
        }

        return shader;
      }
    }, {
      key: 'createTexture',

      /**
       * Creates an empty texture
       * @return {WebGLTexture}
       */
      /* istanbul ignore next */
      value: function createTexture() {
        var gl = this._context;
        var texture = gl.createTexture();

        gl.bindTexture(gl.TEXTURE_2D, texture);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

        return texture;
      }
    }, {
      key: '_createFramebuffers',

      /**
       * Creates two textures and framebuffers that are used for the stack
       * rendering
       * @private
       */
      /* istanbul ignore next */
      value: function _createFramebuffers() {
        for (var i = 0; i < 2; i++) {
          var _createFramebuffer2 = this._createFramebuffer();

          var fbo = _createFramebuffer2.fbo;
          var texture = _createFramebuffer2.texture;

          this._textures.push(texture);
          this._framebuffers.push(fbo);
        }
      }
    }, {
      key: '_createFramebuffer',

      /**
       * Creates and returns a frame buffer and texture
       * @return {Object}
       * @private
       */
      value: function _createFramebuffer() {
        var gl = this._context;

        // Create texture
        var texture = this.createTexture();

        // Set premultiplied alpha
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this._canvas.width, this._canvas.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

        // Create framebuffer
        var fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);

        // Attach the texture
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);

        return { fbo: fbo, texture: texture };
      }
    }, {
      key: 'resizeTo',

      /**
       * Resizes the current canvas picture to the given dimensions
       * @param  {Vector2} dimensions
       * @todo Use a downsampling shader for smoother image resizing
       */
      /* istanbul ignore next */
      value: function resizeTo(dimensions) {
        var gl = this._context;

        // Resize the canvas
        this._canvas.width = dimensions.x;
        this._canvas.height = dimensions.y;

        // Update the viewport dimensions
        gl.viewport(0, 0, this._canvas.width, this._canvas.height);

        // Draw the rectangle
        gl.drawArrays(gl.TRIANGLES, 0, 6);
      }
    }, {
      key: 'getCurrentFramebuffer',

      /**
       * Returns the current framebuffer
       * @return {WebGLFramebuffer}
       */
      value: function getCurrentFramebuffer() {
        return this._framebuffers[this._bufferIndex % 2];
      }
    }, {
      key: 'getCurrentTexture',

      /**
       * Returns the current texture
       * @return {WebGLTexture}
       */
      value: function getCurrentTexture() {
        return this._textures[this._bufferIndex % 2];
      }
    }, {
      key: 'selectNextBuffer',

      /**
       * Increases the buffer index
       */
      value: function selectNextBuffer() {
        this._bufferIndex++;
      }
    }, {
      key: 'getDefaultProgram',

      /**
       * Returns the default program
       * @return {WebGLProgram}
       */
      value: function getDefaultProgram() {
        return this._defaultProgram;
      }
    }, {
      key: 'getLastTexture',

      /**
       * Returns the last texture that has been drawn to
       * @return {WebGLTexture}
       */
      value: function getLastTexture() {
        return this._lastTexture;
      }
    }, {
      key: 'getTextures',

      /**
       * Returns all textures
       * @return {Array.<WebGLTexture>}
       */
      value: function getTextures() {
        return this._textures;
      }
    }, {
      key: 'setLastTexture',

      /**
       * Sets the last texture
       * @param {WebGLTexture} texture
       */
      value: function setLastTexture(texture) {
        this._lastTexture = texture;
      }
    }, {
      key: 'reset',

      /**
       * Resets the renderer
       * @param {Boolean} resetCache = false
       * @override
       */
      value: function reset() {
        var resetCache = arguments[0] === undefined ? false : arguments[0];

        this._lastTexture = null;
        this._textures = [];
        this._framebuffers = [];
        this._bufferIndex = 0;

        if (resetCache) {
          this._cache = [];
        }

        this._createFramebuffers();
        this.setLastTexture(this._inputTexture);
      }
    }, {
      key: '_contextOptions',

      /**
       * Returns the context options passed to getContext()
       * @type {Object}
       * @private
       */
      get: function () {
        return {
          alpha: true,
          premultipliedAlpha: true
        };
      }
    }, {
      key: 'identifier',

      /**
       * A unique string that identifies this renderer
       * @type {String}
       */
      get: function () {
        return 'webgl';
      }
    }, {
      key: 'defaultVertexShader',

      /**
       * The default vertex shader which just passes the texCoord to the
       * fragment shader.
       * @type {String}
       * @private
       */
      get: function () {
        var shader = '\n      attribute vec2 a_position;\n      attribute vec2 a_texCoord;\n      varying vec2 v_texCoord;\n\n      void main() {\n        gl_Position = vec4(a_position, 0, 1);\n        v_texCoord = a_texCoord;\n      }\n    ';
        return shader;
      }
    }, {
      key: 'defaultFragmentShader',

      /**
       * The default fragment shader which will just look up the colors from the
       * texture.
       * @type {String}
       * @private
       */
      get: function () {
        var shader = '\n      precision mediump float;\n      uniform sampler2D u_image;\n      varying vec2 v_texCoord;\n\n      void main() {\n        gl_FragColor = texture2D(u_image, v_texCoord);\n      }\n    ';
        return shader;
      }
    }, {
      key: 'maxTextureSize',
      get: function () {
        return this._maxTextureSize;
      }
    }], [{
      key: 'isSupported',

      /**
       * Checks whether this type of renderer is supported in the current environment
       * @abstract
       * @returns {boolean}
       */
      value: function isSupported() {
        if (typeof window === 'undefined') {
          return false;
        }

        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        return !!gl;
      }
    }]);

    return WebGLRenderer;
  })(_renderer2['default']);

  WebGLRenderer.contextId = 0;

  exports['default'] = WebGLRenderer;
  module.exports = exports['default'];

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   *
   * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
   * https://github.com/hMatoba/MinifyJpeg
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _base64 = __webpack_require__(95);

  var _base642 = _interopRequireDefault(_base64);

  var DATA_JPEG_PREFIX = 'data:image/jpeg;base64,';

  var ExifRestorer = (function () {
    function ExifRestorer() {
      _classCallCheck(this, ExifRestorer);
    }

    _createClass(ExifRestorer, null, [{
      key: 'restore',
      value: function restore(originalData, newData) {
        // Only for jpeg
        if (!originalData.match(DATA_JPEG_PREFIX)) {
          return newData;
        }

        var rawImage = _base642['default'].decode(originalData.replace(DATA_JPEG_PREFIX, ''));
        var segments = this._sliceIntoSegments(rawImage);

        var image = this._exifManipulation(newData, segments);

        return DATA_JPEG_PREFIX + _base642['default'].encode(image);
      }
    }, {
      key: '_exifManipulation',
      value: function _exifManipulation(data, segments) {
        var exifArray = this._getExifArray(segments);
        var newImageArray = this._insertExif(data, exifArray);
        var buffer = new Uint8Array(newImageArray);
        return buffer;
      }
    }, {
      key: '_getExifArray',
      value: function _getExifArray(segments) {
        var seg = undefined;
        for (var i = 0; i < segments.length; i++) {
          seg = segments[i];
          if (seg[0] === 255 && seg[1] === 225) {
            return seg;
          }
        }
        return [];
      }
    }, {
      key: '_insertExif',
      value: function _insertExif(data, exifArray) {
        var imageData = data.replace(DATA_JPEG_PREFIX, '');
        var buf = _base642['default'].decode(imageData);
        var separatePoint = buf.indexOf(255, 3);
        var mae = buf.slice(0, separatePoint);
        var ato = buf.slice(separatePoint);
        var array = mae;

        array = array.concat(exifArray);
        array = array.concat(ato);
        return array;
      }
    }, {
      key: '_sliceIntoSegments',
      value: function _sliceIntoSegments(data) {
        var head = 0;
        var segments = [];

        while (1) {
          if (data[head] === 255 && data[head + 1] === 218) {
            break;
          }

          if (data[head] === 255 && data[head + 1] === 216) {
            head += 2;
          } else {
            var _length = data[head + 2] * 256 + data[head + 3];
            var endPoint = head + _length + 2;
            var seg = data.slice(head, endPoint);
            segments.push(seg);
            head = endPoint;
          }

          if (head > data.length) {
            break;
          }
        }

        return segments;
      }
    }]);

    return ExifRestorer;
  })();

  exports['default'] = ExifRestorer;
  module.exports = exports['default'];

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(global) {/*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var root = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : null;
  var p = root.Promise;

  if (!p) {
    p = __webpack_require__(97);
  }

  exports['default'] = p;
  module.exports = exports['default'];
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Helper function to correctly set up the prototype chain
   * Based on the backbone.js extend function:
   * https://github.com/jashkenas/backbone/blob/master/backbone.js
   * @param  {Object} prototypeProperties
   * @param  {Object} classProperties
   * @return {Object}
   */
  'use strict';

  module.exports = function (prototypeProperties, classProperties) {
    /*jshint validthis:true*/
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the 'constructor' property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (prototypeProperties && prototypeProperties.hasOwnProperty('constructor')) {
      child = prototypeProperties.constructor;
    } else {
      child = function () {
        return parent.apply(this, arguments);
      };
    }

    // Add static properties to the constructor function, if supplied.
    var key;
    for (key in parent) {
      child[key] = parent[key];
    }
    if (typeof classProperties !== 'undefined') {
      for (key in classProperties) {
        child[key] = classProperties[key];
      }
    }

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function Surrogate() {
      this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (prototypeProperties) {
      for (key in prototypeProperties) {
        child.prototype[key] = prototypeProperties[key];
      }
    }

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * A helper class that can collect {@link Primitive} instances and render
   * the stack
   * @class
   * @alias ImglyKit.Filter.PrimitivesStack
   */
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PrimitivesStack = (function () {
    function PrimitivesStack() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, PrimitivesStack);

      /**
       * The stack of {@link ImglyKit.Filter.Primitive} instances
       * @type {Array}
       * @private
       */
      this._stack = [];
    }

    _createClass(PrimitivesStack, [{
      key: "add",

      /**
       * Adds the given primitive to the stack
       * @param {ImglyKit.Filter.Primitive} primitive
       */
      value: function add(primitive) {
        this._stack.push(primitive);
      }
    }, {
      key: "render",

      /**
       * Renders the stack of primitives on the renderer
       * @param  {Renderer} renderer
       */
      value: function render(renderer) {
        for (var i = 0; i < this._stack.length; i++) {
          var primitive = this._stack[i];
          primitive.render(renderer);
        }
      }
    }]);

    return PrimitivesStack;
  })();

  exports["default"] = PrimitivesStack;
  module.exports = exports["default"];

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Saturation primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Saturation
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Saturation = (function (_Primitive) {
    function Saturation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Saturation);

      _get(Object.getPrototypeOf(Saturation.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        saturation: 0
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform float u_saturation;\n\n      const vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        float luminance = dot(texColor.rgb, luminanceWeighting);\n\n        vec3 greyScaleColor = vec3(luminance);\n\n        gl_FragColor = vec4(mix(greyScaleColor, texColor.rgb, u_saturation) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(Saturation, _Primitive);

    _createClass(Saturation, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], {
          uniforms: {
            u_saturation: { type: 'f', value: this._options.saturation }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       * @return {Promise}
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var saturation = this._options.saturation;

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var luminance = imageData.data[index] * 0.2125 + imageData.data[index + 1] * 0.7154 + imageData.data[index + 2] * 0.0721;
            imageData.data[index] = luminance * (1 - saturation) + imageData.data[index] * saturation;
            imageData.data[index + 1] = luminance * (1 - saturation) + imageData.data[index + 1] * saturation;
            imageData.data[index + 2] = luminance * (1 - saturation) + imageData.data[index + 2] * saturation;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Saturation;
  })(_primitive2['default']);

  exports['default'] = Saturation;
  module.exports = exports['default'];

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Stores a 256 byte long lookup table in a 2d texture which will be
   * used to look up the corresponding value for each channel.
   * @class
   * @alias ImglyKit.Filter.Primitives.LookupTable
   * @extends {ImglyKit.Filter.Primitive}
   */

  var LookupTable = (function (_Primitive) {
    function LookupTable() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, LookupTable);

      _get(Object.getPrototypeOf(LookupTable.prototype), 'constructor', this).apply(this, args);

      this._textureIndex = 3;

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform sampler2D u_lookupTable;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        float r = texture2D(u_lookupTable, vec2(texColor.r, 0.0)).r;\n        float g = texture2D(u_lookupTable, vec2(texColor.g, 0.0)).g;\n        float b = texture2D(u_lookupTable, vec2(texColor.b, 0.0)).b;\n\n        gl_FragColor = vec4(vec3(r, g, b) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(LookupTable, _Primitive);

    _createClass(LookupTable, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        this._updateTexture(renderer);

        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_lookupTable: { type: 'i', value: 3 }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var table = this._options.data;

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var r = imageData.data[index];
            imageData.data[index] = table[r * 4];
            var g = imageData.data[index + 1];
            imageData.data[index + 1] = table[1 + g * 4];
            var b = imageData.data[index + 2];
            imageData.data[index + 2] = table[2 + b * 4];
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }, {
      key: '_updateTexture',

      /**
       * Updates the lookup table texture (WebGL only)
       * @private
       */
      /* istanbul ignore next */
      value: function _updateTexture(renderer) {
        var gl = renderer.getContext();

        if (typeof this._options.data === 'undefined') {
          throw new Error('LookupTable: No data specified.');
        }

        var dataTypedArray = new Uint8Array(this._options.data);

        gl.activeTexture(gl.TEXTURE0 + this._textureIndex);
        if (!this._texture) {
          this._texture = gl.createTexture();
        }
        gl.bindTexture(gl.TEXTURE_2D, this._texture);

        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 256, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, dataTypedArray);
        gl.activeTexture(gl.TEXTURE0);
      }
    }]);

    return LookupTable;
  })(_primitive2['default']);

  exports['default'] = LookupTable;
  module.exports = exports['default'];

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _lookupTable = __webpack_require__(62);

  var _lookupTable2 = _interopRequireDefault(_lookupTable);

  /**
   * Tone curve primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.ToneCurve
   * @extends {ImglyKit.Filter.Primitives.LookupTable}
   */

  var ToneCurve = (function (_LookupTable) {
    function ToneCurve() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, ToneCurve);

      _get(Object.getPrototypeOf(ToneCurve.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        rgbControlPoints: {
          red: this._options.controlPoints,
          green: this._options.controlPoints,
          blue: this._options.controlPoints
        }
      });

      if (typeof this._options.rgbControlPoints !== 'undefined') {
        this._updateLookupTable();
      }
    }

    _inherits(ToneCurve, _LookupTable);

    _createClass(ToneCurve, [{
      key: '_updateLookupTable',

      /**
       * Calculates the lookup table
       * @private
       */
      value: function _updateLookupTable() {
        var r = this._calculateSplineCurve(this._options.rgbControlPoints.red);
        var g = this._calculateSplineCurve(this._options.rgbControlPoints.green);
        var b = this._calculateSplineCurve(this._options.rgbControlPoints.blue);

        this._options.data = this._buildLookupTable(r, g, b);
      }
    }, {
      key: '_buildLookupTable',

      /**
       * Builds the lookup table
       * @param  {Array} r
       * @param  {Array} g
       * @param  {Array} b
       * @return {Array}
       * @private
       */
      value: function _buildLookupTable(r, g, b) {
        var data = [];

        for (var i = 0; i < 256; i++) {
          data.push(Math.min(Math.max(i + r[i], 0), 255));
          data.push(Math.min(Math.max(i + g[i], 0), 255));
          data.push(Math.min(Math.max(i + b[i], 0), 255));
          data.push(255);
        }

        return data;
      }
    }, {
      key: '_calculateSplineCurve',

      /**
       * Calculates the spline curve data for the given points
       * @param  {Array.<Array.<Number>>} points
       * @return {Array.<Number>}
       */
      value: function _calculateSplineCurve(points) {
        points = points.sort(function (a, b) {
          return a[0] > b[0];
        });

        var splinePoints = this._getSplineCurve(points);
        var firstSplinePoint = splinePoints[0];
        var i;

        if (firstSplinePoint[0] > 0) {
          for (i = 0; i < firstSplinePoint[0]; i++) {
            splinePoints.unshift([0, 0]);
          }
        }

        var preparedPoints = [];
        for (i = 0; i < splinePoints.length; i++) {
          var newPoint = splinePoints[i];
          var origPoint = [newPoint[0], newPoint[0]];

          var distance = Math.sqrt(Math.pow(origPoint[0] - newPoint[0], 2) + Math.pow(origPoint[1] - newPoint[1], 2));

          if (origPoint[1] > newPoint[1]) {
            distance = -distance;
          }

          preparedPoints.push(distance);
        }

        return preparedPoints;
      }
    }, {
      key: '_getSplineCurve',
      value: function _getSplineCurve(points) {
        var sdA = this._secondDerivative(points);

        var n = sdA.length;
        var sd = [];
        var i;

        for (i = 0; i < n; i++) {
          sd[i] = sdA[i];
        }

        var output = [];

        for (i = 0; i < n - 1; i++) {
          var cur = points[i];
          var next = points[i + 1];

          for (var x = cur[0]; x < next[0]; x++) {
            var t = (x - cur[0]) / (next[0] - cur[0]);

            var a = 1 - t;
            var b = t;
            var h = next[0] - cur[0];

            var y = a * cur[1] + b * next[1] + h * h / 6 * ((a * a * a - a) * sd[i] + (b * b * b - b) * sd[i + 1]);

            if (y > 255) {
              y = 255;
            } else if (y < 0) {
              y = 0;
            }

            output.push([x, y]);
          }
        }

        if (output.length === 255) {
          output.push(points[points.length - 1]);
        }

        return output;
      }
    }, {
      key: '_secondDerivative',
      value: function _secondDerivative(points) {
        var n = points.length;
        if (n <= 0 || n === 1) {
          return null;
        }

        var matrix = [];
        var result = [];
        var i, k;

        matrix[0] = [0, 1, 0];

        for (i = 1; i < n - 1; i++) {
          var P1 = points[i - 1];
          var P2 = points[i];
          var P3 = points[i + 1];

          matrix[i] = matrix[i] || [];
          matrix[i][0] = (P2[0] - P1[0]) / 6;
          matrix[i][1] = (P3[0] - P1[0]) / 3;
          matrix[i][2] = (P3[0] - P2[0]) / 6;
          result[i] = (P3[1] - P2[1]) / (P3[0] - P2[0]) - (P2[1] - P1[1]) / (P2[0] - P1[0]);
        }

        result[0] = 0;
        result[n - 1] = 0;

        matrix[n - 1] = [0, 1, 0];

        // Pass 1
        for (i = 1; i < n; i++) {
          k = matrix[1][0] / matrix[i - 1][1];
          matrix[i][1] -= k * matrix[i - 1][2];
          matrix[i][0] = 0;
          result[i] -= k * result[i - 1];
        }

        // Pass 2
        for (i = n - 2; i > 0; i--) {
          k = matrix[i][2] / matrix[i + 1][1];
          matrix[i][1] -= k * matrix[i + 1][0];
          matrix[i][2] = 0;
          result[i] -= k * result[i + 1];
        }

        var y2 = [];
        for (i = 0; i < n; i++) {
          y2[i] = result[i] / matrix[i][1];
        }

        return y2;
      }
    }]);

    return ToneCurve;
  })(_lookupTable2['default']);

  exports['default'] = ToneCurve;
  module.exports = exports['default'];

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  /**
   * SoftColorOverlay primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.SoftColorOverlay
   * @extends {ImglyKit.Filter.Primitive}
   */

  var SoftColorOverlay = (function (_Primitive) {
    function SoftColorOverlay() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, SoftColorOverlay);

      _get(Object.getPrototypeOf(SoftColorOverlay.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        color: new _libColor2['default'](1, 1, 1)
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform vec3 u_overlay;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        vec4 overlayVec4 = vec4(u_overlay, texColor.a);\n        gl_FragColor = max(overlayVec4 * texColor.a, texColor);\n      }\n    ';
    }

    _inherits(SoftColorOverlay, _Primitive);

    _createClass(SoftColorOverlay, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_overlay: { type: '3f', value: this._options.color.toRGBGLColor() }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            imageData.data[index] = Math.max(this._options.color.r, imageData.data[index]);
            imageData.data[index + 1] = Math.max(this._options.color.g, imageData.data[index + 1]);
            imageData.data[index + 2] = Math.max(this._options.color.b, imageData.data[index + 2]);
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return SoftColorOverlay;
  })(_primitive2['default']);

  exports['default'] = SoftColorOverlay;
  module.exports = exports['default'];

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Desaturation primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Desaturation
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Desaturation = (function (_Primitive) {
    function Desaturation() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Desaturation);

      _get(Object.getPrototypeOf(Desaturation.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        desaturation: 1
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform float u_desaturation;\n\n      const vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        vec3 grayXfer = vec3(0.3, 0.59, 0.11);\n        vec3 gray = vec3(dot(grayXfer, texColor.xyz));\n        gl_FragColor = vec4(mix(texColor.xyz, gray, u_desaturation) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(Desaturation, _Primitive);

    _createClass(Desaturation, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       * @return {Promise}
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_desaturation: { type: 'f', value: this._options.desaturation }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var desaturation = this._options.desaturation;

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var luminance = imageData.data[index] * 0.3 + imageData.data[index + 1] * 0.59 + imageData.data[index + 2] * 0.11;
            imageData.data[index] = luminance * (1 - desaturation) + imageData.data[index] * desaturation;
            imageData.data[index + 1] = luminance * (1 - desaturation) + imageData.data[index + 1] * desaturation;
            imageData.data[index + 2] = luminance * (1 - desaturation) + imageData.data[index + 2] * desaturation;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Desaturation;
  })(_primitive2['default']);

  exports['default'] = Desaturation;
  module.exports = exports['default'];

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * X400 primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.X400
   * @extends {ImglyKit.Filter.Primitive}
   */

  var X400 = (function (_Primitive) {
    function X400() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, X400);

      _get(Object.getPrototypeOf(X400.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        float gray = texColor.r * 0.3 + texColor.g * 0.3 + texColor.b * 0.3;\n        gray -= 0.2;\n        gray = clamp(gray, 0.0, 1.0);\n        gray += 0.15;\n        gray *= 1.4;\n        gl_FragColor = vec4(vec3(gray) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(X400, _Primitive);

    _createClass(X400, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader);
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var gray = imageData.data[index] / 255 * 0.3 + imageData.data[index + 1] / 255 * 0.3 + imageData.data[index + 2] / 255 * 0.3;
            gray -= 0.2;
            gray = Math.max(0, Math.min(1, gray));
            gray += 0.15;
            gray *= 1.4;

            gray *= 255;
            imageData.data[index] = gray;
            imageData.data[index + 1] = gray;
            imageData.data[index + 2] = gray;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return X400;
  })(_primitive2['default']);

  exports['default'] = X400;
  module.exports = exports['default'];

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Grayscale primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Grayscale
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Grayscale = (function (_Primitive) {
    function Grayscale() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Grayscale);

      _get(Object.getPrototypeOf(Grayscale.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      vec3 W = vec3(0.2125, 0.7154, 0.0721);\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        float luminance = dot(texColor.rgb, W);\n        gl_FragColor = vec4(vec3(luminance) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(Grayscale, _Primitive);

    _createClass(Grayscale, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       * @return {Promise}
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader);
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var luminance = imageData.data[index] * 0.2125 + imageData.data[index + 1] * 0.7154 + imageData.data[index + 2] * 0.0721;

            imageData.data[index] = luminance;
            imageData.data[index + 1] = luminance;
            imageData.data[index + 2] = luminance;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Grayscale;
  })(_primitive2['default']);

  exports['default'] = Grayscale;
  module.exports = exports['default'];

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Contrast primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Contrast
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Contrast = (function (_Primitive) {
    function Contrast() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Contrast);

      _get(Object.getPrototypeOf(Contrast.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        contrast: 1
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform float u_contrast;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        gl_FragColor = vec4(((texColor.rgb - vec3(0.5)) * u_contrast + vec3(0.5) * texColor.a), texColor.a);\n      }\n    ';
    }

    _inherits(Contrast, _Primitive);

    _createClass(Contrast, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], {
          uniforms: {
            u_contrast: { type: 'f', value: this._options.contrast }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var contrast = this._options.contrast;

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            imageData.data[index] = (imageData.data[index] - 127) * contrast + 127;
            imageData.data[index + 1] = (imageData.data[index + 1] - 127) * contrast + 127;
            imageData.data[index + 2] = (imageData.data[index + 2] - 127) * contrast + 127;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Contrast;
  })(_primitive2['default']);

  exports['default'] = Contrast;
  module.exports = exports['default'];

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  /**
   * Glow primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Glow
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Glow = (function (_Primitive) {
    function Glow() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Glow);

      _get(Object.getPrototypeOf(Glow.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        color: new _libColor2['default'](1, 1, 1)
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n\n      uniform vec3 u_color;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n\n        vec2 textureCoord = v_texCoord - vec2(0.5, 0.5);\n        textureCoord /= 0.75;\n\n        float d = 1.0 - dot(textureCoord, textureCoord);\n        d = clamp(d, 0.2, 1.0);\n        vec3 newColor = texColor.rgb * d * u_color.rgb;\n        gl_FragColor = vec4(vec3(newColor) * texColor.a, texColor.a);\n      }\n    ';
    }

    _inherits(Glow, _Primitive);

    _createClass(Glow, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       * @return {Promise}
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader, {
          uniforms: {
            u_color: { type: '3f', value: this._options.color.toRGBGLColor() }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       * @return {Promise}
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var color = this._options.color;

        var d;
        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            var x01 = x / canvas.width;
            var y01 = y / canvas.height;

            var nx = (x01 - 0.5) / 0.75;
            var ny = (y01 - 0.5) / 0.75;

            var scalarX = nx * nx;
            var scalarY = ny * ny;
            d = 1 - (scalarX + scalarY);
            d = Math.min(Math.max(d, 0.1), 1);

            imageData.data[index] = imageData.data[index] * (d * color.r);
            imageData.data[index + 1] = imageData.data[index + 1] * (d * color.g);
            imageData.data[index + 2] = imageData.data[index + 2] * (d * color.b);
            imageData.data[index + 3] = 255;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Glow;
  })(_primitive2['default']);

  exports['default'] = Glow;
  module.exports = exports['default'];

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Gobblin primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Gobblin
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Gobblin = (function (_Primitive) {
    function Gobblin() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Gobblin);

      _get(Object.getPrototypeOf(Gobblin.prototype), 'constructor', this).apply(this, args);

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        texColor.b = texColor.g * 0.33;\n        texColor.r = texColor.r * 0.6;\n        texColor.b += texColor.r * 0.33;\n        texColor.g = texColor.g * 0.7;\n        gl_FragColor = texColor;\n      }\n    ';
    }

    _inherits(Gobblin, _Primitive);

    _createClass(Gobblin, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       * @return {Promise}
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        renderer.runShader(null, this._fragmentShader);
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            imageData.data[index + 2] = imageData.data[index + 1] * 0.33;
            imageData.data[index] = imageData.data[index] * 0.6;
            imageData.data[index + 2] += imageData.data[index] * 0.33;
            imageData.data[index + 1] = imageData.data[index + 1] * 0.7;
            imageData.data[index + 3] = 255;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Gobblin;
  })(_primitive2['default']);

  exports['default'] = Gobblin;
  module.exports = exports['default'];

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _primitive = __webpack_require__(98);

  var _primitive2 = _interopRequireDefault(_primitive);

  /**
   * Brightness primitive
   * @class
   * @alias ImglyKit.Filter.Primitives.Brightness
   * @extends {ImglyKit.Filter.Primitive}
   */

  var Brightness = (function (_Primitive) {
    function Brightness() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _classCallCheck(this, Brightness);

      _get(Object.getPrototypeOf(Brightness.prototype), 'constructor', this).apply(this, args);

      this._options = _lodash2['default'].defaults(this._options, {
        brightness: 1
      });

      /**
       * The fragment shader for this primitive
       * @return {String}
       * @private
       */
      this._fragmentShader = '\n      precision mediump float;\n      varying vec2 v_texCoord;\n      uniform sampler2D u_image;\n      uniform float u_brightness;\n\n      void main() {\n        vec4 texColor = texture2D(u_image, v_texCoord);\n        gl_FragColor = vec4((texColor.rgb + vec3(u_brightness) * texColor.a), texColor.a);;\n      }\n    ';
    }

    _inherits(Brightness, _Primitive);

    _createClass(Brightness, [{
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {WebGLRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        if (!this._glslPrograms[renderer.id]) {
          this._glslPrograms[renderer.id] = renderer.setupGLSLProgram(null, this._fragmentShader);
        }

        renderer.runProgram(this._glslPrograms[renderer.id], {
          uniforms: {
            u_brightness: { type: 'f', value: this._options.brightness }
          }
        });
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        var canvas = renderer.getCanvas();
        var imageData = renderer.getContext().getImageData(0, 0, canvas.width, canvas.height);
        var brightness = this._options.brightness;

        for (var x = 0; x < canvas.width; x++) {
          for (var y = 0; y < canvas.height; y++) {
            var index = (canvas.width * y + x) * 4;

            imageData.data[index] = imageData.data[index] + brightness * 255;
            imageData.data[index + 1] = imageData.data[index + 1] + brightness * 255;
            imageData.data[index + 2] = imageData.data[index + 2] + brightness * 255;
          }
        }

        renderer.getContext().putImageData(imageData, 0, 0);
      }
    }]);

    return Brightness;
  })(_primitive2['default']);

  exports['default'] = Brightness;
  module.exports = exports['default'];

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

  /**
   * EventEmitter (ES6) from:
   * https://gist.github.com/bloodyowl/41b1de3388c626796eca
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var DEFAULT_MAX_LISTENERS = 12;

  function error(message) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    console.error.apply(console, [message].concat(args));
    console.trace();
  }

  var EventEmitter = (function () {
    function EventEmitter() {
      _classCallCheck(this, EventEmitter);

      this._maxListeners = DEFAULT_MAX_LISTENERS;
      this._events = {};
    }

    _createClass(EventEmitter, [{
      key: 'on',
      value: function on(type, listener) {
        if (typeof listener !== 'function') {
          throw new TypeError();
        }

        var listeners = this._events[type] || (this._events[type] = []);
        if (listeners.indexOf(listener) !== -1) {
          return this;
        }
        listeners.push(listener);

        if (listeners.length > this._maxListeners) {
          error('possible memory leak, added %i %s listeners,\n        use EventEmitter#setMaxListeners(number) if you\n        want to increase the limit (%i now)', listeners.length, type, this._maxListeners);
        }
        return this;
      }
    }, {
      key: 'once',
      value: function once(type, listener) {
        var eventsInstance = this;
        function onceCallback() {
          eventsInstance.off(type, onceCallback);
          listener.apply(null, arguments);
        }
        return this.on(type, onceCallback);
      }
    }, {
      key: 'off',
      value: function off(type) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        if (args.length === 0) {
          this._events[type] = null;
          return this;
        }

        var listener = args[0];
        if (typeof listener !== 'function') {
          throw new TypeError();
        }

        var listeners = this._events[type];
        if (!listeners || !listeners.length) {
          return this;
        }

        var indexOfListener = listeners.indexOf(listener);
        if (indexOfListener === -1) {
          return this;
        }

        listeners.splice(indexOfListener, 1);
        return this;
      }
    }, {
      key: 'emit',
      value: function emit(type) {
        for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }

        var listeners = this._events[type];
        if (!listeners || !listeners.length) {
          return false;
        }

        listeners.forEach(function (fn) {
          return fn.apply(null, args);
        });

        return true;
      }
    }, {
      key: 'setMaxListeners',
      value: function setMaxListeners(newMaxListeners) {
        if (parseInt(newMaxListeners, 10) !== newMaxListeners) {
          throw new TypeError();
        }

        this._maxListeners = newMaxListeners;
      }
    }]);

    return EventEmitter;
  })();

  exports['default'] = EventEmitter;
  module.exports = exports['default'];

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _filter = __webpack_require__(8);

  var _filter2 = _interopRequireDefault(_filter);

  /**
   * Identity Filter
   * @class
   * @alias ImglyKit.Filters.IdentityFilter
   * @extends {ImglyKit.Filter}
   */

  var IdentityFilter = (function (_Filter) {
    function IdentityFilter() {
      _classCallCheck(this, IdentityFilter);

      if (_Filter != null) {
        _Filter.apply(this, arguments);
      }
    }

    _inherits(IdentityFilter, _Filter);

    _createClass(IdentityFilter, [{
      key: 'render',

      /**
       * Renders the filter
       * @return {Promise}
       */
      value: function render() {}
    }, {
      key: 'name',

      /**
       * The name that is displayed in the UI
       * @type {String}
       */
      get: function () {
        return 'Original';
      }
    }], [{
      key: 'identifier',

      /**
       * A unique string that identifies this operation. Can be used to select
       * the active filter.
       * @type {String}
       */
      get: function () {
        return 'identity';
      }
    }]);

    return IdentityFilter;
  })(_filter2['default']);

  exports['default'] = IdentityFilter;
  module.exports = exports['default'];

  // This is the identity filter, it doesn't have any effect.

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

  "use strict";
  /*!

  StackBlur - a fast almost Gaussian Blur For Canvas

  Version:  0.5
  Author:   Mario Klingemann
  Contact:  mario@quasimondo.com
  Website:  http://www.quasimondo.com/StackBlurForCanvas
  Twitter:  @quasimondo

  In case you find this class useful - especially in commercial projects -
  I am not totally unhappy for a small donation to my PayPal account
  mario@quasimondo.de

  Or support me on flattr:
  https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

  Copyright (c) 2010 Mario Klingemann

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation
  files (the "Software"), to deal in the Software without
  restriction, including without limitation the rights to use,
  copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  */

  var mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];

  var shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];

  function stackBlurCanvasRGBA(imageData, top_x, top_y, width, height, radius) {
    if (isNaN(radius) || radius < 1) return;
    radius |= 0;

    var pixels = imageData.data;

    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;

    var div = radius + radius + 1;
    var widthMinus1 = width - 1;
    var heightMinus1 = height - 1;
    var radiusPlus1 = radius + 1;
    var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;

    var stackStart = new BlurStack();
    var stackEnd;
    var stack = stackStart;
    for (i = 1; i < div; i++) {
      stack = stack.next = new BlurStack();
      if (i == radiusPlus1) stackEnd = stack;
    }
    stack.next = stackStart;
    var stackIn = null;
    var stackOut = null;

    yw = yi = 0;

    var mul_sum = mul_table[radius];
    var shg_sum = shg_table[radius];

    for (y = 0; y < height; y++) {
      r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;

      r_out_sum = radiusPlus1 * (pr = pixels[yi]);
      g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
      b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
      a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);

      r_sum += sumFactor * pr;
      g_sum += sumFactor * pg;
      b_sum += sumFactor * pb;
      a_sum += sumFactor * pa;

      stack = stackStart;

      for (i = 0; i < radiusPlus1; i++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack.a = pa;
        stack = stack.next;
      }

      for (i = 1; i < radiusPlus1; i++) {
        p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
        r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
        g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
        b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
        a_sum += (stack.a = pa = pixels[p + 3]) * rbs;

        r_in_sum += pr;
        g_in_sum += pg;
        b_in_sum += pb;
        a_in_sum += pa;

        stack = stack.next;
      }

      stackIn = stackStart;
      stackOut = stackEnd;
      for (x = 0; x < width; x++) {
        pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;
        if (pa !== 0) {
          pa = 255 / pa;
          pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;
          pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;
          pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;
        } else {
          pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
        }

        r_sum -= r_out_sum;
        g_sum -= g_out_sum;
        b_sum -= b_out_sum;
        a_sum -= a_out_sum;

        r_out_sum -= stackIn.r;
        g_out_sum -= stackIn.g;
        b_out_sum -= stackIn.b;
        a_out_sum -= stackIn.a;

        p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;

        r_in_sum += stackIn.r = pixels[p];
        g_in_sum += stackIn.g = pixels[p + 1];
        b_in_sum += stackIn.b = pixels[p + 2];
        a_in_sum += stackIn.a = pixels[p + 3];

        r_sum += r_in_sum;
        g_sum += g_in_sum;
        b_sum += b_in_sum;
        a_sum += a_in_sum;

        stackIn = stackIn.next;

        r_out_sum += pr = stackOut.r;
        g_out_sum += pg = stackOut.g;
        b_out_sum += pb = stackOut.b;
        a_out_sum += pa = stackOut.a;

        r_in_sum -= pr;
        g_in_sum -= pg;
        b_in_sum -= pb;
        a_in_sum -= pa;

        stackOut = stackOut.next;

        yi += 4;
      }
      yw += width;
    }

    for (x = 0; x < width; x++) {
      g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;

      yi = x << 2;
      r_out_sum = radiusPlus1 * (pr = pixels[yi]);
      g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
      b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
      a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);

      r_sum += sumFactor * pr;
      g_sum += sumFactor * pg;
      b_sum += sumFactor * pb;
      a_sum += sumFactor * pa;

      stack = stackStart;

      for (i = 0; i < radiusPlus1; i++) {
        stack.r = pr;
        stack.g = pg;
        stack.b = pb;
        stack.a = pa;
        stack = stack.next;
      }

      yp = width;

      for (i = 1; i <= radius; i++) {
        yi = yp + x << 2;

        r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
        g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
        b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
        a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;

        r_in_sum += pr;
        g_in_sum += pg;
        b_in_sum += pb;
        a_in_sum += pa;

        stack = stack.next;

        if (i < heightMinus1) {
          yp += width;
        }
      }

      yi = x;
      stackIn = stackStart;
      stackOut = stackEnd;
      for (y = 0; y < height; y++) {
        p = yi << 2;
        pixels[p + 3] = pa = a_sum * mul_sum >> shg_sum;
        if (pa > 0) {
          pa = 255 / pa;
          pixels[p] = (r_sum * mul_sum >> shg_sum) * pa;
          pixels[p + 1] = (g_sum * mul_sum >> shg_sum) * pa;
          pixels[p + 2] = (b_sum * mul_sum >> shg_sum) * pa;
        } else {
          pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
        }

        r_sum -= r_out_sum;
        g_sum -= g_out_sum;
        b_sum -= b_out_sum;
        a_sum -= a_out_sum;

        r_out_sum -= stackIn.r;
        g_out_sum -= stackIn.g;
        b_out_sum -= stackIn.b;
        a_out_sum -= stackIn.a;

        p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;

        r_sum += r_in_sum += stackIn.r = pixels[p];
        g_sum += g_in_sum += stackIn.g = pixels[p + 1];
        b_sum += b_in_sum += stackIn.b = pixels[p + 2];
        a_sum += a_in_sum += stackIn.a = pixels[p + 3];

        stackIn = stackIn.next;

        r_out_sum += pr = stackOut.r;
        g_out_sum += pg = stackOut.g;
        b_out_sum += pb = stackOut.b;
        a_out_sum += pa = stackOut.a;

        r_in_sum -= pr;
        g_in_sum -= pg;
        b_in_sum -= pb;
        a_in_sum -= pa;

        stackOut = stackOut.next;

        yi += width;
      }
    }
  }

  function BlurStack() {
    this.r = 0;
    this.g = 0;
    this.b = 0;
    this.a = 0;
    this.next = null;
  }

  module.exports = {
    stackBlurCanvasRGBA: stackBlurCanvasRGBA
  };

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;

  function drainQueue() {
      if (draining) {
          return;
      }
      draining = true;
      var currentQueue;
      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          var i = -1;
          while (++i < len) {
              currentQueue[i]();
          }
          len = queue.length;
      }
      draining = false;
  }
  process.nextTick = function (fun) {
      queue.push(fun);
      if (!draining) {
          setTimeout(drainQueue, 0);
      }
  };

  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  // TODO(shtylman)
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

  module.exports = function(module) {
    if(!module.webpackPolyfill) {
      module.deprecate = function() {};
      module.paths = [];
      // module.parent = undefined by default
      module.children = [];
      module.webpackPolyfill = 1;
    }
    return module;
  }


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _dot = __webpack_require__(100);

  var _dot2 = _interopRequireDefault(_dot);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _helpers = __webpack_require__(99);

  var _helpers2 = _interopRequireDefault(_helpers);

  var BaseUI = (function (_EventEmitter) {
    function BaseUI(kit, options) {
      _classCallCheck(this, BaseUI);

      _get(Object.getPrototypeOf(BaseUI.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this._options = options;
      this._options.ui = this._options.ui || {};
      this._operations = [];
      this._helpers = new _helpers2['default'](this.kit, this, options);
      this.selectOperations(null);
    }

    _inherits(BaseUI, _EventEmitter);

    _createClass(BaseUI, [{
      key: 'run',

      /**
       * Prepares the UI for use
       */
      value: function run() {
        this._attach();
      }
    }, {
      key: '_attach',

      /**
       * Renders and attaches the UI HTML
       * @private
       */
      value: function _attach() {
        if (this._options.container === null) {
          throw new Error('BaseUI#attach: No container set.');
        }

        var html = this._render();
        this._options.container.innerHTML = html;

        // Container has to be position: relative
        this._options.container.style.position = 'relative';
      }
    }, {
      key: '_render',

      /**
       * Renders the template
       * @private
       */
      value: function _render() {
        if (typeof this._template === 'undefined') {
          throw new Error('BaseUI#_render: No template set.');
        }

        var renderFn = _dot2['default'].template(this._template);
        return renderFn(this.context);
      }
    }, {
      key: 'selectOperations',

      /**
       * Selects the enabled operations
       * @param {ImglyKit.Selector}
       */
      value: function selectOperations(selector) {
        var registeredOperations = this._kit.registeredOperations;

        var operationIdentifiers = Object.keys(registeredOperations);

        var selectedOperations = _libUtils2['default'].select(operationIdentifiers, selector);
        this._operations = selectedOperations.map(function (identifier) {
          return registeredOperations[identifier];
        });
      }
    }, {
      key: 'addOperation',

      /**
       * Adds the given operation to the available operations
       * @param {Operation} operation
       */
      value: function addOperation(operation) {
        this._operations.push(operation);
      }
    }, {
      key: 'isOperationSelected',

      /**
       * Checks whether the operation with the given identifier is selected
       * @param {String} identifier
       * @returns {Boolean}
       */
      value: function isOperationSelected(identifier) {
        var operationIdentifiers = this._operations.map(function (operation) {
          return operation.prototype.identifier;
        });
        return operationIdentifiers.indexOf(identifier) !== -1;
      }
    }, {
      key: 'identifier',

      /**
       * A unique string that represents this UI
       * @type {String}
       */
      get: function () {
        return null;
      }
    }, {
      key: 'context',

      /**
       * The data that is passed to the template renderer
       * @type {Object}
       */
      get: function () {
        return {
          operations: this._operations,
          helpers: this._helpers,
          options: this._options
        };
      }
    }, {
      key: 'container',

      /**
       * The DOM container
       * @type {DOMElement}
       */
      get: function () {
        return this._options.container;
      }
    }, {
      key: 'operations',

      /**
       * The selected / active operations
       * @type {Array.<ImglyKit.Operation>}
       */
      get: function () {
        return this._operations;
      }
    }, {
      key: 'options',

      /**
       * The options
       * @type {Object}
       */
      get: function () {
        return this._options;
      }
    }, {
      key: 'canvas',

      /**
       * The canvas object
       * @type {Canvas}
       */
      get: function () {
        return this._canvas;
      }
    }, {
      key: 'helpers',

      /**
       * The helpers
       * @type {Helpers}
       */
      get: function () {
        return this._helpers;
      }
    }, {
      key: 'image',

      /**
       * The image
       * @type {Image}
       */
      get: function () {
        return this._options.image;
      }
    }]);

    return BaseUI;
  })(_libEventEmitter2['default']);

  exports['default'] = BaseUI;
  module.exports = exports['default'];

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _renderersWebglRenderer = __webpack_require__(56);

  var _renderersWebglRenderer2 = _interopRequireDefault(_renderersWebglRenderer);

  var _renderersCanvasRenderer = __webpack_require__(55);

  var _renderersCanvasRenderer2 = _interopRequireDefault(_renderersCanvasRenderer);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _vendorPromise = __webpack_require__(58);

  var _vendorPromise2 = _interopRequireDefault(_vendorPromise);

  var Canvas = (function (_EventEmitter) {
    function Canvas(kit, ui, options) {
      _classCallCheck(this, Canvas);

      _get(Object.getPrototypeOf(Canvas.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this._ui = ui;
      this._options = options;

      var container = this._ui.container;

      this._canvasContainer = container.querySelector('.imglykit-canvas-container');
      this._canvasInnerContainer = container.querySelector('.imglykit-canvas-inner-container');
      this._canvas = this._canvasContainer.querySelector('canvas');
      this._image = this._options.image;
      this._roundZoomBy = 0.1;
      this._isFirstRender = true;

      // Mouse event callbacks bound to the class context
      this._dragOnMousedown = this._dragOnMousedown.bind(this);
      this._dragOnMousemove = this._dragOnMousemove.bind(this);
      this._dragOnMouseup = this._dragOnMouseup.bind(this);
    }

    _inherits(Canvas, _EventEmitter);

    _createClass(Canvas, [{
      key: 'run',

      /**
       * Initializes the renderer, sets the zoom level and initially
       * renders the operations stack
       */
      value: function run() {
        this._initRenderer();

        // Calculate the initial zoom level
        this._zoomLevel = this._getInitialZoomLevel();
        this._initialZoomLevel = this._zoomLevel;
        this._isInitialZoom = true;
        this._size = null;

        this.render();
        this._centerCanvas();
        this._handleDrag();
      }
    }, {
      key: 'render',

      /**
       * Renders the current operations stack
       */
      value: function render() {
        var _this = this;

        this._initialZoomLevel = this._getInitialZoomLevel();

        // Reset the zoom level to initial
        // Some operations change the texture resolution (e.g. rotation)
        // If we're on initial zoom level, we still want to make the canvas
        // fit into the container. Find the new initial zoom level and set it.
        if (this._isInitialZoom) {
          this.setZoomLevel(this._initialZoomLevel, false);
        }

        // Calculate the initial size
        var imageSize = new _libMathVector22['default'](this._image.width, this._image.height);
        var initialSize = imageSize.multiply(this._zoomLevel);
        this._setCanvasSize(initialSize);

        // Reset framebuffers
        this._renderer.reset();

        // Run the operations stack
        var stack = this.sanitizedStack;
        this._updateStackDirtyStates(stack);

        var validationPromises = [];
        for (var i = 0; i < stack.length; i++) {
          var operation = stack[i];
          validationPromises.push(operation.validateSettings());
        }

        return _vendorPromise2['default'].all(validationPromises).then(function () {
          // When using WebGL, resize the image to max texture size if necessary
          if (_this._isFirstRender && _this._renderer.identifier === 'webgl') {

            if (_this._image.width > _this._renderer.maxTextureSize || _this._image.height > _this._renderer.maxTextureSize) {
              _this._ui.displayLoadingMessage('Resizing...');
              return new _vendorPromise2['default'](function (resolve, reject) {
                setTimeout(function () {
                  _this._renderer.prepareImage(_this._image).then(function (image) {
                    _this._ui.hideLoadingMessage();
                    _this._options.image = image;
                    _this._image = _this._options.image;
                    resolve();
                  })['catch'](function (e) {
                    reject(e);
                  });
                }, 100);
              });
            }
          }
        }).then(function () {
          // On first render, draw the image to the input texture
          if (_this._isFirstRender || _this._renderer.constructor.identifier === 'canvas') {
            _this._isFirstRender = false;
            return _this._renderer.drawImage(_this._image);
          }
        })
        // Render the operations stack
        .then(function () {
          var promises = [];
          for (var i = 0; i < stack.length; i++) {
            var operation = stack[i];
            promises.push(operation.render(_this._renderer));
          }
          return _vendorPromise2['default'].all(promises);
        })
        // Render the final image
        .then(function () {
          return _this._renderer.renderFinal();
        })
        // Update the margins and boundaries
        .then(function () {
          _this._storeCanvasSize();
          _this._updateContainerSize();
          _this._updateCanvasMargins();
          _this._applyBoundaries();
        })['catch'](function (e) {
          console.log(e);
        });
      }
    }, {
      key: 'setImage',

      /**
       * Sets the image to the given one
       * @param {Image} image
       */
      value: function setImage(image) {
        this._image = image;
        this.reset();
        this.render();
        this._centerCanvas();
      }
    }, {
      key: 'zoomIn',

      /**
       * Increase zoom level
       */
      value: function zoomIn() {
        this._isInitialZoom = false;

        var zoomLevel = Math.round(this._zoomLevel * 100);
        var roundZoomBy = Math.round(this._roundZoomBy * 100);
        var initialZoomLevel = Math.round(this._initialZoomLevel * 100);

        // Round up if needed
        if (zoomLevel % roundZoomBy !== 0) {
          zoomLevel = Math.ceil(zoomLevel / roundZoomBy) * roundZoomBy;
        } else {
          zoomLevel += roundZoomBy;
        }

        zoomLevel = Math.min(initialZoomLevel * 2, zoomLevel);
        return this.setZoomLevel(zoomLevel / 100);
      }
    }, {
      key: 'zoomOut',

      /**
       * Decrease zoom level
       */
      value: function zoomOut() {
        this._isInitialZoom = false;

        var zoomLevel = Math.round(this._zoomLevel * 100);
        var roundZoomBy = Math.round(this._roundZoomBy * 100);
        var initialZoomLevel = Math.round(this._initialZoomLevel * 100);

        // Round up if needed
        if (zoomLevel % roundZoomBy !== 0) {
          zoomLevel = Math.floor(zoomLevel / roundZoomBy) * roundZoomBy;
        } else {
          zoomLevel -= roundZoomBy;
        }

        zoomLevel = Math.max(initialZoomLevel, zoomLevel);
        return this.setZoomLevel(zoomLevel / 100);
      }
    }, {
      key: '_setCanvasSize',

      /**
       * Resizes and positions the canvas
       * @param {Vector2} [size]
       * @private
       */
      value: function _setCanvasSize(size) {
        size = size || new _libMathVector22['default'](this._canvas.width, this._canvas.height);

        this._canvas.width = size.x;
        this._canvas.height = size.y;

        this._storeCanvasSize();
        this._updateContainerSize();
      }
    }, {
      key: '_updateContainerSize',

      /**
       * Updates the canvas container size
       * @private
       */
      value: function _updateContainerSize() {
        var size = this._size;
        this._canvasInnerContainer.style.width = '' + size.x + 'px';
        this._canvasInnerContainer.style.height = '' + size.y + 'px';
      }
    }, {
      key: '_storeCanvasSize',

      /**
       * Remembers the canvas size
       * @comment This was introduced because the canvas size was not always
       *          correct due to some race conditions. Now that promises work
       *          properly, do we still need this?
       * @private
       */
      value: function _storeCanvasSize() {
        this._size = new _libMathVector22['default'](this._canvas.width, this._canvas.height);
      }
    }, {
      key: '_centerCanvas',

      /**
       * Centers the canvas inside the container
       * @private
       */
      value: function _centerCanvas() {
        var position = this._maxSize.divide(2);

        this._canvasInnerContainer.style.left = '' + position.x + 'px';
        this._canvasInnerContainer.style.top = '' + position.y + 'px';

        this._updateCanvasMargins();
      }
    }, {
      key: '_updateCanvasMargins',

      /**
       * Updates the canvas margins so that they are the negative half width
       * and height of the canvas
       * @private
       */
      value: function _updateCanvasMargins() {
        var canvasSize = new _libMathVector22['default'](this._canvas.width, this._canvas.height);
        var margin = canvasSize.divide(2).multiply(-1);
        this._canvasInnerContainer.style.marginLeft = '' + margin.x + 'px';
        this._canvasInnerContainer.style.marginTop = '' + margin.y + 'px';
      }
    }, {
      key: 'setZoomLevel',

      /**
       * Sets the zoom level, re-renders the canvas and
       * repositions it
       * @param {Number} zoomLevel
       * @param {Boolean} render
       * @private
       */
      value: function setZoomLevel(zoomLevel) {
        var _this2 = this;

        var render = arguments[1] === undefined ? true : arguments[1];

        this._zoomLevel = zoomLevel;
        if (render) {
          this.setAllOperationsToDirty();
          return this.render().then(function () {
            _this2._updateCanvasMargins();
            _this2._applyBoundaries();
            _this2.emit('zoom');
          });
        } else {
          this._updateCanvasMargins();
          this._applyBoundaries();
          this.emit('zoom');
        }
      }
    }, {
      key: 'setAllOperationsToDirty',

      /**
       * Sets all operations to dirty
       */
      value: function setAllOperationsToDirty() {
        var operationsStack = this._kit.operationsStack;

        for (var i = 0; i < operationsStack.length; i++) {
          var operation = operationsStack[i];
          if (!operation) continue;
          operation.dirty = true;
        }
      }
    }, {
      key: '_getInitialZoomLevel',

      /**
       * Gets the initial zoom level so that the image fits the maximum
       * canvas size
       * @private
       */
      value: function _getInitialZoomLevel() {
        var inputSize = new _libMathVector22['default'](this._image.width, this._image.height);

        var cropOperation = this._ui.operations.crop;
        var rotationOperation = this._ui.operations.rotation;

        var cropSize = undefined,
            croppedSize = undefined,
            finalSize = undefined,
            initialSize = undefined;

        if (cropOperation) {
          cropSize = cropOperation.getEnd().clone().subtract(cropOperation.getStart());
        } else {
          cropSize = new _libMathVector22['default'](1, 1);
        }

        croppedSize = inputSize.clone().multiply(cropSize);

        // Has the image been rotated?
        if (rotationOperation && rotationOperation.getDegrees() % 180 !== 0) {
          var tempX = croppedSize.x;
          croppedSize.x = croppedSize.y;
          croppedSize.y = tempX;
        }

        finalSize = this._resizeVectorToFit(croppedSize);

        // Rotate back to be able to find the final size
        if (rotationOperation && rotationOperation.getDegrees() % 180 !== 0) {
          var tempX = finalSize.x;
          finalSize.x = finalSize.y;
          finalSize.y = tempX;
        }

        initialSize = finalSize.clone().divide(cropSize);
        return initialSize.x / inputSize.x;
      }
    }, {
      key: '_resizeVectorToFit',

      /**
       * Resizes the given two-dimensional vector so that it fits
       * the maximum size.
       * @private
       */
      value: function _resizeVectorToFit(size) {
        var maxSize = this._maxSize;
        var scale = Math.min(maxSize.x / size.x, maxSize.y / size.y);

        var newSize = size.clone().multiply(scale);

        return newSize;
      }
    }, {
      key: '_initRenderer',

      /**
       * Initializes the renderer
       * @private
       */
      value: function _initRenderer() {
        var _this3 = this;

        if (_renderersWebglRenderer2['default'].isSupported() && this._options.renderer !== 'canvas') {
          this._renderer = new _renderersWebglRenderer2['default'](null, this._canvas);
          this._webglEnabled = true;
        } else if (_renderersCanvasRenderer2['default'].isSupported()) {
          this._renderer = new _renderersCanvasRenderer2['default'](null, this._canvas);
          this._webglEnabled = false;
        }

        if (this._renderer === null) {
          throw new Error('Neither Canvas nor WebGL renderer are supported.');
        }

        this._renderer.on('new-canvas', function (canvas) {
          _this3._setCanvas(canvas);
        });
      }
    }, {
      key: '_setCanvas',

      /**
       * Replaces the canvas with the given canvas, updates margins etc
       * @param {DOMElement} canvas
       * @private
       */
      value: function _setCanvas(canvas) {
        var canvasParent = this._canvas.parentNode;
        canvasParent.removeChild(this._canvas);
        this._canvas = canvas;
        canvasParent.appendChild(this._canvas);

        this._updateCanvasMargins();
        this._applyBoundaries();
        this._updateContainerSize();
      }
    }, {
      key: '_handleDrag',

      /**
       * Handles the dragging
       * @private
       */
      value: function _handleDrag() {
        this._canvas.addEventListener('mousedown', this._dragOnMousedown);
        this._canvas.addEventListener('touchstart', this._dragOnMousedown);
      }
    }, {
      key: '_dragOnMousedown',

      /**
       * Gets called when the user started touching / clicking the canvas
       * @param {Event} e
       * @private
       */
      value: function _dragOnMousedown(e) {
        if (e.type === 'mousedown' && e.button !== 0) return;
        e.preventDefault();

        var x = e.pageX,
            y = e.pageY;
        if (e.type === 'touchstart') {
          x = e.touches[0].pageX;
          y = e.touches[0].pageY;
        }

        var canvasX = parseInt(this._canvasInnerContainer.style.left, 10);
        var canvasY = parseInt(this._canvasInnerContainer.style.top, 10);

        document.addEventListener('mousemove', this._dragOnMousemove);
        document.addEventListener('touchmove', this._dragOnMousemove);

        document.addEventListener('mouseup', this._dragOnMouseup);
        document.addEventListener('touchend', this._dragOnMouseup);

        // Remember initial position
        this._initialMousePosition = new _libMathVector22['default'](x, y);
        this._initialCanvasPosition = new _libMathVector22['default'](canvasX, canvasY);
      }
    }, {
      key: '_dragOnMousemove',

      /**
       * Gets called when the user drags the canvas
       * @param {Event} e
       * @private
       */
      value: function _dragOnMousemove(e) {
        e.preventDefault();

        var x = e.pageX,
            y = e.pageY;
        if (e.type === 'touchmove') {
          x = e.touches[0].pageX;
          y = e.touches[0].pageY;
        }

        var newMousePosition = new _libMathVector22['default'](x, y);
        var mouseDiff = newMousePosition.clone().subtract(this._initialMousePosition);
        var newPosition = this._initialCanvasPosition.clone().add(mouseDiff);

        this._canvasInnerContainer.style.left = '' + newPosition.x + 'px';
        this._canvasInnerContainer.style.top = '' + newPosition.y + 'px';

        this._applyBoundaries();
      }
    }, {
      key: '_applyBoundaries',

      /**
       * Makes sure the canvas positions are within the boundaries
       * @private
       */
      value: function _applyBoundaries() {
        var x = parseInt(this._canvasInnerContainer.style.left, 10);
        var y = parseInt(this._canvasInnerContainer.style.top, 10);
        var canvasPosition = new _libMathVector22['default'](x, y);

        // Boundaries
        var boundaries = this._boundaries;
        canvasPosition.x = Math.min(boundaries.max.x, Math.max(boundaries.min.x, canvasPosition.x));
        canvasPosition.y = Math.min(boundaries.max.y, Math.max(boundaries.min.y, canvasPosition.y));

        this._canvasInnerContainer.style.left = '' + canvasPosition.x + 'px';
        this._canvasInnerContainer.style.top = '' + canvasPosition.y + 'px';
      }
    }, {
      key: '_dragOnMouseup',

      /**
       * Gets called when the user stopped dragging the canvsa
       * @param {Event} e
       * @private
       */
      value: function _dragOnMouseup(e) {
        e.preventDefault();

        document.removeEventListener('mousemove', this._dragOnMousemove);
        document.removeEventListener('touchmove', this._dragOnMousemove);

        document.removeEventListener('mouseup', this._dragOnMouseup);
        document.removeEventListener('touchend', this._dragOnMouseup);
      }
    }, {
      key: '_updateStackDirtyStates',

      /**
       * Find the first dirty operation of the stack and sets all following
       * operations to dirty
       * @param {Array.<Operation>} stack
       * @private
       */
      value: function _updateStackDirtyStates(stack) {
        var dirtyFound = false;
        for (var i = 0; i < stack.length; i++) {
          var operation = stack[i];
          if (!operation) continue;
          if (operation.dirty) {
            dirtyFound = true;
          }

          if (dirtyFound) {
            operation.dirty = true;
          }
        }
      }
    }, {
      key: 'zoomToFit',

      /**
       * Zooms the canvas so that it fits the container
       * @param {Boolean} render
       */
      value: function zoomToFit() {
        var render = arguments[0] === undefined ? true : arguments[0];

        var initialZoomLevel = this._getInitialZoomLevel();
        return this.setZoomLevel(initialZoomLevel, render);
      }
    }, {
      key: 'reset',

      /**
       * Resets the renderer
       */
      value: function reset() {
        this._renderer.reset(true);
        this._kit.operationsStack = [];
        this._isFirstRender = true;
      }
    }, {
      key: '_boundaries',

      /**
       * The position boundaries for the canvas inside the container
       * @type {Object.<Vector2>}
       * @private
       */
      get: function () {
        var canvasSize = new _libMathVector22['default'](this._canvas.width, this._canvas.height);
        var maxSize = this._maxSize;

        var diff = canvasSize.clone().subtract(maxSize).multiply(-1);

        var boundaries = {
          min: new _libMathVector22['default'](diff.x, diff.y),
          max: new _libMathVector22['default'](0, 0)
        };

        if (canvasSize.x < maxSize.x) {
          boundaries.min.x = diff.x / 2;
          boundaries.max.x = diff.x / 2;
        }

        if (canvasSize.y < maxSize.y) {
          boundaries.min.y = diff.y / 2;
          boundaries.max.y = diff.y / 2;
        }

        var halfCanvasSize = canvasSize.clone().divide(2);
        boundaries.min.add(halfCanvasSize);
        boundaries.max.add(halfCanvasSize);
        return boundaries;
      }
    }, {
      key: '_maxSize',

      /**
       * The maximum canvas size
       * @private
       */
      get: function () {
        var computedStyle = window.getComputedStyle(this._canvasContainer);
        var size = new _libMathVector22['default'](this._canvasContainer.offsetWidth, this._canvasContainer.offsetHeight);

        var paddingX = parseInt(computedStyle.getPropertyValue('padding-left'), 10);
        paddingX += parseInt(computedStyle.getPropertyValue('padding-right'), 10);

        var paddingY = parseInt(computedStyle.getPropertyValue('padding-top'), 10);
        paddingY += parseInt(computedStyle.getPropertyValue('padding-bottom'), 10);

        size.x -= paddingX;
        size.y -= paddingY;

        var controlsHeight = this._ui._controlsContainer.offsetHeight;
        size.y -= controlsHeight;

        return size;
      }
    }, {
      key: 'sanitizedStack',

      /**
       * Returns the operations stack without falsy values
       * @type {Array.<Operation>}
       */
      get: function () {
        var sanitizedStack = [];
        for (var i = 0; i < this._kit.operationsStack.length; i++) {
          var operation = this._kit.operationsStack[i];
          if (!operation) continue;
          sanitizedStack.push(operation);
        }
        return sanitizedStack;
      }
    }, {
      key: 'zoomLevel',

      /**
       * The current zoom level
       * @type {Number}
       */
      get: function () {
        return this._zoomLevel;
      }
    }, {
      key: 'size',

      /**
       * The canvas size in pixels
       * @type {Vector2}
       */
      get: function () {
        return this._size;
      }
    }]);

    return Canvas;
  })(_libEventEmitter2['default']);

  exports['default'] = Canvas;
  module.exports = exports['default'];
  // will be redirected to top controls
  // will be redirected to top controls

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var FileLoader = (function (_EventEmitter) {
    function FileLoader(kit, ui) {
      _classCallCheck(this, FileLoader);

      _get(Object.getPrototypeOf(FileLoader.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this._ui = ui;

      // http://stackoverflow.com/questions/7110353/html5-dragleave-fired-when-hovering-a-child-element
      this._dragCounter = 0;

      this._container = this._ui.container.querySelector('.imglykit-drop-area-container');

      this._onDropAreaDragEnter = this._onDropAreaDragEnter.bind(this);
      this._onDropAreaDragOver = this._onDropAreaDragOver.bind(this);
      this._onDropAreaDragLeave = this._onDropAreaDragLeave.bind(this);
      this._onDropAreaDrop = this._onDropAreaDrop.bind(this);
      this._onDropAreaClick = this._onDropAreaClick.bind(this);
      this._onFileInputChange = this._onFileInputChange.bind(this);

      this._hiddenInputField = this._ui.container.querySelector('.imglykit-drop-area .imglykit-drop-area-hidden-input');
      this._hiddenInputField.addEventListener('change', this._onFileInputChange);

      this._handleDropArea();
      if (this._ui.options.image) {
        this.removeDOM();
      }
    }

    _inherits(FileLoader, _EventEmitter);

    _createClass(FileLoader, [{
      key: 'openFileDialog',

      /**
       * Opens the file dialog
       */
      value: function openFileDialog() {
        this._hiddenInputField.click();
      }
    }, {
      key: '_handleDropArea',

      /**
       * Finds the drop area, adds event listeners
       * @private
       */
      value: function _handleDropArea() {
        var container = this._ui.container;

        this._dropArea = container.querySelector('.imglykit-drop-area');
        this._dropArea.addEventListener('dragenter', this._onDropAreaDragEnter);
        this._dropArea.addEventListener('dragover', this._onDropAreaDragOver);
        this._dropArea.addEventListener('dragleave', this._onDropAreaDragLeave);
        this._dropArea.addEventListener('drop', this._onDropAreaDrop);
        this._dropArea.addEventListener('dragdrop', this._onDropAreaDrop);
        this._dropArea.addEventListener('click', this._onDropAreaClick);
      }
    }, {
      key: '_onDropAreaClick',

      /**
       * Gets called when the user clicks on the drop area. Opens the file
       * dialog by triggering a click on the hidden input field
       * @param {Event} e
       * @private
       */
      value: function _onDropAreaClick() {
        this.openFileDialog();
      }
    }, {
      key: '_onDropAreaDragEnter',

      /**
       * Gets called when the user drags a file over the drop area
       * @param {Event} e
       * @private
       */
      value: function _onDropAreaDragEnter(e) {
        e.preventDefault();

        this._dragCounter++;
        this._dropArea.classList.add('imglykit-drop-area-active');
      }
    }, {
      key: '_onDropAreaDragOver',

      /**
       * We need to cancel this event to get a drop event
       * @param {Event} e
       * @private
       */
      value: function _onDropAreaDragOver(e) {
        e.preventDefault();
      }
    }, {
      key: '_onDropAreaDragLeave',

      /**
       * Gets called when the user does no longer drag a file over the drop area
       * @param {Event} e
       * @private
       */
      value: function _onDropAreaDragLeave(e) {
        e.preventDefault();

        this._dragCounter--;

        if (this._dragCounter === 0) {
          this._dropArea.classList.remove('imglykit-drop-area-active');
        }
      }
    }, {
      key: '_onDropAreaDrop',

      /**
       * Gets called when the user drops a file on the drop area
       * @param {Event} e
       * @private
       */
      value: function _onDropAreaDrop(e) {
        e.stopPropagation();
        e.preventDefault();
        e.returnValue = false;

        this._dropArea.classList.remove('imglykit-drop-area-active');

        if (!e.dataTransfer) return;

        this._handleFile(e.dataTransfer.files[0]);
      }
    }, {
      key: '_onFileInputChange',

      /**
       * Gets called when the user selected a file
       * @param {Event} e
       * @private
       */
      value: function _onFileInputChange() {
        this._handleFile(this._hiddenInputField.files[0]);
      }
    }, {
      key: '_handleFile',

      /**
       * Gets called when the user selected a file. Emits a `file` event.
       * @param {File} file
       * @private
       */
      value: function _handleFile(file) {
        this.emit('file', file);
      }
    }, {
      key: 'removeDOM',

      /**
       * Removes event listeners and removes the container form the dom
       */
      value: function removeDOM() {
        this._dropArea.removeEventListener('dragenter', this._onDropAreaDragEnter);
        this._dropArea.removeEventListener('dragover', this._onDropAreaDragOver);
        this._dropArea.removeEventListener('dragleave', this._onDropAreaDragLeave);
        this._dropArea.removeEventListener('drop', this._onDropAreaDrop);
        this._dropArea.removeEventListener('dragdrop', this._onDropAreaDrop);
        this._dropArea.removeEventListener('click', this._onDropAreaClick);

        if (this._container) {
          this._container.style.display = 'none';
        }
      }
    }]);

    return FileLoader;
  })(_libEventEmitter2['default']);

  exports['default'] = FileLoader;
  module.exports = exports['default'];

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var TopControls = (function (_EventEmitter) {
    function TopControls(kit, ui) {
      _classCallCheck(this, TopControls);

      _get(Object.getPrototypeOf(TopControls.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this._ui = ui;
      this.init();
    }

    _inherits(TopControls, _EventEmitter);

    _createClass(TopControls, [{
      key: 'init',

      /**
       * Initializes the controls
       */
      value: function init() {
        this._canvas = this._ui.canvas;
      }
    }, {
      key: 'run',

      /**
       * Initializes the controls
       */
      value: function run() {
        var container = this._ui.container;

        this._rightControls = container.querySelector('.imglykit-top-controls-right');
        this._leftControls = container.querySelector('.imglykit-top-controls-left');

        this._undoButton = container.querySelector('.imglykit-undo');
        this._zoomIn = container.querySelector('.imglykit-zoom-in');
        this._zoomOut = container.querySelector('.imglykit-zoom-out');
        this._zoomLevel = container.querySelector('.imglykit-zoom-level-num');
        this._newButton = container.querySelector('.imglykit-new');
        this._exportButton = container.querySelector('.imglykit-export');
        this._handleZoom();
        this._handleUndo();
        this._handleNew();
        this._handleExport();
      }
    }, {
      key: '_handleZoom',

      /**
       * Handles the zoom controls
       * @private
       */
      value: function _handleZoom() {
        this._zoomIn.addEventListener('click', this._onZoomInClick.bind(this));
        this._zoomOut.addEventListener('click', this._onZoomOutClick.bind(this));
      }
    }, {
      key: '_handleUndo',

      /**
       * Handles the undo control
       * @private
       */
      value: function _handleUndo() {
        this._undoButton.addEventListener('click', this._undo.bind(this));
        this._undo();
      }
    }, {
      key: '_handleNew',

      /**
       * Handles the new button
       * @private
       */
      value: function _handleNew() {
        if (!this._newButton) return;

        this._newButton.addEventListener('click', this._onNewClick.bind(this));
      }
    }, {
      key: '_handleExport',

      /**
       * Handles the export button
       * @private
       */
      value: function _handleExport() {
        if (!this._exportButton) return;

        this._exportButton.addEventListener('click', this._onExportClick.bind(this));
      }
    }, {
      key: '_onNewClick',

      /**
       * Gets called when the user clicks the new button
       * @param {Event} e
       * @private
       */
      value: function _onNewClick(e) {
        e.preventDefault();

        var fileLoader = this._ui.fileLoader;

        fileLoader.openFileDialog();
      }
    }, {
      key: '_onExportClick',

      /**
       * Gets called when the user clicks the export button
       * @param {Event} e
       * @private
       */
      value: function _onExportClick(e) {
        e.preventDefault();

        this.emit('export');
      }
    }, {
      key: '_undo',

      /**
       * Gets called when the user clicks the undo button
       * @private
       */
      value: function _undo() {
        this.emit('undo');
      }
    }, {
      key: 'updateUndoButton',

      /**
       * Updates the undo button visible state
       */
      value: function updateUndoButton() {
        var history = this._ui.history;

        if (history.length === 0) {
          this._undoButton.style.display = 'none';
        } else {
          this._undoButton.style.display = 'inline-block';
        }
      }
    }, {
      key: 'updateExportButton',

      /**
       * Updates the export button visible state
       */
      value: function updateExportButton() {
        if (!this._exportButton) return;

        var image = this._ui.image;

        if (image) {
          this._exportButton.style.display = 'inline-block';
        } else {
          this._exportButton.style.display = 'none';
        }
      }
    }, {
      key: '_onZoomInClick',

      /**
       * Gets called when the user clicked the zoom in button
       * @param {Event}
       * @private
       */
      value: function _onZoomInClick(e) {
        e.preventDefault();

        this.emit('zoom-in');
        this.updateZoomLevel();
      }
    }, {
      key: '_onZoomOutClick',

      /**
       * Gets called when the user clicked the zoom out button
       * @param {Event}
       * @private
       */
      value: function _onZoomOutClick(e) {
        e.preventDefault();

        this.emit('zoom-out');
        this.updateZoomLevel();
      }
    }, {
      key: 'showZoom',

      /**
       * Shows the zoom control
       */
      value: function showZoom() {
        this._rightControls.style.display = 'inline-block';
      }
    }, {
      key: 'hideZoom',

      /**
       * Hides the zoom control
       */
      value: function hideZoom() {
        this._rightControls.style.display = 'none';
      }
    }, {
      key: 'updateZoomLevel',

      /**
       * Updates the zoom level display
       */
      value: function updateZoomLevel() {
        var zoomLevel = this._canvas.zoomLevel;

        this._zoomLevel.innerHTML = Math.round(zoomLevel * 100);
      }
    }]);

    return TopControls;
  })(_libEventEmitter2['default']);

  exports['default'] = TopControls;
  module.exports = exports['default'];

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var maxScrollbarWidth = 18;

  /**
   * Our custom scroll bar
   */

  var Scrollbar = (function () {
    /**
     * @param {DOMElement} container
     */

    function Scrollbar(container) {
      _classCallCheck(this, Scrollbar);

      this._container = container;
      this._isDragging = false;
      this._isHovering = false;

      this._appendDOM();
      this._resizeButton();
      this._updateValues();

      this._onButtonDown = this._onButtonDown.bind(this);
      this._onButtonMove = this._onButtonMove.bind(this);
      this._onButtonUp = this._onButtonUp.bind(this);

      this._onContainerEnter = this._onContainerEnter.bind(this);
      this._onContainerLeave = this._onContainerLeave.bind(this);

      this._onBackgroundClick = this._onBackgroundClick.bind(this);

      this._container.addEventListener('mouseenter', this._onContainerEnter);
      this._container.addEventListener('mouseleave', this._onContainerLeave);
      this._container.addEventListener('mousemove', this._onContainerEnter);
      this._dom.button.addEventListener('mousedown', this._onButtonDown);
      this._dom.button.addEventListener('touchstart', this._onButtonDown);
      this._dom.background.addEventListener('click', this._onBackgroundClick);
      this._list.addEventListener('scroll', this._onListScroll.bind(this));

      this._onListScroll();
    }

    _createClass(Scrollbar, [{
      key: '_onBackgroundClick',

      /**
       * Gets called when the user clicks the scrollbar background
       * @param {Event} e
       * @private
       */
      value: function _onBackgroundClick(e) {
        e.preventDefault();
        if (e.target !== this._dom.background) return;

        var position = _libUtils2['default'].getEventPosition(e);
        var backgroundOffset = this._dom.background.getBoundingClientRect();
        backgroundOffset = new _libMathVector22['default'](backgroundOffset.left, backgroundOffset.top);

        var relativePosition = position.clone().subtract(backgroundOffset);

        relativePosition.x -= this._values.button.width * 0.5;

        this._setButtonPosition(relativePosition.x);
      }
    }, {
      key: '_onContainerEnter',

      /**
       * Gets called when the user enters the list with the mouse
       * @private
       */
      value: function _onContainerEnter() {
        this._isHovering = true;
        this.show();
      }
    }, {
      key: '_onContainerLeave',

      /**
       * Gets called when the user leaves the list with the mouse
       * @private
       */
      value: function _onContainerLeave() {
        this._isHovering = false;
        this.hide();
      }
    }, {
      key: 'show',

      /**
       * Shows the scrollbar
       */
      value: function show() {
        if (!this._isScrollingNecessary) return;
        this._dom.background.classList.add('visible');
      }
    }, {
      key: 'hide',

      /**
       * Hides the scrollbar
       */
      value: function hide() {
        if (this._isDragging) return;
        this._dom.background.classList.remove('visible');
      }
    }, {
      key: '_updateValues',

      /**
       * Updates the size values
       * @private
       */
      value: function _updateValues() {
        this._values = {
          list: {
            totalWidth: this._list.scrollWidth,
            visibleWidth: this._list.offsetWidth,
            scrollableWidth: this._list.scrollWidth - this._list.offsetWidth
          },
          button: {
            width: this._dom.button.offsetWidth,
            scrollableWidth: this._dom.background.offsetWidth - this._dom.button.offsetWidth
          }
        };
      }
    }, {
      key: '_onButtonDown',

      /**
       * Gets called when the user starts dragging the button
       * @param {Event} event
       * @private
       */
      value: function _onButtonDown(event) {
        event.preventDefault();

        this._isDragging = true;

        this._initialMousePosition = _libUtils2['default'].getEventPosition(event);
        this._initialButtonPosition = this._buttonPosition || 0;

        document.addEventListener('mousemove', this._onButtonMove);
        document.addEventListener('touchmove', this._onButtonMove);
        document.addEventListener('mouseup', this._onButtonUp);
        document.addEventListener('touchend', this._onButtonUp);
      }
    }, {
      key: '_onButtonMove',

      /**
       * Gets called when the user drags the button
       * @param {Event} event
       * @private
       */
      value: function _onButtonMove(event) {
        event.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(event);
        var diff = mousePosition.clone().subtract(this._initialMousePosition);
        var newButtonPosition = this._initialButtonPosition + diff.x;

        this._setButtonPosition(newButtonPosition);
      }
    }, {
      key: '_setButtonPosition',

      /**
       * Sets the button position to the given value
       * @param {Number} newButtonPosition
       * @private
       */
      value: function _setButtonPosition(newButtonPosition) {
        // Clamp button position
        newButtonPosition = Math.max(0, newButtonPosition);
        newButtonPosition = Math.min(newButtonPosition, this._values.button.scrollableWidth);

        // Set button position
        this._buttonPosition = newButtonPosition;
        this._dom.button.style.left = '' + this._buttonPosition + 'px';

        // Update list scroll position
        var progress = newButtonPosition / this._values.button.scrollableWidth;
        var scrollPosition = this._values.list.scrollableWidth * progress;
        this._list.scrollLeft = scrollPosition;
      }
    }, {
      key: '_onButtonUp',

      /**
       * Gets called when the user releases the button
       * @private
       */
      value: function _onButtonUp() {
        this._isDragging = false;

        document.removeEventListener('mousemove', this._onButtonMove);
        document.removeEventListener('touchmove', this._onButtonMove);
        document.removeEventListener('mouseup', this._onButtonUp);
        document.removeEventListener('touchend', this._onButtonUp);
      }
    }, {
      key: '_onListScroll',

      /**
       * Gets called when the user scrolls the list
       * @private
       */
      value: function _onListScroll() {
        if (this._isDragging) return;

        var listScrollWidth = this._list.scrollWidth - this._list.offsetWidth;
        var listScrollPosition = this._list.scrollLeft;

        var backgroundScrollWidth = this._dom.background.offsetWidth - this._dom.button.offsetWidth;
        var progress = listScrollPosition / listScrollWidth;

        this._buttonPosition = backgroundScrollWidth * progress;
        this._dom.button.style.left = '' + this._buttonPosition + 'px';
      }
    }, {
      key: '_resizeButton',

      /**
       * Resizes the button to represent the visible size of the container
       * @private
       */
      value: function _resizeButton() {
        var listScrollWidth = this._list.scrollWidth;
        var listWidth = this._list.offsetWidth;

        this._buttonWidth = listWidth / listScrollWidth * listWidth;
        this._dom.button.style.width = '' + this._buttonWidth + 'px';
      }
    }, {
      key: '_appendDOM',

      /**
       * Appends the DOM elements to the container
       * @private
       */
      value: function _appendDOM() {
        var background = document.createElement('div');
        background.classList.add('imglykit-scrollbar-background');
        background.style.bottom = '' + maxScrollbarWidth + 'px';

        var button = document.createElement('div');
        button.classList.add('imglykit-scrollbar-button');

        background.appendChild(button);
        this._container.appendChild(background);

        // Container should have position: relative
        this._container.style.position = 'relative';

        // Find the list
        this._list = this._container.querySelector('.imglykit-controls-list');
        this._dom = { background: background, button: button };

        // Resize the list and the container
        this._list.style.height = '';
        var listHeight = this._list.offsetHeight;
        listHeight += maxScrollbarWidth;
        this._container.style.height = '' + listHeight + 'px';
        this._list.style.height = '' + listHeight + 'px';
      }
    }, {
      key: 'remove',

      /**
       * Removes the DOM elements and event listeners
       */
      value: function remove() {
        this._dom.button.removeEventListener('mousedown', this._onButtonDown);
        this._dom.button.removeEventListener('touchstart', this._onButtonDown);

        this._dom.background.parentNode.removeChild(this._dom.background);
      }
    }, {
      key: '_isScrollingNecessary',

      /**
       * Checks whether scrolling is necessary
       * @returns {Boolean}
       * @private
       */
      get: function () {
        return this._list.scrollWidth > this._list.offsetWidth;
      }
    }]);

    return Scrollbar;
  })();

  exports['default'] = Scrollbar;
  module.exports = exports['default'];

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);



  var FiltersControl = (function (_Control) {
    function FiltersControl() {
      _classCallCheck(this, FiltersControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(FiltersControl, _Control);

    _createClass(FiltersControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      {{ for(var identifier in it.filters) { }}\n        {{ var filter = it.filters[identifier]; }}\n        {{ var name = filter.prototype.name; }}\n        {{ var enabled = it.activeFilter.identifier === identifier; }}\n        <li data-identifier=\"{{= identifier}}\" class=\"imglykit-controls-item-with-label{{? enabled}} imglykit-controls-item-active{{?}}\">\n          <img src=\"{{=it.helpers.assetPath('ui/night/filters/' + identifier + '.png')}}\" />\n          <div class=\"imglykit-controls-item-label\">{{= name }}</div>\n        </li>\n      {{ } }}\n    </ul>\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        this._availableFilters = {};
        this._filters = {};

        this._addDefaultFilters();

        // Select all filters per default
        this.selectFilters(null);
      }
    }, {
      key: '_renderAllControls',

      /**
       * Renders the controls
       * @private
       * @internal We need to access information from the operation when
       *           rendering, which is why we have to override this function
       */
      value: function _renderAllControls() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this._operationExistedBefore = !!this._ui.operations.filters;
        this._operation = this._ui.getOrCreateOperation('filters');

        _get(Object.getPrototypeOf(FiltersControl.prototype), '_renderAllControls', this).apply(this, args);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        this._initialFilter = this._operation.getFilter();
        this._defaultFilter = this._operation.availableOptions.filter['default'];

        var listItems = this._controls.querySelectorAll('li');
        this._listItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var listItem = _this._listItems[i];
          listItem.addEventListener('click', function () {
            _this._onListItemClick(listItem);
          });
        };

        // Listen to click events
        for (var i = 0; i < this._listItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the user hits the back button
       * @override
       */
      value: function _onBack() {
        var currentFilter = this._operation.getFilter();
        if (currentFilter !== this._initialFilter) {
          this._ui.addHistory(this._operation, {
            filter: this._initialFilter
          }, this._operationExistedBefore);
        }
        if (currentFilter === this._defaultFilter) {
          this._ui.removeOperation('filters');
        }
        this._ui.canvas.render();
      }
    }, {
      key: '_onListItemClick',

      /**
       * Gets called when the user clicked a list item
       * @private
       */
      value: function _onListItemClick(item) {
        this._deactivateAllItems();

        var identifier = item.dataset.identifier;

        this._operation.setFilter(this._filters[identifier]);
        this._ui.canvas.render();

        item.classList.add('imglykit-controls-item-active');
      }
    }, {
      key: '_deactivateAllItems',

      /**
       * Deactivates all list items
       * @private
       */
      value: function _deactivateAllItems() {
        for (var i = 0; i < this._listItems.length; i++) {
          var listItem = this._listItems[i];
          listItem.classList.remove('imglykit-controls-item-active');
        }
      }
    }, {
      key: '_addDefaultFilters',

      /**
       * Registers all the known filters
       * @private
       */
      value: function _addDefaultFilters() {
        this.addFilter(__webpack_require__(73));
        this.addFilter(__webpack_require__(34));
        this.addFilter(__webpack_require__(35));
        this.addFilter(__webpack_require__(36));
        this.addFilter(__webpack_require__(37));
        this.addFilter(__webpack_require__(30));
        this.addFilter(__webpack_require__(23));
        this.addFilter(__webpack_require__(42));
        this.addFilter(__webpack_require__(27));
        this.addFilter(__webpack_require__(31));
        this.addFilter(__webpack_require__(28));
        this.addFilter(__webpack_require__(49));
        this.addFilter(__webpack_require__(24));
        this.addFilter(__webpack_require__(25));
        this.addFilter(__webpack_require__(38));
        this.addFilter(__webpack_require__(45));
        this.addFilter(__webpack_require__(44));
        this.addFilter(__webpack_require__(43));
        this.addFilter(__webpack_require__(29));
        this.addFilter(__webpack_require__(32));
        this.addFilter(__webpack_require__(26));
        this.addFilter(__webpack_require__(48));
        this.addFilter(__webpack_require__(41));
        this.addFilter(__webpack_require__(39));
        this.addFilter(__webpack_require__(33));
        this.addFilter(__webpack_require__(40));
        this.addFilter(__webpack_require__(47));
        this.addFilter(__webpack_require__(22));
        this.addFilter(__webpack_require__(46));
      }
    }, {
      key: 'addFilter',

      /**
       * Registers the given filter
       * @param  {class} filter
       * @private
       */
      value: function addFilter(filter) {
        this._availableFilters[filter.identifier] = filter;
      }
    }, {
      key: 'selectFilters',

      /**
       * Selects the filters
       * @param {Selector} selector
       */
      value: function selectFilters(selector) {
        this._filters = {};

        var filterIdentifiers = Object.keys(this._availableFilters);

        var selectedFilters = _libUtils2['default'].select(filterIdentifiers, selector);
        for (var i = 0; i < selectedFilters.length; i++) {
          var identifier = selectedFilters[i];
          this._filters[identifier] = this._availableFilters[identifier];
        }

        if (this._active) {
          this._renderControls();
        }
      }
    }, {
      key: 'context',

      /**
       * The data that is available to the template
       * @type {Object}
       * @override
       */
      get: function () {
        var context = _get(Object.getPrototypeOf(FiltersControl.prototype), 'context', this);
        context.filters = this._filters;
        context.activeFilter = this._operation.getFilter();
        return context;
      }
    }]);

    return FiltersControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  FiltersControl.prototype.identifier = 'filters';

  exports['default'] = FiltersControl;
  module.exports = exports['default'];

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);



  var RotationControl = (function (_Control) {
    function RotationControl() {
      _classCallCheck(this, RotationControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(RotationControl, _Control);

    _createClass(RotationControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      <li data-degrees=\"-90\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/rotation/left.png')}}\" />\n      </li>\n      <li data-degrees=\"90\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/rotation/right.png')}}\" />\n      </li>\n    </ul>\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-crop-container imglykit-canvas-crop-container-hidden\">\n  <div class=\"imglykit-canvas-crop-top\">\n    <div class=\"imglykit-canvas-crop-top-left\"></div>\n    <div class=\"imglykit-canvas-crop-top-center\"></div>\n    <div class=\"imglykit-canvas-crop-top-right\"></div>\n  </div>\n\n  <div class=\"imglykit-canvas-crop-center\">\n    <div class=\"imglykit-canvas-crop-center-left\"></div>\n    <div class=\"imglykit-canvas-crop-center-center imglykit-canvas-crop-center-center-nomove\">\n\n    </div>\n    <div class=\"imglykit-canvas-crop-center-right\"></div>\n  </div>\n\n  <div class=\"imglykit-canvas-crop-bottom\">\n    <div class=\"imglykit-canvas-crop-bottom-left\"></div>\n    <div class=\"imglykit-canvas-crop-bottom-center\"></div>\n    <div class=\"imglykit-canvas-crop-bottom-right\"></div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations.rotation;
        this._operation = this._ui.getOrCreateOperation('rotation');

        this._cropOperation = this._ui.operations.crop;

        this._initialZoomLevel = this._ui.canvas.zoomLevel;
        this._ui.canvas.zoomToFit(false);

        if (this._cropOperation) {
          // Store initial settings for 'back' and 'done' buttons
          this._initialStart = this._cropOperation.getStart().clone();
          this._initialEnd = this._cropOperation.getEnd().clone();

          // Make sure we see the whole input image
          this._cropOperation.set({
            start: new _libMathVector22['default'](0, 0),
            end: new _libMathVector22['default'](1, 1)
          });
        }

        this._initialDegrees = this._operation.getDegrees();

        var listItems = this._controls.querySelectorAll('li');
        this._listItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var listItem = _this._listItems[i];
          listItem.addEventListener('click', function () {
            _this._onListItemClick(listItem);
          });
        };

        // Listen to click events
        for (var i = 0; i < this._listItems.length; i++) {
          _loop(i);
        }

        // Find the div areas that affect the displayed crop size
        var prefix = '.imglykit-canvas-crop';
        this._cropAreas = {
          topLeft: this._canvasControls.querySelector('' + prefix + '-top-left'),
          topCenter: this._canvasControls.querySelector('' + prefix + '-top-center'),
          centerLeft: this._canvasControls.querySelector('' + prefix + '-center-left'),
          centerCenter: this._canvasControls.querySelector('' + prefix + '-center-center')
        };

        // Resume the rendering
        this._ui.canvas.render().then(function () {
          _this._showCropContainer();
          _this._updateCropDOM();
        });
      }
    }, {
      key: '_showCropContainer',

      /**
       * Shows the crop container which is hidden initially to avoid flickering
       * when resizing after the rendering
       * @private
       */
      value: function _showCropContainer() {
        var container = this._canvasControls.querySelector('.imglykit-canvas-crop-container');
        container.classList.remove('imglykit-canvas-crop-container-hidden');
      }
    }, {
      key: '_onListItemClick',

      /**
       * Gets called when the given item has been clicked
       * @param {DOMObject} item
       * @private
       */
      value: function _onListItemClick(item) {
        var _this2 = this;

        var degrees = item.dataset.degrees;

        degrees = parseInt(degrees, 10);

        var currentDegrees = this._operation.getDegrees();
        this._operation.setDegrees(currentDegrees + degrees);
        this._ui.canvas.zoomToFit().then(function () {
          _this2._updateCropDOM();
        });
      }
    }, {
      key: 'onZoom',

      /**
       * Gets called when the zoom level has been changed while
       * this control is active
       */
      value: function onZoom() {
        this._updateCropDOM();
      }
    }, {
      key: '_updateCropDOM',

      /**
       * Updates the cropping divs for the current operation settings
       * @private
       */
      value: function _updateCropDOM() {
        var start = undefined,
            end = undefined;
        if (this._cropOperation) {
          start = this._initialStart.clone();
          end = this._initialEnd.clone();
        } else {
          start = new _libMathVector22['default'](0, 0);
          end = new _libMathVector22['default'](1, 1);
        }

        var canvasSize = this._ui.canvas.size;

        var startAbsolute = start.multiply(canvasSize);
        var endAbsolute = end.multiply(canvasSize);
        var size = endAbsolute.clone().subtract(startAbsolute);

        var top = Math.max(1, startAbsolute.y);
        var left = Math.max(1, startAbsolute.x);
        var width = Math.max(1, size.x);
        var height = Math.max(1, size.y);

        // widths are defined by top left and top center areas
        this._cropAreas.topLeft.style.width = '' + left + 'px';
        this._cropAreas.topCenter.style.width = '' + width + 'px';

        // heights are defined by top left and center left areas
        this._cropAreas.topLeft.style.height = '' + top + 'px';
        this._cropAreas.centerLeft.style.height = '' + height + 'px';
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        var currentDegrees = this._operation.getDegrees();
        if (this._initialDegrees !== currentDegrees) {
          this._ui.addHistory(this._operation, {
            degrees: this._initialDegrees
          }, this._operationExistedBefore);
        }

        if (currentDegrees === 0) {
          this._ui.removeOperation('rotation');
        }

        if (this._cropOperation) {
          this._cropOperation.set({
            start: this._initialStart,
            end: this._initialEnd
          });
        }
        this._ui.canvas.render();
      }
    }]);

    return RotationControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  RotationControl.prototype.identifier = 'rotation';

  exports['default'] = RotationControl;
  module.exports = exports['default'];

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);



  var FlipControl = (function (_Control) {
    function FlipControl() {
      _classCallCheck(this, FlipControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(FlipControl, _Control);

    _createClass(FlipControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      <li data-direction=\"horizontal\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/flip/horizontal.png')}}\" />\n      </li>\n      <li data-direction=\"vertical\">\n        <img src=\"{{=it.helpers.assetPath('ui/night/flip/vertical.png')}}\" />\n      </li>\n    </ul>\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations.flip;
        this._operation = this._ui.getOrCreateOperation('flip');

        this._initialHorizontal = this._operation.getHorizontal();
        this._initialVertical = this._operation.getVertical();

        var listItems = this._controls.querySelectorAll('li');
        this._listItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var listItem = _this._listItems[i];
          listItem.addEventListener('click', function () {
            _this._onListItemClick(listItem);
          });

          var direction = listItem.dataset.direction;

          if (direction === 'horizontal' && _this._operation.getHorizontal()) {
            _this._toggleItem(listItem, true);
          } else if (direction === 'vertical' && _this._operation.getVertical()) {
            _this._toggleItem(listItem, true);
          }
        };

        // Listen to click events
        for (var i = 0; i < this._listItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_onListItemClick',

      /**
       * Gets called when the user clicked a list item
       * @private
       */
      value: function _onListItemClick(item) {
        var direction = item.dataset.direction;

        var active = false;

        if (direction === 'horizontal') {
          var currentHorizontal = this._operation.getHorizontal();
          this._operation.setHorizontal(!currentHorizontal);
          this._ui.canvas.render();
          active = !currentHorizontal;
        } else if (direction === 'vertical') {
          var currentVertical = this._operation.getVertical();
          this._operation.setVertical(!currentVertical);
          this._ui.canvas.render();
          active = !currentVertical;
        }

        this._toggleItem(item, active);
      }
    }, {
      key: '_toggleItem',

      /**
       * Toggles the active state of the given item
       * @param {DOMElement} item
       * @param {Boolean} active
       * @private
       */
      value: function _toggleItem(item, active) {
        var activeClass = 'imglykit-controls-item-active';
        if (active) {
          item.classList.add(activeClass);
        } else {
          item.classList.remove(activeClass);
        }
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        var currentVertical = this._operation.getVertical();
        var currentHorizontal = this._operation.getHorizontal();

        if (this._initialVertical !== currentVertical || this._initialHorizontal !== currentHorizontal) {
          this._ui.addHistory(this._operation, {
            vertical: this._initialVertical,
            horizontal: this._initialHorizontal
          }, this._operationExistedBefore);
        }

        if (!currentVertical && !currentHorizontal) {
          this._ui.removeOperation('flip');
        }

        this._ui.canvas.render();
      }
    }]);

    return FlipControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  FlipControl.prototype.identifier = 'flip';

  exports['default'] = FlipControl;
  module.exports = exports['default'];

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libSlider = __webpack_require__(101);

  var _libSlider2 = _interopRequireDefault(_libSlider);



  var BrightnessControl = (function (_Control) {
    function BrightnessControl() {
      _classCallCheck(this, BrightnessControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(BrightnessControl, _Control);

    _createClass(BrightnessControl, [{
      key: 'init',

      /**
       * The entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    {{#def.slider}}\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;
        this._partialTemplates.push(_libSlider2['default'].template);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        this._operationExistedBefore = !!this._ui.operations.brightness;
        this._operation = this._ui.getOrCreateOperation('brightness');

        // Initially set value
        var brightness = this._operation.getBrightness();
        this._initialBrightness = brightness;

        var sliderElement = this._controls.querySelector('.imglykit-slider');
        this._slider = new _libSlider2['default'](sliderElement, {
          minValue: -1,
          maxValue: 1,
          defaultValue: brightness
        });
        this._slider.on('update', this._onUpdate.bind(this));
        this._slider.setValue(this._initialBrightness);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        var currentBrightness = this._operation.getBrightness();

        if (this._initialBrightness !== currentBrightness) {
          this._ui.addHistory(this._operation, {
            brightness: this._initialBrightness
          }, this._operationExistedBefore);
        }

        if (currentBrightness === 1) {
          this._ui.removeOperation('brightness');
        }

        this._ui.canvas.render();
      }
    }, {
      key: '_onUpdate',

      /**
       * Gets called when the value has been updated
       * @override
       */
      value: function _onUpdate(value) {
        this._operation.setBrightness(value);
        this._ui.canvas.render();
      }
    }]);

    return BrightnessControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  BrightnessControl.prototype.identifier = 'brightness';

  exports['default'] = BrightnessControl;
  module.exports = exports['default'];

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libSlider = __webpack_require__(101);

  var _libSlider2 = _interopRequireDefault(_libSlider);



  var ContrastControl = (function (_Control) {
    function ContrastControl() {
      _classCallCheck(this, ContrastControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(ContrastControl, _Control);

    _createClass(ContrastControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    {{#def.slider}}\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;
        this._partialTemplates.push(_libSlider2['default'].template);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        this._operationExistedBefore = !!this._ui.operations.contrast;
        this._operation = this._ui.getOrCreateOperation('contrast');

        // Initially set value
        var contrast = this._operation.getContrast();
        this._initialContrast = contrast;

        var sliderElement = this._controls.querySelector('.imglykit-slider');
        this._slider = new _libSlider2['default'](sliderElement, {
          minValue: 0,
          maxValue: 2,
          defaultValue: contrast
        });
        this._slider.on('update', this._onUpdate.bind(this));
        this._slider.setValue(this._initialContrast);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        var currentContrast = this._operation.getContrast();

        if (this._initialContrast !== currentContrast) {
          this._ui.addHistory(this._operation, {
            contrast: this._initialContrast
          }, this._operationExistedBefore);
        }

        if (currentContrast === 1) {
          this._ui.removeOperation('contrast');
        }

        this._ui.canvas.render();
      }
    }, {
      key: '_onUpdate',

      /**
       * Gets called when the value has been updated
       * @override
       */
      value: function _onUpdate(value) {
        this._operation.setContrast(value);
        this._ui.canvas.render();
      }
    }]);

    return ContrastControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  ContrastControl.prototype.identifier = 'contrast';

  exports['default'] = ContrastControl;
  module.exports = exports['default'];

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libSlider = __webpack_require__(101);

  var _libSlider2 = _interopRequireDefault(_libSlider);

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);



  var SaturationControl = (function (_Control) {
    function SaturationControl() {
      _classCallCheck(this, SaturationControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(SaturationControl, _Control);

    _createClass(SaturationControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    {{#def.slider}}\n  </div>\n#}}\n";
        this._controlsTemplate = controlsTemplate;
        this._partialTemplates.push(_libSlider2['default'].template);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        _get(Object.getPrototypeOf(SaturationControl.prototype), '_onEnter', this).call(this);

        this._operationExistedBefore = !!this._ui.operations.saturation;
        this._operation = this._ui.getOrCreateOperation('saturation');

        // Initially set value
        var saturation = this._operation.getSaturation();
        this._initialSaturation = saturation;

        var sliderElement = this._controls.querySelector('.imglykit-slider');
        this._slider = new _libSlider2['default'](sliderElement, {
          minValue: 0,
          maxValue: 2,
          defaultValue: saturation
        });
        this._slider.on('update', this._onUpdate.bind(this));
        this._slider.setValue(this._initialSaturation);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        var currentSaturation = this._operation.getSaturation();

        if (this._initialSaturation !== currentSaturation) {
          this._ui.addHistory(this._operation, {
            saturation: this._initialSaturation
          }, this._operationExistedBefore);
        }

        if (currentSaturation === 1) {
          this._ui.removeOperation('saturation');
        }

        this._ui.canvas.render();
      }
    }, {
      key: '_onUpdate',

      /**
       * Gets called when the value has been updated
       * @override
       */
      value: function _onUpdate(value) {
        this._operation.setSaturation(value);
        this._ui.canvas.render();
      }
    }]);

    return SaturationControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  SaturationControl.prototype.identifier = 'saturation';

  exports['default'] = SaturationControl;
  module.exports = exports['default'];

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);



  var CropControl = (function (_Control) {
    function CropControl() {
      _classCallCheck(this, CropControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(CropControl, _Control);

    _createClass(CropControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        this._availableRatios = {};
        this._ratios = {};

        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      {{ for(var identifier in it.ratios) { }}\n        {{ var ratio = it.ratios[identifier]; }}\n        {{ var enabled = ratio.selected; }}\n        <li data-identifier=\"{{= identifier}}\" data-ratio=\"{{= ratio.ratio}}\"{{? enabled}} data-selected{{?}}>\n          <img src=\"{{=it.helpers.assetPath('ui/night/crop/' + identifier + '.png')}}\" />\n        </li>\n      {{ } }}\n    </ul>\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-crop-container\">\n  <div class=\"imglykit-canvas-crop-top\">\n    <div class=\"imglykit-canvas-crop-top-left\"></div>\n    <div class=\"imglykit-canvas-crop-top-center\"></div>\n    <div class=\"imglykit-canvas-crop-top-right\"></div>\n  </div>\n\n  <div class=\"imglykit-canvas-crop-center\">\n    <div class=\"imglykit-canvas-crop-center-left\"></div>\n    <div class=\"imglykit-canvas-crop-center-center\">\n      <div class=\"imglykit-canvas-crop-knobs\">\n        <div data-corner=\"top-left\"></div>\n        <div data-corner=\"top-right\"></div>\n        <div data-corner=\"bottom-left\"></div>\n        <div data-corner=\"bottom-right\"></div>\n      </div>\n    </div>\n    <div class=\"imglykit-canvas-crop-center-right\"></div>\n  </div>\n\n  <div class=\"imglykit-canvas-crop-bottom\">\n    <div class=\"imglykit-canvas-crop-bottom-left\"></div>\n    <div class=\"imglykit-canvas-crop-bottom-center\"></div>\n    <div class=\"imglykit-canvas-crop-bottom-right\"></div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;

        // Mouse event callbacks bound to the class context
        this._onKnobDown = this._onKnobDown.bind(this);
        this._onKnobDrag = this._onKnobDrag.bind(this);
        this._onKnobUp = this._onKnobUp.bind(this);
        this._onCenterDown = this._onCenterDown.bind(this);
        this._onCenterDrag = this._onCenterDrag.bind(this);
        this._onCenterUp = this._onCenterUp.bind(this);

        this._addDefaultRatios();

        // Select all ratios per default
        this.selectRatios(null);
      }
    }, {
      key: 'selectRatios',

      /**
       * Selects the ratios
       * @param {Selector} selector
       */
      value: function selectRatios(selector) {
        this._ratios = {};

        var ratioIdentifiers = Object.keys(this._availableRatios);

        var selectedRatios = _libUtils2['default'].select(ratioIdentifiers, selector);
        for (var i = 0; i < selectedRatios.length; i++) {
          var identifier = selectedRatios[i];
          this._ratios[identifier] = this._availableRatios[identifier];
        }

        if (this._active) {
          this._renderControls();
        }
      }
    }, {
      key: '_addDefaultRatios',

      /**
       * Adds the default ratios
       * @private
       */
      value: function _addDefaultRatios() {
        this.addRatio('custom', '*', true);
        this.addRatio('square', '1');
        this.addRatio('4-3', '1.33');
        this.addRatio('16-9', '1.77');
      }
    }, {
      key: 'addRatio',

      /**
       * Adds a ratio with the given identifier
       * @param {String} identifier
       * @param {Number} ratio
       * @param {Boolean} selected
       */
      value: function addRatio(identifier, ratio, selected) {
        this._availableRatios[identifier] = { ratio: ratio, selected: selected };
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        _get(Object.getPrototypeOf(CropControl.prototype), '_onEnter', this).call(this);

        this._operationExistedBefore = !!this._ui.operations.crop;
        this._operation = this._ui.getOrCreateOperation('crop');

        this._defaultStart = new _libMathVector22['default'](0.1, 0.1);
        this._defaultEnd = new _libMathVector22['default'](0.9, 0.9);

        this._initialOptions = {
          start: this._operation.getStart(),
          end: this._operation.getEnd()
        };

        this._start = this._initialOptions.start || this._defaultStart;
        this._end = this._initialOptions.end || this._defaultEnd;

        // Minimum size in pixels
        this._minimumSize = new _libMathVector22['default'](50, 50);

        this._initialZoomLevel = this._ui.canvas.zoomLevel;
        this._ui.canvas.zoomToFit(false);

        var prefix = '.imglykit-canvas-crop';
        var container = this._canvasControls;
        var knobsContainer = container.querySelector('' + prefix + '-knobs');

        // Store initial settings for 'back' button
        this._initialStart = this._operation.getStart().clone();
        this._initialEnd = this._operation.getEnd().clone();

        // Make sure we see the whole input image
        this._operation.set({
          start: new _libMathVector22['default'](0, 0),
          end: new _libMathVector22['default'](1, 1)
        });

        // Find all 4 knobs
        this._knobs = {
          topLeft: knobsContainer.querySelector('[data-corner=top-left]'),
          topRight: knobsContainer.querySelector('[data-corner=top-right]'),
          bottomLeft: knobsContainer.querySelector('[data-corner=bottom-left]'),
          bottomRight: knobsContainer.querySelector('[data-corner=bottom-right]')
        };

        // Find the div areas that affect the displayed crop size
        this._areas = {
          topLeft: this._canvasControls.querySelector('' + prefix + '-top-left'),
          topCenter: this._canvasControls.querySelector('' + prefix + '-top-center'),
          centerLeft: this._canvasControls.querySelector('' + prefix + '-center-left'),
          centerCenter: this._canvasControls.querySelector('' + prefix + '-center-center')
        };

        this._handleControls();
        this._handleKnobs();
        this._handleCenter();

        // Resume the rendering
        this._ui.canvas.render().then(function () {
          _this._updateDOM();
        });
      }
    }, {
      key: '_handleControls',

      /**
       * Handles the ratio controls
       * @private
       */
      value: function _handleControls() {
        var _this2 = this;

        var listItems = this._controls.querySelectorAll('ul > li');
        this._ratioItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var item = _this2._ratioItems[i];
          var _item$dataset = item.dataset;
          var selected = _item$dataset.selected;
          var ratio = _item$dataset.ratio;
          var identifier = _item$dataset.identifier;

          if (typeof selected !== 'undefined' && !_this2._operationExistedBefore) {
            _this2._setRatio(identifier, ratio, false);
            _this2._selectRatio(item);
          }

          item.addEventListener('click', function (e) {
            e.preventDefault();
            _this2._onRatioClick(item);
          });
        };

        for (var i = 0; i < this._ratioItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_onRatioClick',

      /**
       * Gets called when the given ratio has been selected
       * @param {DOMElement} item
       * @private
       */
      value: function _onRatioClick(item) {
        this._unselectAllRatios();
        this._selectRatio(item);
      }
    }, {
      key: '_unselectAllRatios',

      /**
       * Unselects all ratio control items
       * @private
       */
      value: function _unselectAllRatios() {
        for (var i = 0; i < this._ratioItems.length; i++) {
          var item = this._ratioItems[i];
          item.classList.remove('imglykit-controls-item-active');
        }
      }
    }, {
      key: '_selectRatio',

      /**
       * Activates the given ratio control item
       * @param {DOMElement} item
       * @private
       */
      value: function _selectRatio(item) {
        item.classList.add('imglykit-controls-item-active');
        var _item$dataset2 = item.dataset;
        var ratio = _item$dataset2.ratio;
        var identifier = _item$dataset2.identifier;

        this._setRatio(identifier, ratio);
      }
    }, {
      key: '_setRatio',

      /**
       * Sets the given ratio
       * @param {String} identifier
       * @param {String} ratio
       * @param {Boolean} resize
       * @private
       */
      value: function _setRatio(identifier, ratio) {
        var resize = arguments[2] === undefined ? true : arguments[2];

        var canvasSize = this._ui.canvas.size;
        this._selectedRatio = identifier;

        if (ratio === '*') {
          this._ratio = null;
          this._start = new _libMathVector22['default'](0.1, 0.1);
          this._end = new _libMathVector22['default'](0.9, 0.9);
        } else {
          if (ratio === 'original') {
            this._ratio = canvasSize.x / canvasSize.y;
          } else {
            ratio = parseFloat(ratio);
            this._ratio = ratio;
          }

          if (resize) {
            if (canvasSize.x / canvasSize.y <= this._ratio) {
              this._start.x = 0.1;
              this._end.x = 0.9;
              var height = 1 / canvasSize.y * (canvasSize.x / this._ratio * 0.8);
              this._start.y = (1 - height) / 2;
              this._end.y = 1 - this._start.y;
            } else {
              this._start.y = 0.1;
              this._end.y = 0.9;
              var width = 1 / canvasSize.x * (this._ratio * canvasSize.y * 0.8);
              this._start.x = (1 - width) / 2;
              this._end.x = 1 - this._start.x;
            }
          }
        }

        this._updateDOM();
      }
    }, {
      key: '_updateDOM',

      /**
       * Updates the cropping divs for the current operation settings
       * @private
       */
      value: function _updateDOM() {
        var canvasSize = this._ui.canvas.size;
        var startAbsolute = this._start.clone().multiply(canvasSize);
        var endAbsolute = this._end.clone().multiply(canvasSize);
        var size = endAbsolute.clone().subtract(startAbsolute);

        var top = Math.max(1, startAbsolute.y);
        var left = Math.max(1, startAbsolute.x);
        var width = Math.max(1, size.x);
        var height = Math.max(1, size.y);

        // widths are defined by top left and top center areas
        this._areas.topLeft.style.width = '' + left + 'px';
        this._areas.topCenter.style.width = '' + width + 'px';

        // heights are defined by top left and center left areas
        this._areas.topLeft.style.height = '' + top + 'px';
        this._areas.centerLeft.style.height = '' + height + 'px';
      }
    }, {
      key: '_handleKnobs',

      /**
       * Handles the knob dragging
       * @private
       */
      value: function _handleKnobs() {
        var _this3 = this;

        var _loop2 = function (identifier) {
          var knob = _this3._knobs[identifier];
          knob.addEventListener('mousedown', function (e) {
            _this3._onKnobDown(e, knob);
          });
          knob.addEventListener('touchstart', function (e) {
            _this3._onKnobDown(e, knob);
          });
        };

        for (var identifier in this._knobs) {
          _loop2(identifier);
        }
      }
    }, {
      key: '_onKnobDown',

      /**
       * Gets called when the user presses a knob
       * @param {Event} e
       * @param {DOMElement} knob
       * @private
       */
      value: function _onKnobDown(e, knob) {
        e.preventDefault();
        e.stopPropagation();

        this._currentKnob = knob;
        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);

        // Remember the current values
        this._startBeforeDrag = this._start.clone();
        this._endBeforeDrag = this._end.clone();

        document.addEventListener('mousemove', this._onKnobDrag);
        document.addEventListener('touchmove', this._onKnobDrag);
        document.addEventListener('mouseup', this._onKnobUp);
        document.addEventListener('touchend', this._onKnobUp);
      }
    }, {
      key: '_onKnobDrag',

      /**
       * Gets called whe the user drags a knob
       * @param {Event} e
       * @private
       */
      value: function _onKnobDrag(e) {
        e.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var mouseDiff = mousePosition.subtract(this._initialMousePosition);
        var corner = this._currentKnob.dataset.corner;
        var canvasSize = this._ui.canvas.size;

        var absoluteStart = this._startBeforeDrag.clone().multiply(canvasSize);
        var absoluteEnd = this._endBeforeDrag.clone().multiply(canvasSize);

        var width = undefined,
            height = undefined,
            maximum = undefined,
            minimum = undefined;

        switch (corner) {
          case 'top-left':
            absoluteStart.add(mouseDiff);
            maximum = absoluteEnd.clone().subtract(this._minimumSize);
            absoluteStart.clamp(null, maximum);
            break;
          case 'top-right':
            absoluteEnd.x += mouseDiff.x;
            absoluteStart.y += mouseDiff.y;
            absoluteEnd.x = Math.max(absoluteStart.x + this._minimumSize.x, absoluteEnd.x);
            absoluteStart.y = Math.min(absoluteEnd.y - this._minimumSize.y, absoluteStart.y);
            break;
          case 'bottom-right':
            absoluteEnd.add(mouseDiff);
            minimum = absoluteStart.clone().add(this._minimumSize);
            absoluteEnd.clamp(minimum);
            break;
          case 'bottom-left':
            absoluteStart.x += mouseDiff.x;
            absoluteEnd.y += mouseDiff.y;
            absoluteStart.x = Math.min(absoluteEnd.x - this._minimumSize.x, absoluteStart.x);
            absoluteEnd.y = Math.max(absoluteStart.y + this._minimumSize.y, absoluteEnd.y);
            break;
        }

        this._start.copy(absoluteStart).divide(canvasSize);
        this._end.copy(absoluteEnd).divide(canvasSize);

        this._start.clamp(0, 1);
        this._end.clamp(0, 1);

        /**
         * Calculate boundaries
         */
        if (this._ratio !== null) {
          switch (corner) {
            case 'top-left':
              width = (this._end.x - this._start.x) * canvasSize.x;
              height = width / this._ratio;
              this._start.y = this._end.y - height / canvasSize.y;

              if (this._start.y <= 0) {
                this._start.y = 0;
                height = (this._end.y - this._start.y) * canvasSize.y;
                width = height * this._ratio;
                this._start.x = this._end.x - width / canvasSize.x;
              }
              break;
            case 'top-right':
              width = (this._end.x - this._start.x) * canvasSize.x;
              height = width / this._ratio;
              this._start.y = this._end.y - height / canvasSize.y;

              if (this._start.y <= 0) {
                this._start.y = 0;
                height = (this._end.y - this._start.y) * canvasSize.y;
                width = height * this._ratio;
                this._end.x = this._start.x + width / canvasSize.x;
              }
              break;
            case 'bottom-right':
              width = (this._end.x - this._start.x) * canvasSize.x;
              height = width / this._ratio;
              this._end.y = this._start.y + height / canvasSize.y;

              // If boundaries are exceeded, calculate width by maximum height
              if (this._end.y >= 1) {
                this._end.y = 1;
                height = (this._end.y - this._start.y) * canvasSize.y;
                width = height * this._ratio;
                this._end.x = this._start.x + width / canvasSize.x;
              }
              break;
            case 'bottom-left':
              width = (this._end.x - this._start.x) * canvasSize.x;
              height = width / this._ratio;
              this._end.y = this._start.y + height / canvasSize.y;

              if (this._end.y >= 1) {
                this._end.y = 1;
                height = (this._end.y - this._start.y) * canvasSize.y;
                width = height * this._ratio;
                this._start.x = this._end.x - width / canvasSize.x;
              }
              break;
          }
        }

        this._updateDOM();
      }
    }, {
      key: '_onKnobUp',

      /**
       * Gets called whe the user releases a knob
       * @param {Event} e
       * @private
       */
      value: function _onKnobUp() {
        this._currentKnob = null;
        document.removeEventListener('mousemove', this._onKnobDrag);
        document.removeEventListener('touchmove', this._onKnobDrag);
        document.removeEventListener('mouseup', this._onKnobUp);
        document.removeEventListener('touchend', this._onKnobUp);
      }
    }, {
      key: '_handleCenter',

      /**
       * Handles the center dragging
       * @private
       */
      value: function _handleCenter() {
        this._areas.centerCenter.addEventListener('mousedown', this._onCenterDown);
        this._areas.centerCenter.addEventListener('touchstart', this._onCenterDown);
      }
    }, {
      key: '_onCenterDown',

      /**
       * Gets called when the user presses the center area
       * @param {Event} e
       * @private
       */
      value: function _onCenterDown(e) {
        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);

        // Remember the current values
        this._startBeforeDrag = this._start.clone();
        this._endBeforeDrag = this._end.clone();

        document.addEventListener('mousemove', this._onCenterDrag);
        document.addEventListener('touchmove', this._onCenterDrag);
        document.addEventListener('mouseup', this._onCenterUp);
        document.addEventListener('touchend', this._onCenterUp);
      }
    }, {
      key: '_onCenterDrag',

      /**
       * Gets called when the user presses the center area and moves his mouse
       * @param {Event} e
       * @private
       */
      value: function _onCenterDrag(e) {
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var mouseDiff = mousePosition.subtract(this._initialMousePosition);
        var canvasSize = this._ui.canvas.size;

        // Get the crop size
        var cropSize = this._endBeforeDrag.clone().subtract(this._startBeforeDrag);
        var absoluteCropSize = cropSize.clone().multiply(canvasSize);

        // Get the absolute initial values
        var absoluteStart = this._startBeforeDrag.clone().multiply(canvasSize);
        var absoluteEnd = this._endBeforeDrag.clone().multiply(canvasSize);

        // Add the mouse position difference
        absoluteStart.add(mouseDiff);

        // Clamp the value
        var maxStart = canvasSize.clone().subtract(absoluteCropSize);
        absoluteStart.clamp(new _libMathVector22['default'](0, 0), maxStart);

        // End position does not change (relative to start)
        absoluteEnd.copy(absoluteStart).add(absoluteCropSize);

        // Set the final values
        this._start.copy(absoluteStart).divide(canvasSize);
        this._end.copy(absoluteEnd).divide(canvasSize);

        this._updateDOM();
      }
    }, {
      key: '_onCenterUp',

      /**
       * Gets called when the user releases the center area
       * @param {Event} e
       * @private
       */
      value: function _onCenterUp() {
        document.removeEventListener('mousemove', this._onCenterDrag);
        document.removeEventListener('touchmove', this._onCenterDrag);
        document.removeEventListener('mouseup', this._onCenterUp);
        document.removeEventListener('touchend', this._onCenterUp);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        this._ui.canvas.setZoomLevel(this._initialZoomLevel, false);

        if (this._operationExistedBefore) {
          this._operation.set({
            start: this._initialStart,
            end: this._initialEnd
          });
        } else {
          this._ui.removeOperation('crop');
        }
        this._ui.canvas.render();
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @protected
       */
      value: function _onDone() {
        this._operation.set({
          start: this._start,
          end: this._end
        });
        this._ui.canvas.zoomToFit(true);

        this._ui.addHistory(this._operation, {
          start: this._initialStart.clone(),
          end: this._initialEnd.clone()
        }, this._operationExistedBefore);
      }
    }, {
      key: 'context',

      /**
       * The data that is available to the template
       * @type {Object}
       * @override
       */
      get: function () {
        var context = _get(Object.getPrototypeOf(CropControl.prototype), 'context', this);
        context.ratios = this._ratios;
        return context;
      }
    }, {
      key: 'selectedRatio',

      /**
       * The selected ratio identifier
       * @type {String}
       */
      get: function () {
        return this._selectedRatio;
      }
    }]);

    return CropControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  CropControl.prototype.identifier = 'crop';

  exports['default'] = CropControl;
  module.exports = exports['default'];

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libSimpleSlider = __webpack_require__(102);

  var _libSimpleSlider2 = _interopRequireDefault(_libSimpleSlider);



  var RadialBlurControl = (function (_Control) {
    function RadialBlurControl() {
      _classCallCheck(this, RadialBlurControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(RadialBlurControl, _Control);

    _createClass(RadialBlurControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div class=\"imglykit-controls-icon\">\n    <img src=\"{{=it.helpers.assetPath('ui/night/blur/blur.png')}}\" />\n  </div>\n\n  <div>\n    {{var sliderId = \"imglykit-blur-radius-slider\";}}\n    {{#def.simpleSlider}}\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-radial-blur-container\">\n  <div class=\"imglykit-canvas-radial-blur-dot\" id=\"imglykit-radial-blur-position\"></div>\n  <div class=\"imglykit-canvas-radial-blur-dot\" id=\"imglykit-radial-blur-gradient\"></div>\n  <div class=\"imglykit-canvas-radial-blur-circle-container\">\n    <div class=\"imglykit-canvas-radial-blur-circle\"></div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;

        this._partialTemplates.push(_libSimpleSlider2['default'].template);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations['radial-blur'];
        this._operation = this._ui.getOrCreateOperation('radial-blur');

        // Remember initial identity state
        this._initialSettings = {
          position: this._operation.getPosition().clone(),
          gradientRadius: this._operation.getGradientRadius(),
          blurRadius: this._operation.getBlurRadius()
        };

        // Mouse event callbacks bound to the class context
        this._onPositionKnobDown = this._onPositionKnobDown.bind(this);
        this._onPositionKnobDrag = this._onPositionKnobDrag.bind(this);
        this._onPositionKnobUp = this._onPositionKnobUp.bind(this);
        this._onGradientKnobDown = this._onGradientKnobDown.bind(this);
        this._onGradientKnobDrag = this._onGradientKnobDrag.bind(this);
        this._onGradientKnobUp = this._onGradientKnobUp.bind(this);

        this._positionKnob = this._canvasControls.querySelector('#imglykit-radial-blur-position');
        this._gradientKnob = this._canvasControls.querySelector('#imglykit-radial-blur-gradient');
        this._circle = this._canvasControls.querySelector('.imglykit-canvas-radial-blur-circle');
        this._handleKnobs();
        this._initSliders();

        this._ui.canvas.render().then(function () {
          _this._updateDOM();
        });
      }
    }, {
      key: '_initSliders',

      /**
       * Initializes the slider controls
       * @private
       */
      value: function _initSliders() {
        var blurRadiusSlider = this._controls.querySelector('#imglykit-blur-radius-slider');
        this._blurRadiusSlider = new _libSimpleSlider2['default'](blurRadiusSlider, {
          minValue: 0,
          maxValue: 40
        });
        this._blurRadiusSlider.on('update', this._onBlurRadiusUpdate.bind(this));
        this._blurRadiusSlider.setValue(this._initialSettings.blurRadius);
      }
    }, {
      key: '_onBlurRadiusUpdate',

      /**
       * Gets called when the value of the blur radius slider has been updated
       * @param {Number} value
       * @private
       */
      value: function _onBlurRadiusUpdate(value) {
        this._operation.setBlurRadius(value);
        this._ui.canvas.render();
        this._highlightDoneButton();
      }
    }, {
      key: '_handleKnobs',

      /**
       * Handles the knob dragging
       * @private
       */
      value: function _handleKnobs() {
        // Initially set gradient knob position
        var canvasSize = this._ui.canvas.size;
        var position = this._operation.getPosition().clone().multiply(canvasSize);
        this._gradientKnobPosition = position.clone().add(this._initialSettings.gradientRadius, 0);

        this._positionKnob.addEventListener('mousedown', this._onPositionKnobDown);
        this._positionKnob.addEventListener('touchstart', this._onPositionKnobDown);
        this._gradientKnob.addEventListener('mousedown', this._onGradientKnobDown);
        this._gradientKnob.addEventListener('touchstart', this._onGradientKnobDown);
      }
    }, {
      key: '_onPositionKnobDown',

      /**
       * Gets called when the user starts dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobDown(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialPosition = this._operation.getPosition().clone();
        this._gradientKnobDistance = this._gradientKnobPosition.clone().subtract(this._initialPosition.clone().multiply(canvasSize));

        document.addEventListener('mousemove', this._onPositionKnobDrag);
        document.addEventListener('touchmove', this._onPositionKnobDrag);

        document.addEventListener('mouseup', this._onPositionKnobUp);
        document.addEventListener('touchend', this._onPositionKnobUp);
      }
    }, {
      key: '_onPositionKnobDrag',

      /**
       * Gets called while the user starts drags the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.subtract(this._initialMousePosition);

        var newPosition = this._initialPosition.clone().multiply(canvasSize).add(diff);

        var maxPosition = canvasSize.clone().subtract(this._gradientKnobDistance);
        newPosition.clamp(new _libMathVector22['default'](0, 0), maxPosition);

        this._gradientKnobPosition.copy(newPosition).add(this._gradientKnobDistance);

        // Translate to 0...1
        newPosition.divide(canvasSize);

        this._operation.setPosition(newPosition);
        this._updateDOM();
        this._ui.canvas.render();
      }
    }, {
      key: '_onPositionKnobUp',

      /**
       * Gets called when the user stops dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobUp(e) {
        e.preventDefault();

        document.removeEventListener('mousemove', this._onPositionKnobDrag);
        document.removeEventListener('touchmove', this._onPositionKnobDrag);

        document.removeEventListener('mouseup', this._onPositionKnobUp);
        document.removeEventListener('touchend', this._onPositionKnobUp);
      }
    }, {
      key: '_onGradientKnobDown',

      /**
       * Gets called when the user starts dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialGradientKnobPosition = this._gradientKnobPosition.clone();

        document.addEventListener('mousemove', this._onGradientKnobDrag);
        document.addEventListener('touchmove', this._onGradientKnobDrag);

        document.addEventListener('mouseup', this._onGradientKnobUp);
        document.addEventListener('touchend', this._onGradientKnobUp);
      }
    }, {
      key: '_onGradientKnobDrag',

      /**
       * Gets called while the user starts drags the position knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.subtract(this._initialMousePosition);

        // Calculate new gradient knob position
        this._gradientKnobPosition = this._initialGradientKnobPosition.clone().add(diff);
        this._gradientKnobPosition.clamp(new _libMathVector22['default'](0, 0), canvasSize);

        // Calculate distance to position
        var position = this._operation.getPosition().clone().multiply(canvasSize);
        var distance = this._gradientKnobPosition.clone().subtract(position);
        var gradientRadius = Math.sqrt(Math.pow(distance.x, 2) + Math.pow(distance.y, 2));

        // Update operation
        this._operation.setGradientRadius(gradientRadius);
        this._updateDOM();
        this._ui.canvas.render();
      }
    }, {
      key: '_onGradientKnobUp',

      /**
       * Gets called when the user stops dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobUp(e) {
        e.preventDefault();

        document.removeEventListener('mousemove', this._onGradientKnobDrag);
        document.removeEventListener('touchmove', this._onGradientKnobDrag);

        document.removeEventListener('mouseup', this._onGradientKnobUp);
        document.removeEventListener('touchend', this._onGradientKnobUp);
      }
    }, {
      key: '_updateDOM',

      /**
       * Updates the knob
       * @private
       */
      value: function _updateDOM() {
        var canvasSize = this._ui.canvas.size;
        var position = this._operation.getPosition().clone().multiply(canvasSize);

        this._positionKnob.style.left = '' + position.x + 'px';
        this._positionKnob.style.top = '' + position.y + 'px';

        this._gradientKnob.style.left = '' + this._gradientKnobPosition.x + 'px';
        this._gradientKnob.style.top = '' + this._gradientKnobPosition.y + 'px';

        var circleSize = this._operation.getGradientRadius() * 2;
        this._circle.style.left = '' + position.x + 'px';
        this._circle.style.top = '' + position.y + 'px';
        this._circle.style.width = '' + circleSize + 'px';
        this._circle.style.height = '' + circleSize + 'px';
        this._circle.style.marginLeft = '-' + circleSize / 2 + 'px';
        this._circle.style.marginTop = '-' + circleSize / 2 + 'px';
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        if (this._operationExistedBefore) {
          this._operation.set(this._initialSettings);
        } else {
          this._ui.removeOperation('radial-blur');
        }
        this._ui.canvas.render();
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @override
       */
      value: function _onDone() {
        this._ui.addHistory(this._operation, {
          position: this._initialSettings.position.clone(),
          gradientRadius: this._initialSettings.gradientRadius,
          blurRadius: this._initialSettings.blurRadius
        }, this._operationExistedBefore);
      }
    }]);

    return RadialBlurControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  RadialBlurControl.prototype.identifier = 'radial-blur';

  exports['default'] = RadialBlurControl;
  module.exports = exports['default'];

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libSimpleSlider = __webpack_require__(102);

  var _libSimpleSlider2 = _interopRequireDefault(_libSimpleSlider);



  var TiltShiftControl = (function (_Control) {
    function TiltShiftControl() {
      _classCallCheck(this, TiltShiftControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(TiltShiftControl, _Control);

    _createClass(TiltShiftControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div class=\"imglykit-controls-icon\">\n    <img src=\"{{=it.helpers.assetPath('ui/night/blur/blur.png')}}\" />\n  </div>\n\n  <div>\n    {{var sliderId = \"imglykit-blur-radius-slider\";}}\n    {{#def.simpleSlider}}\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-tilt-shift-container\">\n  <div class=\"imglykit-canvas-tilt-shift-dot\" data-option=\"position\"></div>\n  <div class=\"imglykit-canvas-tilt-shift-dot\" data-option=\"gradient\"></div>\n  <div class=\"imglykit-canvas-tilt-shift-rect-container\">\n    <div class=\"imglykit-canvas-tilt-shift-rect\"></div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;

        this._partialTemplates.push(_libSimpleSlider2['default'].template);
        this._currentKnob = null;
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations['tilt-shift'];
        this._operation = this._ui.getOrCreateOperation('tilt-shift');

        this._initialSettings = {
          start: this._operation.getStart().clone(),
          end: this._operation.getEnd().clone(),
          gradientRadius: this._operation.getGradientRadius(),
          blurRadius: this._operation.getBlurRadius()
        };

        // Mouse event callbacks bound to the class context
        this._onPositionKnobDown = this._onPositionKnobDown.bind(this);
        this._onPositionKnobDrag = this._onPositionKnobDrag.bind(this);
        this._onPositionKnobUp = this._onPositionKnobUp.bind(this);
        this._onGradientKnobDown = this._onGradientKnobDown.bind(this);
        this._onGradientKnobDrag = this._onGradientKnobDrag.bind(this);
        this._onGradientKnobUp = this._onGradientKnobUp.bind(this);

        // Find DOM elements
        var selector = '.imglykit-canvas-tilt-shift-dot';
        this._positionKnob = this._canvasControls.querySelector('' + selector + '[data-option=\'position\']');
        this._gradientKnob = this._canvasControls.querySelector('' + selector + '[data-option=\'gradient\']');
        this._rect = this._canvasControls.querySelector('.imglykit-canvas-tilt-shift-rect');

        // Initialization
        this._initSliders();

        this._ui.canvas.render().then(function () {
          _this._handleKnobs();
          _this._updateDOM();
        });
      }
    }, {
      key: '_initSliders',

      /**
       * Initializes the slider controls
       * @private
       */
      value: function _initSliders() {
        var blurRadiusSlider = this._controls.querySelector('#imglykit-blur-radius-slider');
        this._blurRadiusSlider = new _libSimpleSlider2['default'](blurRadiusSlider, {
          minValue: 0,
          maxValue: 40
        });
        this._blurRadiusSlider.on('update', this._onBlurRadiusUpdate.bind(this));
        this._blurRadiusSlider.setValue(this._initialSettings.blurRadius);
      }
    }, {
      key: '_onBlurRadiusUpdate',

      /**
       * Gets called when the value of the blur radius slider has been updated
       * @param {Number} value
       * @private
       */
      value: function _onBlurRadiusUpdate(value) {
        this._operation.setBlurRadius(value);
        this._ui.canvas.render();
        this._highlightDoneButton();
      }
    }, {
      key: '_handleKnobs',

      /**
       * Handles the knob dragging
       * @private
       */
      value: function _handleKnobs() {
        // Add event listeners
        this._positionKnob.addEventListener('mousedown', this._onPositionKnobDown);
        this._positionKnob.addEventListener('touchstart', this._onPositionKnobDown);
        this._gradientKnob.addEventListener('mousedown', this._onGradientKnobDown);
        this._gradientKnob.addEventListener('touchstart', this._onGradientKnobDown);

        var canvasSize = this._ui.canvas.size;
        var _initialSettings = this._initialSettings;
        var start = _initialSettings.start;
        var end = _initialSettings.end;

        start = start.clone().multiply(canvasSize);
        end = end.clone().multiply(canvasSize);

        var dist = end.clone().subtract(start);
        var middle = start.clone().add(dist.clone().divide(2));

        var totalDist = Math.sqrt(Math.pow(dist.x, 2) + Math.pow(dist.y, 2));
        var factor = dist.clone().divide(totalDist).divide(2);

        // Calculate initial knob position (middle of start and end)
        this._knobPosition = middle.clone();

        // Calculate initial gradient knob position
        var gradientRadius = this._initialSettings.gradientRadius;
        this._gradientKnobPosition = middle.clone().add(-gradientRadius * factor.y, gradientRadius * factor.x);

        this._updateStartAndEnd();
        this._updateDOM();

        this._ui.canvas.render();
      }
    }, {
      key: '_updateStartAndEnd',

      /**
       * Calculate start and end positions using the knob positions
       * @private
       */
      value: function _updateStartAndEnd() {
        var canvasSize = this._ui.canvas.size;

        // Calculate distance between gradient and position knob
        var diff = this._gradientKnobPosition.clone().subtract(this._knobPosition);

        var start = this._knobPosition.clone().add(-diff.y, diff.x).divide(canvasSize);
        var end = this._knobPosition.clone().add(diff.y, -diff.x).divide(canvasSize);

        this._operation.set({ start: start, end: end });
      }
    }, {
      key: '_onPositionKnobDown',

      /**
       * Gets called when the user starts dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialPosition = this._knobPosition.clone();
        this._initialDistanceToGradientKnob = this._gradientKnobPosition.clone().subtract(this._initialPosition);

        document.addEventListener('mousemove', this._onPositionKnobDrag);
        document.addEventListener('touchmove', this._onPositionKnobDrag);

        document.addEventListener('mouseup', this._onPositionKnobUp);
        document.addEventListener('touchend', this._onPositionKnobUp);
      }
    }, {
      key: '_onPositionKnobDrag',

      /**
       * Gets called when the user drags the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.subtract(this._initialMousePosition);

        var newPosition = this._initialPosition.clone().add(diff);
        this._knobPosition.copy(newPosition);

        var minPosition = new _libMathVector22['default']().subtract(this._initialDistanceToGradientKnob);
        minPosition.clamp(new _libMathVector22['default'](0, 0));

        var maxPosition = canvasSize.clone().subtract(this._initialDistanceToGradientKnob);
        maxPosition.clamp(null, canvasSize);

        this._knobPosition.clamp(minPosition, maxPosition);

        this._gradientKnobPosition.copy(this._knobPosition).add(this._initialDistanceToGradientKnob);

        this._updateStartAndEnd();
        this._updateDOM();
        this._ui.canvas.render();
      }
    }, {
      key: '_onPositionKnobUp',

      /**
       * Gets called when the user stops dragging the position knob
       * @param {Event} e
       * @private
       */
      value: function _onPositionKnobUp(e) {
        e.preventDefault();

        document.removeEventListener('mousemove', this._onPositionKnobDrag);
        document.removeEventListener('touchmove', this._onPositionKnobDrag);

        document.removeEventListener('mouseup', this._onPositionKnobUp);
        document.removeEventListener('touchend', this._onPositionKnobUp);
      }
    }, {
      key: '_onGradientKnobDown',

      /**
       * Gets called when the user starts dragging the gradient knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialGradientKnobPosition = this._gradientKnobPosition.clone();

        document.addEventListener('mousemove', this._onGradientKnobDrag);
        document.addEventListener('touchmove', this._onGradientKnobDrag);

        document.addEventListener('mouseup', this._onGradientKnobUp);
        document.addEventListener('touchend', this._onGradientKnobUp);
      }
    }, {
      key: '_onGradientKnobDrag',

      /**
       * Gets called when the user drags the gradient knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.subtract(this._initialMousePosition);

        this._gradientKnobPosition.copy(this._initialGradientKnobPosition).add(diff);
        this._gradientKnobPosition.clamp(new _libMathVector22['default'](0, 0), canvasSize);

        var distance = this._gradientKnobPosition.clone().subtract(this._knobPosition);
        var newGradientRadius = 2 * Math.sqrt(Math.pow(distance.x, 2) + Math.pow(distance.y, 2));

        this._operation.setGradientRadius(newGradientRadius);
        this._updateStartAndEnd();
        this._updateDOM();
        this._ui.canvas.render();
      }
    }, {
      key: '_onGradientKnobUp',

      /**
       * Gets called when the user stops dragging the gradient knob
       * @param {Event} e
       * @private
       */
      value: function _onGradientKnobUp(e) {
        e.preventDefault();

        document.removeEventListener('mousemove', this._onGradientKnobDrag);
        document.removeEventListener('touchmove', this._onGradientKnobDrag);

        document.removeEventListener('mouseup', this._onGradientKnobUp);
        document.removeEventListener('touchend', this._onGradientKnobUp);
      }
    }, {
      key: '_updateDOM',

      /**
       * Updates the knob
       * @private
       */
      value: function _updateDOM() {
        var position = this._knobPosition;
        this._positionKnob.style.left = '' + position.x + 'px';
        this._positionKnob.style.top = '' + position.y + 'px';

        var gradientPosition = this._gradientKnobPosition;
        this._gradientKnob.style.left = '' + gradientPosition.x + 'px';
        this._gradientKnob.style.top = '' + gradientPosition.y + 'px';

        // Resize rectangle to worst case size
        var canvasSize = this._ui.canvas.size;
        var gradientRadius = this._operation.getGradientRadius();
        var rectSize = new _libMathVector22['default'](Math.sqrt(Math.pow(canvasSize.x, 2) + Math.pow(canvasSize.y, 2)) * 2, gradientRadius);

        this._rect.style.width = '' + rectSize.x + 'px';
        this._rect.style.height = '' + rectSize.y + 'px';
        this._rect.style.marginLeft = '-' + rectSize.x / 2 + 'px';
        this._rect.style.marginTop = '-' + rectSize.y / 2 + 'px';
        this._rect.style.left = '' + position.x + 'px';
        this._rect.style.top = '' + position.y + 'px';

        // Rotate rectangle
        var dist = gradientPosition.clone().subtract(position);
        var degrees = Math.atan2(dist.x, dist.y) * (180 / Math.PI);
        this._rect.style.transform = 'rotate(' + (-degrees).toFixed(2) + 'deg)';
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        if (this._operationExistedBefore) {
          this._operation.set(this._initialSettings);
        } else {
          this._ui.removeOperation('tilt-shift');
        }
        this._ui.canvas.render();
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @override
       */
      value: function _onDone() {
        this._ui.addHistory(this._operation, {
          start: this._initialSettings.start.clone(),
          end: this._initialSettings.end.clone(),
          blurRadius: this._initialSettings.blurRadius,
          gradientRadius: this._initialSettings.gradientRadius
        }, this._operationExistedBefore);
      }
    }]);

    return TiltShiftControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  TiltShiftControl.prototype.identifier = 'tilt-shift';

  exports['default'] = TiltShiftControl;
  module.exports = exports['default'];

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libSimpleSlider = __webpack_require__(102);

  var _libSimpleSlider2 = _interopRequireDefault(_libSimpleSlider);

  var _libColorPicker = __webpack_require__(103);

  var _libColorPicker2 = _interopRequireDefault(_libColorPicker);



  var FramesControl = (function (_Control) {
    function FramesControl() {
      _classCallCheck(this, FramesControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(FramesControl, _Control);

    _createClass(FramesControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    {{#def.simpleSlider}}\n  </div>\n\n  <div class=\"imglykit-controls-button\">\n    {{var colorpickerLabel = \"Color\";}}\n    {{#def.colorpicker}}\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;
        this._partialTemplates.push(_libSimpleSlider2['default'].template);
        this._partialTemplates.push(_libColorPicker2['default'].template);
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        this._operationExistedBefore = !!this._ui.operations.frames;
        this._operation = this._ui.getOrCreateOperation('frames');

        this._initialOptions = {
          thickness: this._operation.getThickness(),
          color: this._operation.getColor()
        };

        this._ui.canvas.render();

        // Init slider
        var sliderElement = this._controls.querySelector('.imglykit-slider');
        this._slider = new _libSimpleSlider2['default'](sliderElement, {
          minValue: 0,
          maxValue: 0.5
        });
        this._slider.on('update', this._onThicknessUpdate.bind(this));
        this._slider.setValue(this._initialOptions.thickness);

        // Init colorpicker
        var colorPickerElement = this._controls.querySelector('.imglykit-color-picker');
        this._colorPicker = new _libColorPicker2['default'](this._ui, colorPickerElement);
        this._colorPicker.on('update', this._onColorUpdate.bind(this));
        this._colorPicker.setValue(this._initialOptions.color);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        if (this._operationExistedBefore) {
          this._operation.set(this._initialOptions);
        } else {
          this._ui.removeOperation('frames');
        }
        this._ui.canvas.render();
      }
    }, {
      key: '_onThicknessUpdate',

      /**
       * Gets called when the thickness has been changed
       * @override
       */
      value: function _onThicknessUpdate(value) {
        this._operation.setThickness(value);
        this._ui.canvas.render();
        this._highlightDoneButton();
      }
    }, {
      key: '_onColorUpdate',

      /**
       * Gets called when the color has been changed
       * @override
       */
      value: function _onColorUpdate(value) {
        this._operation.setColor(value);
        this._ui.canvas.render();
        this._highlightDoneButton();
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @override
       */
      value: function _onDone() {
        this._ui.addHistory(this._operation, {
          color: this._initialOptions.color,
          thickness: this._initialOptions.thickness
        }, this._operationExistedBefore);
      }
    }]);

    return FramesControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  FramesControl.prototype.identifier = 'frames';

  exports['default'] = FramesControl;
  module.exports = exports['default'];

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);



  var StickersControl = (function (_Control) {
    function StickersControl() {
      _classCallCheck(this, StickersControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(StickersControl, _Control);

    _createClass(StickersControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      {{ for(var identifier in it.stickers) { }}\n        {{ var stickerPath = it.stickers[identifier]; }}\n        {{ var enabled = it.activeSticker === identifier; }}\n        <li data-identifier=\"{{= identifier}}\"{{? enabled}} class=\"imglykit-controls-item-active\"{{?}} style=\"background-image: url('{{=it.helpers.assetPath(stickerPath)}}');\">\n        </li>\n      {{ } }}\n    </ul>\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-stickers-container\">\n  <div class=\"imglykit-canvas-stickers\">\n    <img class=\"imglykit-canvas-sticker-image\" />\n    <div class=\"imglykit-knob\"></div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;

        /**
         * The registered stickers
         * @type {Object.<string, class>}
         */
        this._availableStickers = {};
        this._stickers = {};
        this._addDefaultStickers();
        this.selectStickers(null);
      }
    }, {
      key: '_addDefaultStickers',

      /**
       * Registers the default stickers
       * @private
       */
      value: function _addDefaultStickers() {
        this.addSticker('glasses-nerd', 'stickers/sticker-glasses-nerd.png');
        this.addSticker('glasses-normal', 'stickers/sticker-glasses-normal.png');
        this.addSticker('glasses-shutter-green', 'stickers/sticker-glasses-shutter-green.png');
        this.addSticker('glasses-shutter-yellow', 'stickers/sticker-glasses-shutter-yellow.png');
        this.addSticker('glasses-sun', 'stickers/sticker-glasses-sun.png');
        this.addSticker('hat-cap', 'stickers/sticker-hat-cap.png');
        this.addSticker('hat-cylinder', 'stickers/sticker-hat-cylinder.png');
        this.addSticker('hat-party', 'stickers/sticker-hat-party.png');
        this.addSticker('hat-sheriff', 'stickers/sticker-hat-sheriff.png');
        this.addSticker('heart', 'stickers/sticker-heart.png');
        this.addSticker('mustache-long', 'stickers/sticker-mustache-long.png');
        this.addSticker('mustache1', 'stickers/sticker-mustache1.png');
        this.addSticker('mustache2', 'stickers/sticker-mustache2.png');
        this.addSticker('mustache3', 'stickers/sticker-mustache3.png');
        this.addSticker('pipe', 'stickers/sticker-pipe.png');
        this.addSticker('snowflake', 'stickers/sticker-snowflake.png');
        this.addSticker('star', 'stickers/sticker-star.png');
      }
    }, {
      key: 'addSticker',

      /**
       * Registers the sticker with the given identifier and path
       * @private
       */
      value: function addSticker(identifier, path) {
        this._availableStickers[identifier] = path;
      }
    }, {
      key: 'selectStickers',

      /**
       * Selects the stickers
       * @param {Selector} selector
       */
      value: function selectStickers(selector) {
        this._stickers = {};

        var stickerIdentifiers = Object.keys(this._availableStickers);

        var selectedStickers = _libUtils2['default'].select(stickerIdentifiers, selector);
        for (var i = 0; i < selectedStickers.length; i++) {
          var identifier = selectedStickers[i];
          this._stickers[identifier] = this._availableStickers[identifier];
        }

        if (this._active) {
          this._renderControls();
        }
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations.stickers;
        this._operation = this._ui.getOrCreateOperation('stickers');

        // Don't render initially
        this._ui.removeOperation('stickers');

        this._initialSettings = {
          sticker: this._operation.getSticker(),
          position: this._operation.getPosition().clone(),
          size: this._operation.getSize().clone()
        };

        var canvasSize = this._ui.canvas.size;

        this._size = this._initialSettings.size.clone();
        this._position = this._initialSettings.position.clone().multiply(canvasSize);

        // Remember zoom level and zoom to fit the canvas
        this._initialZoomLevel = this._ui.canvas.zoomLevel;
        this._ui.canvas.zoomToFit();

        // Find DOM elements
        this._container = this._canvasControls.querySelector('.imglykit-canvas-stickers');
        this._stickerImage = this._canvasControls.querySelector('img');
        this._stickerImage.addEventListener('load', function () {
          _this._stickerSize = new _libMathVector22['default'](_this._stickerImage.width, _this._stickerImage.height);
          _this._onStickerLoad();
        });
        this._knob = this._canvasControls.querySelector('div.imglykit-knob');

        // Mouse event callbacks bound to the class context
        this._onImageDown = this._onImageDown.bind(this);
        this._onImageDrag = this._onImageDrag.bind(this);
        this._onImageUp = this._onImageUp.bind(this);
        this._onKnobDown = this._onKnobDown.bind(this);
        this._onKnobDrag = this._onKnobDrag.bind(this);
        this._onKnobUp = this._onKnobUp.bind(this);

        this._handleListItems();
        this._handleImage();
        this._handleKnob();
      }
    }, {
      key: '_handleListItems',

      /**
       * Handles the list item click events
       * @private
       */
      value: function _handleListItems() {
        var _this2 = this;

        var listItems = this._controls.querySelectorAll('li');
        this._listItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var listItem = _this2._listItems[i];
          var identifier = listItem.dataset.identifier;

          listItem.addEventListener('click', function () {
            _this2._onListItemClick(listItem);
          });

          if (!_this2._operationExistedBefore && i === 0 || _this2._operationExistedBefore && _this2._stickers[identifier] === _this2._initialSettings.sticker) {
            _this2._onListItemClick(listItem, false);
          }
        };

        // Listen to click events
        for (var i = 0; i < this._listItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_applySettings',

      /**
       * Resizes and positions the sticker according to the current settings
       * @private
       */
      value: function _applySettings() {
        var ratio = this._stickerSize.y / this._stickerSize.x;
        this._size.y = this._size.x * ratio;

        this._stickerImage.style.width = '' + this._size.x + 'px';
        this._stickerImage.style.height = '' + this._size.y + 'px';
        this._container.style.left = '' + this._position.x + 'px';
        this._container.style.top = '' + this._position.y + 'px';
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the user hits the back button
       * @override
       */
      value: function _onBack() {
        if (this._operationExistedBefore) {
          this._operation = this._ui.getOrCreateOperation('stickers');
          this._operation.set(this._initialSettings);
        } else {
          this._ui.removeOperation('stickers');
        }
        this._ui.canvas.setZoomLevel(this._initialZoomLevel);
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @protected
       */
      value: function _onDone() {
        // Map the position and size options to 0...1 values
        var canvasSize = this._ui.canvas.size;
        var position = this._position.clone().divide(canvasSize);
        var size = this._size.clone().divide(canvasSize);

        this._ui.canvas.setZoomLevel(this._initialZoomLevel, false);

        // Create a new operation and render it
        this._operation = this._ui.getOrCreateOperation('stickers');
        this._operation.set({
          sticker: this._availableStickers[this._sticker],
          position: position,
          size: size
        });
        this._ui.canvas.render();

        this._ui.addHistory(this, {
          sticker: this._initialSettings.sticker,
          position: this._initialSettings.position.clone(),
          size: this._initialSettings.size.clone()
        }, this._operationExistedBefore);
      }
    }, {
      key: '_handleKnob',

      /**
       * Handles the knob dragging
       * @private
       */
      value: function _handleKnob() {
        this._knob.addEventListener('mousedown', this._onKnobDown);
        this._knob.addEventListener('touchstart', this._onKnobDown);
      }
    }, {
      key: '_onKnobDown',

      /**
       * Gets called when the user clicks the knob
       * @param {Event} e
       * @private
       */
      value: function _onKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialSize = this._size.clone();

        document.addEventListener('mousemove', this._onKnobDrag);
        document.addEventListener('touchmove', this._onKnobDrag);

        document.addEventListener('mouseup', this._onKnobUp);
        document.addEventListener('touchend', this._onKnobUp);
      }
    }, {
      key: '_onKnobDrag',

      /**
       * Gets called when the user drags the knob
       * @param {Event} e
       * @private
       */
      value: function _onKnobDrag(e) {
        e.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.clone().subtract(this._initialMousePosition);

        var size = this._initialSize.clone();
        var ratio = this._stickerImage.height / this._stickerImage.width;
        size.x += diff.x;
        size.y = size.x * ratio;

        this._size.copy(size);

        this._applySettings();
        this._highlightDoneButton();
      }
    }, {
      key: '_onKnobUp',

      /**
       * Gets called when the user releases the knob
       * @param {Event} e
       * @private
       */
      value: function _onKnobUp() {
        document.removeEventListener('mousemove', this._onKnobDrag);
        document.removeEventListener('touchmove', this._onKnobDrag);

        document.removeEventListener('mouseup', this._onKnobUp);
        document.removeEventListener('touchend', this._onKnobUp);
      }
    }, {
      key: '_handleImage',

      /**
       * Handles the image dragging
       * @private
       */
      value: function _handleImage() {
        this._stickerImage.addEventListener('mousedown', this._onImageDown);
        this._stickerImage.addEventListener('touchstart', this._onImageDown);
      }
    }, {
      key: '_onImageDown',

      /**
       * Gets called when the user clicks the image
       * @param {Event} e
       * @private
       */
      value: function _onImageDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialPosition = this._position.clone();

        document.addEventListener('mousemove', this._onImageDrag);
        document.addEventListener('touchmove', this._onImageDrag);

        document.addEventListener('mouseup', this._onImageUp);
        document.addEventListener('touchend', this._onImageUp);
      }
    }, {
      key: '_onImageDrag',

      /**
       * Gets called when the user drags the image
       * @param {Event} e
       * @private
       */
      value: function _onImageDrag(e) {
        e.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.clone().subtract(this._initialMousePosition);

        var position = this._initialPosition.clone();
        position.add(diff);

        this._position.copy(position);

        this._applySettings();
        this._highlightDoneButton();
      }
    }, {
      key: '_onImageUp',

      /**
       * Gets called when the user releases the image
       * @param {Event} e
       * @private
       */
      value: function _onImageUp() {
        document.removeEventListener('mousemove', this._onImageDrag);
        document.removeEventListener('touchmove', this._onImageDrag);

        document.removeEventListener('mouseup', this._onImageUp);
        document.removeEventListener('touchend', this._onImageUp);
      }
    }, {
      key: '_onStickerLoad',

      /**
       * Gets called as soon as the sticker image has been loaded
       * @private
       */
      value: function _onStickerLoad() {
        this._size = new _libMathVector22['default'](this._stickerImage.width, this._stickerImage.height);

        if (typeof this._position === 'undefined') {
          this._position = new _libMathVector22['default'](0, 0);
        }

        this._applySettings();
      }
    }, {
      key: '_onListItemClick',

      /**
       * Gets called when the user clicked a list item
       * @private
       */
      value: function _onListItemClick(item) {
        var manually = arguments[1] === undefined ? true : arguments[1];

        this._deactivateAllItems();

        var identifier = item.dataset.identifier;

        var stickerPath = this._availableStickers[identifier];
        stickerPath = this._kit.getAssetPath(stickerPath);

        try {
          this._stickerImage.attributes.removeNamedItem('style');
        } catch (e) {}

        this._sticker = identifier;
        this._stickerImage.src = stickerPath;

        item.classList.add('imglykit-controls-item-active');

        if (manually) {
          this._highlightDoneButton();
        }
      }
    }, {
      key: '_deactivateAllItems',

      /**
       * Deactivates all list items
       * @private
       */
      value: function _deactivateAllItems() {
        for (var i = 0; i < this._listItems.length; i++) {
          var listItem = this._listItems[i];
          listItem.classList.remove('imglykit-controls-item-active');
        }
      }
    }, {
      key: 'context',

      /**
       * The data that is available to the template
       * @type {Object}
       * @override
       */
      get: function () {
        var context = _get(Object.getPrototypeOf(StickersControl.prototype), 'context', this);
        context.stickers = this._stickers;
        return context;
      }
    }]);

    return StickersControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  StickersControl.prototype.identifier = 'stickers';

  exports['default'] = StickersControl;
  module.exports = exports['default'];

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _control = __webpack_require__(94);

  var _control2 = _interopRequireDefault(_control);

  var _libColorPicker = __webpack_require__(103);

  var _libColorPicker2 = _interopRequireDefault(_libColorPicker);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);



  var TextControl = (function (_Control) {
    function TextControl() {
      _classCallCheck(this, TextControl);

      if (_Control != null) {
        _Control.apply(this, arguments);
      }
    }

    _inherits(TextControl, _Control);

    _createClass(TextControl, [{
      key: 'init',

      /**
       * Entry point for this control
       */
      value: function init() {
        var controlsTemplate = "{{##def.control:\n  <div>\n    <ul class=\"imglykit-controls-list imgly-controls-list-with-buttons\">\n      {{~it.fonts :value:index}}\n        <li data-name=\"{{= value.name}}\" data-weight=\"{{= value.weight}}\" style=\"font-family: {{= value.name}}; font-weight: {{= value.weight}}\">{{= value.name.substr(0, 2)}}</li>\n      {{~}}\n    </ul>\n  </div>\n\n  <div class=\"imglykit-controls-button\">\n    {{var colorpickerId = \"imglykit-text-foreground-color-picker\";}}\n    {{var colorpickerLabel = \"Foreground\";}}\n    {{#def.colorpicker}}\n  </div>\n\n  <div class=\"imglykit-controls-button\">\n    {{var colorpickerId = \"imglykit-text-background-color-picker\";}}\n    {{var colorpickerLabel = \"Background\";}}\n    {{#def.colorpicker}}\n  </div>\n\n  {{#def.doneButton}}\n#}}\n";
        this._controlsTemplate = controlsTemplate;

        var canvasControlsTemplate = "<div class=\"imglykit-canvas-text-container\">\n  <div class=\"imglykit-canvas-text\">\n    <div class=\"imglykit-crosshair\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/crosshair.png')}}\" />\n    </div>\n    <div class=\"imglykit-canvas-text-textarea\">\n      <textarea></textarea>\n      <div class=\"imglykit-knob\"></div>\n    </div>\n  </div>\n</div>\n";
        this._canvasControlsTemplate = canvasControlsTemplate;

        this._partialTemplates.push(_libColorPicker2['default'].template);

        this._fonts = [];
        this._addFonts();
      }
    }, {
      key: '_onEnter',

      /**
       * Gets called when this control is activated
       * @override
       */
      value: function _onEnter() {
        var _this = this;

        this._operationExistedBefore = !!this._ui.operations.text;
        this._operation = this._ui.getOrCreateOperation('text');

        // Don't render initially
        this._ui.removeOperation('text');

        var canvasSize = this._ui.canvas.size;

        this._initialSettings = {
          lineHeight: this._operation.getLineHeight(),
          fontSize: this._operation.getFontSize(),
          fontFamily: this._operation.getFontFamily(),
          fontWeight: this._operation.getFontWeight(),
          color: this._operation.getColor(),
          position: this._operation.getPosition(),
          text: this._operation.getText() || '',
          maxWidth: this._operation.getMaxWidth(),
          backgroundColor: this._operation.getBackgroundColor()
        };

        this._settings = {
          lineHeight: this._initialSettings.lineHeight,
          fontSize: this._initialSettings.fontSize,
          fontFamily: this._initialSettings.fontFamily,
          fontWeight: this._initialSettings.fontWeight,
          color: this._initialSettings.color.clone(),
          position: this._initialSettings.position.clone().multiply(canvasSize),
          text: this._initialSettings.text,
          maxWidth: this._initialSettings.maxWidth * canvasSize.x,
          backgroundColor: this._initialSettings.backgroundColor.clone()
        };

        // Remember zoom level and zoom to fit the canvas
        this._initialZoomLevel = this._ui.canvas.zoomLevel;

        this._container = this._canvasControls.querySelector('.imglykit-canvas-text');
        this._textarea = this._canvasControls.querySelector('textarea');
        this._textarea.focus();

        this._moveKnob = this._canvasControls.querySelector('.imglykit-crosshair');
        this._resizeKnob = this._canvasControls.querySelector('.imglykit-knob');

        // If the text has been edited before, subtract the knob width and padding
        if (this._operationExistedBefore) {
          this._settings.position.x -= 2;
          this._settings.position.y -= 2;
        }

        this._onTextareaKeyUp = this._onTextareaKeyUp.bind(this);
        this._onResizeKnobDown = this._onResizeKnobDown.bind(this);
        this._onResizeKnobDrag = this._onResizeKnobDrag.bind(this);
        this._onResizeKnobUp = this._onResizeKnobUp.bind(this);
        this._onMoveKnobDown = this._onMoveKnobDown.bind(this);
        this._onMoveKnobDrag = this._onMoveKnobDrag.bind(this);
        this._onMoveKnobUp = this._onMoveKnobUp.bind(this);
        this._onForegroundColorUpdate = this._onForegroundColorUpdate.bind(this);
        this._onBackgroundColorUpdate = this._onBackgroundColorUpdate.bind(this);

        this._initColorPickers();
        this._handleListItems();
        this._handleTextarea();
        this._handleResizeKnob();
        this._handleMoveKnob();

        // Resize asynchronously to render a frame
        setTimeout(function () {
          _this._resizeTextarea();
        }, 1);

        this._ui.canvas.zoomToFit().then(function () {
          _this._applySettings();
        });
      }
    }, {
      key: '_initColorPickers',

      /**
       * Initializes the color pickers
       * @private
       */
      value: function _initColorPickers() {
        var _this2 = this;

        var foregroundColorPicker = this._controls.querySelector('#imglykit-text-foreground-color-picker');
        this._foregroundColorPicker = new _libColorPicker2['default'](this._ui, foregroundColorPicker);
        this._foregroundColorPicker.setValue(this._operation.getColor());
        this._foregroundColorPicker.on('update', this._onForegroundColorUpdate);
        this._foregroundColorPicker.on('show', function () {
          _this2._backgroundColorPicker.hide();
        });

        var backgroundColorPicker = this._controls.querySelector('#imglykit-text-background-color-picker');
        this._backgroundColorPicker = new _libColorPicker2['default'](this._ui, backgroundColorPicker);
        this._backgroundColorPicker.setValue(this._operation.getBackgroundColor());
        this._backgroundColorPicker.on('update', this._onBackgroundColorUpdate);
        this._backgroundColorPicker.on('show', function () {
          _this2._foregroundColorPicker.hide();
        });
      }
    }, {
      key: '_handleListItems',

      /**
       * Handles the list item click events
       * @private
       */
      value: function _handleListItems() {
        var _this3 = this;

        var listItems = this._controls.querySelectorAll('li');
        this._listItems = Array.prototype.slice.call(listItems);

        var _loop = function (i) {
          var listItem = _this3._listItems[i];
          var name = listItem.dataset.name;

          listItem.addEventListener('click', function () {
            _this3._onListItemClick(listItem);
          });

          if (!_this3._operationExistedBefore && i === 0 || _this3._operationExistedBefore && name === _this3._initialSettings.fontFamily) {
            _this3._onListItemClick(listItem, false);
          }
        };

        // Listen to click events
        for (var i = 0; i < this._listItems.length; i++) {
          _loop(i);
        }
      }
    }, {
      key: '_handleTextarea',

      /**
       * Handles the text area key events
       * @private
       */
      value: function _handleTextarea() {
        this._textarea.addEventListener('keyup', this._onTextareaKeyUp);
      }
    }, {
      key: '_onTextareaKeyUp',

      /**
       * Gets called when the user releases a key inside the text area
       * @private
       */
      value: function _onTextareaKeyUp() {
        this._resizeTextarea();
        this._settings.text = this._textarea.value;
        this._highlightDoneButton();
      }
    }, {
      key: '_resizeTextarea',

      /**
       * Resizes the text area to fit the text inside of it
       * @private
       */
      value: function _resizeTextarea() {
        var scrollTop = this._textarea.scrollTop;

        if (!scrollTop) {
          var _scrollHeight = undefined,
              height = undefined;
          do {
            _scrollHeight = this._textarea.scrollHeight;
            height = this._textarea.offsetHeight;
            this._textarea.style.height = '' + (height - 5) + 'px';
          } while (_scrollHeight && _scrollHeight !== this._textarea.scrollHeight);
        }

        var scrollHeight = this._textarea.scrollHeight;
        this._textarea.style.height = '' + (scrollHeight + 20) + 'px';
      }
    }, {
      key: '_handleMoveKnob',

      /**
       * Handles the move knob dragging
       * @private
       */
      value: function _handleMoveKnob() {
        this._moveKnob.addEventListener('mousedown', this._onMoveKnobDown);
        this._moveKnob.addEventListener('touchstart', this._onMoveKnobDown);
      }
    }, {
      key: '_onMoveKnobDown',

      /**
       * Gets called when the user clicks the move knob
       * @private
       */
      value: function _onMoveKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialPosition = this._settings.position.clone();

        document.addEventListener('mousemove', this._onMoveKnobDrag);
        document.addEventListener('touchmove', this._onMoveKnobDrag);

        document.addEventListener('mouseup', this._onMoveKnobUp);
        document.addEventListener('tochend', this._onMoveKnobUp);
      }
    }, {
      key: '_onMoveKnobDrag',

      /**
       * Gets called when the user drags the move knob
       * @private
       */
      value: function _onMoveKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;

        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.clone().subtract(this._initialMousePosition);

        var minPosition = new _libMathVector22['default'](0, 0);
        var containerSize = new _libMathVector22['default'](this._container.offsetWidth, this._container.offsetHeight);
        var maxPosition = canvasSize.clone().subtract(containerSize);
        var position = this._initialPosition.clone().add(diff).clamp(minPosition, maxPosition);

        this._settings.position = position;

        this._container.style.left = '' + position.x + 'px';
        this._container.style.top = '' + position.y + 'px';
      }
    }, {
      key: '_onMoveKnobUp',

      /**
       * Gets called when the user releases the move knob
       * @private
       */
      value: function _onMoveKnobUp() {
        document.removeEventListener('mousemove', this._onMoveKnobDrag);
        document.removeEventListener('touchmove', this._onMoveKnobDrag);

        document.removeEventListener('mouseup', this._onMoveKnobUp);
        document.removeEventListener('touchend', this._onMoveKnobUp);
      }
    }, {
      key: '_handleResizeKnob',

      /**
       * Handles the resize knob dragging
       * @private
       */
      value: function _handleResizeKnob() {
        this._resizeKnob.addEventListener('mousedown', this._onResizeKnobDown);
        this._resizeKnob.addEventListener('touchstart', this._onResizeKnobDown);
      }
    }, {
      key: '_onResizeKnobDown',

      /**
       * Gets called when the user clicks the resize knob
       * @param {Event} e
       * @private
       */
      value: function _onResizeKnobDown(e) {
        e.preventDefault();

        this._initialMousePosition = _libUtils2['default'].getEventPosition(e);
        this._initialMaxWidth = this._settings.maxWidth;

        document.addEventListener('mousemove', this._onResizeKnobDrag);
        document.addEventListener('touchmove', this._onResizeKnobDrag);

        document.addEventListener('mouseup', this._onResizeKnobUp);
        document.addEventListener('touchend', this._onResizeKnobUp);
      }
    }, {
      key: '_onResizeKnobDrag',

      /**
       * Gets called when the user drags the resize knob
       * @param {Event} e
       * @private
       */
      value: function _onResizeKnobDrag(e) {
        e.preventDefault();

        var canvasSize = this._ui.canvas.size;
        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var diff = mousePosition.subtract(this._initialMousePosition);

        var position = this._settings.position.clone();
        var maxWidthAllowed = canvasSize.x - position.x;

        var maxWidth = this._initialMaxWidth + diff.x;
        maxWidth = Math.max(100, Math.min(maxWidthAllowed, maxWidth));
        this._settings.maxWidth = maxWidth;
        this._textarea.style.width = '' + maxWidth + 'px';

        this._resizeTextarea();
      }
    }, {
      key: '_onResizeKnobUp',

      /**
       * Gets called when the user releases the resize knob
       * @param {Event} e
       * @private
       */
      value: function _onResizeKnobUp() {
        document.removeEventListener('mousemove', this._onResizeKnobDrag);
        document.removeEventListener('touchmove', this._onResizeKnobDrag);

        document.removeEventListener('mouseup', this._onResizeKnobUp);
        document.removeEventListener('touchend', this._onResizeKnobUp);
      }
    }, {
      key: '_onForegroundColorUpdate',

      /**
       * Gets called when the user selects another color using
       * the color picker.
       * @param {Color} value
       * @private
       */
      value: function _onForegroundColorUpdate(value) {
        this._settings.color = value;
        this._applySettings();
        this._highlightDoneButton();
      }
    }, {
      key: '_onBackgroundColorUpdate',

      /**
       * Gets called when the user selects another color using
       * the color picker.
       * @param {Color} value
       * @private
       */
      value: function _onBackgroundColorUpdate(value) {
        this._settings.backgroundColor = value;
        this._applySettings();
        this._highlightDoneButton();
      }
    }, {
      key: '_applySettings',

      /**
       * Styles the textarea to represent the current settings
       * @private
       */
      value: function _applySettings() {
        var textarea = this._textarea;
        var settings = this._settings;

        var canvasSize = this._ui.canvas.size;
        var actualFontSize = settings.fontSize * canvasSize.y;

        this._container.style.left = '' + settings.position.x + 'px';
        this._container.style.top = '' + settings.position.y + 'px';

        textarea.value = settings.text;
        textarea.style.fontFamily = settings.fontFamily;
        textarea.style.fontSize = '' + actualFontSize + 'px';
        textarea.style.fontWeight = settings.fontWeight;
        textarea.style.lineHeight = settings.lineHeight;
        textarea.style.color = settings.color.toRGBA();
        textarea.style.backgroundColor = settings.backgroundColor.toRGBA();
        textarea.style.width = '' + settings.maxWidth + 'px';
      }
    }, {
      key: '_onListItemClick',

      /**
       * Gets called when the user clicked a list item
       * @private
       */
      value: function _onListItemClick(item) {
        var manually = arguments[1] === undefined ? true : arguments[1];

        this._deactivateAllItems();

        var _item$dataset = item.dataset;
        var name = _item$dataset.name;
        var weight = _item$dataset.weight;

        this._settings.fontFamily = name;
        this._settings.fontWeight = weight;

        this._applySettings();

        item.classList.add('imglykit-controls-item-active');

        if (manually) {
          this._highlightDoneButton();
        }
      }
    }, {
      key: '_deactivateAllItems',

      /**
       * Deactivates all list items
       * @private
       */
      value: function _deactivateAllItems() {
        for (var i = 0; i < this._listItems.length; i++) {
          var listItem = this._listItems[i];
          listItem.classList.remove('imglykit-controls-item-active');
        }
      }
    }, {
      key: '_addFonts',

      /**
       * Adds the default fonts
       * @private
       */
      value: function _addFonts() {
        this.addFont('bebasregular', 'normal');
        this.addFont('Franklin Gothic Medium', 'normal');
        this.addFont('Times New Roman', 'normal');
      }
    }, {
      key: 'addFont',

      /**
       * Adds a font with the given name and weight
       * @param {String} name
       * @param {String} weight
       */
      value: function addFont(name, weight) {
        this._fonts.push({ name: name, weight: weight });
      }
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @override
       */
      value: function _onDone() {
        var canvasSize = this._ui.canvas.size;
        var padding = new _libMathVector22['default'](2, 2);
        var position = this._settings.position.clone().add(padding).divide(canvasSize);

        this._ui.canvas.setZoomLevel(this._initialZoomLevel, false);

        this._operation = this._ui.getOrCreateOperation('text');
        this._operation.set({
          fontSize: this._settings.fontSize,
          fontFamily: this._settings.fontFamily,
          fontWeight: this._settings.fontWeight,
          color: this._settings.color,
          backgroundColor: this._settings.backgroundColor,
          position: position,
          text: this._settings.text,
          maxWidth: this._settings.maxWidth / canvasSize.x
        });
        this._ui.canvas.render();

        this._ui.addHistory(this, {
          fontFamily: this._initialSettings.fontFamily,
          fontWeight: this._initialSettings.fontWeight,
          color: this._initialSettings.color.clone(),
          backgroundColor: this._initialSettings.backgroundColor.clone(),
          position: this._initialSettings.position.clone(),
          text: this._initialSettings.text,
          maxWidth: this._initialSettings.maxWidth
        }, this._operationExistedBefore);
      }
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @override
       */
      value: function _onBack() {
        if (this._operationExistedBefore) {
          this._operation = this._ui.getOrCreateOperation('text');
          this._operation.set(this._initialSettings);
        } else {
          this._ui.removeOperation('text');
        }
        this._ui.canvas.setZoomLevel(this._initialZoomLevel);
      }
    }, {
      key: 'context',

      /**
       * The data that is available to the template
       * @type {Object}
       * @override
       */
      get: function () {
        var context = _get(Object.getPrototypeOf(TextControl.prototype), 'context', this);
        context.fonts = this._fonts;
        return context;
      }
    }]);

    return TextControl;
  })(_control2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  TextControl.prototype.identifier = 'text';

  exports['default'] = TextControl;
  module.exports = exports['default'];

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _dot = __webpack_require__(100);

  var _dot2 = _interopRequireDefault(_dot);

  var _baseHelpers = __webpack_require__(99);

  var _baseHelpers2 = _interopRequireDefault(_baseHelpers);

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _libScrollbar = __webpack_require__(81);

  var _libScrollbar2 = _interopRequireDefault(_libScrollbar);

  /**
   * To create an {@link ImglyKit.NightUI.Control} class of your own, call
   * this method and provide instance properties and functions.
   * @function
   */

  var _libExtend = __webpack_require__(59);

  var _libExtend2 = _interopRequireDefault(_libExtend);



  var Control = (function (_EventEmitter) {
    function Control(kit, ui, operation) {
      _classCallCheck(this, Control);

      _get(Object.getPrototypeOf(Control.prototype), 'constructor', this).call(this);

      this._kit = kit;
      this._ui = ui;
      this._operation = operation;
      this._helpers = new _baseHelpers2['default'](this._kit, this._ui, this._ui.options);
      this._partialTemplates = ["{{##def.doneButton:\n  <div class=\"imglykit-controls-button imglykit-controls-done\">\n    <img src=\"{{=it.helpers.assetPath('ui/night/buttons/done.png') }}\" />\n    <div class=\"imglykit-controls-done-highlighted\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/buttons/done-highlighted.png') }}\" />\n    </div>\n  </div>\n#}}\n"];

      this._template = "<div class=\"imglykit-controls-{{=it.identifier}}\">\n  <div class=\"imglykit-controls-button imglykit-controls-back\">\n    <img src=\"{{=it.helpers.assetPath('ui/night/buttons/back.png') }}\" />\n  </div>\n\n  {{#def.control}}\n</div>\n";
      this._active = false;

      this.init();
    }

    _inherits(Control, _EventEmitter);

    _createClass(Control, [{
      key: 'setContainers',

      /**
       * Sets the containers that the control will be rendered to
       * @param {DOMElement} controlsContainer
       * @param {DOMElement} canvasControlsContainer
       */
      value: function setContainers(controlsContainer, canvasControlsContainer) {
        this._controlsContainer = controlsContainer;
        this._canvasControlsContainer = canvasControlsContainer;
      }
    }, {
      key: 'init',

      /**
       * The entry point for this control
       */
      value: function init() {}
    }, {
      key: '_renderAllControls',

      /**
       * Renders the controls
       * @private
       */
      value: function _renderAllControls() {
        this._renderControls();
        this._renderCanvasControls();
        this._initScrollbar();
      }
    }, {
      key: '_renderControls',

      /**
       * Renders the controls
       * @private
       */
      value: function _renderControls() {
        if (typeof this._controlsTemplate === 'undefined') {
          throw new Error('Control#_renderOverviewControls: Control needs to define this._controlsTemplate.');
        }

        var template = this._partialTemplates.concat([this._controlsTemplate, this._template]).join('\r\n');

        // Render the template
        var renderFn = _dot2['default'].template(template);
        var html = renderFn(this.context);

        if (typeof this._controls !== 'undefined' && this._controls.parentNode !== null) {
          this._controls.parentNode.removeChild(this._controls);
        }

        // Create a wrapper
        this._controls = document.createElement('div');
        this._controls.innerHTML = html;

        // Append to DOM
        this._controlsContainer.appendChild(this._controls);
      }
    }, {
      key: '_renderCanvasControls',

      /**
       * Renders the canvas controls
       * @private
       */
      value: function _renderCanvasControls() {
        if (typeof this._canvasControlsTemplate === 'undefined') {
          return; // Canvas controls are optional
        }

        var template = this._partialTemplates.concat([this._canvasControlsTemplate]).join('\r\n');

        // Render the template
        var renderFn = _dot2['default'].template(template);
        var html = renderFn(this.context);

        // Create a wrapper
        this._canvasControls = document.createElement('div');
        this._canvasControls.innerHTML = html;

        // Append to DOM
        this._canvasControlsContainer.appendChild(this._canvasControls);
      }
    }, {
      key: '_initScrollbar',

      /**
       * Initializes the custom scrollbar
       * @private
       */
      value: function _initScrollbar() {
        var list = this._controls.querySelector('.imglykit-controls-list');
        if (list) {
          this._scrollbar = new _libScrollbar2['default'](list.parentNode);
        }
      }
    }, {
      key: '_removeControls',

      /**
       * Removes the controls from the DOM
       * @private
       */
      value: function _removeControls() {
        this._controls.parentNode.removeChild(this._controls);
        if (this._canvasControls) {
          this._canvasControls.parentNode.removeChild(this._canvasControls);
        }

        if (this._scrollbar) this._scrollbar.remove();
      }
    }, {
      key: '_handleBackAndDoneButtons',

      /**
       * Handles the back and done buttons
       * @private
       */
      value: function _handleBackAndDoneButtons() {
        // Back button
        this._backButton = this._controls.querySelector('.imglykit-controls-back');
        if (this._backButton) {
          this._backButton.addEventListener('click', this._onBackButtonClick.bind(this));
        }

        // Done button
        this._doneButton = this._controls.querySelector('.imglykit-controls-done');
        if (this._doneButton) {
          this._doneButton.addEventListener('click', this._onDoneButtonClick.bind(this));
        }
      }
    }, {
      key: '_onBackButtonClick',

      /**
       * Gets called when the back button has been clicked
       * @private
       */
      value: function _onBackButtonClick() {
        this._onBack();
        this.emit('back');
      }
    }, {
      key: '_onDoneButtonClick',

      /**
       * Gets called when the done button has been clicked
       * @private
       */
      value: function _onDoneButtonClick() {
        this._onDone();
        this.emit('back');
      }
    }, {
      key: '_highlightDoneButton',

      /**
       * Highlights the done button
       * @private
       */
      value: function _highlightDoneButton() {
        this._doneButton.classList.add('highlighted');
      }
    }, {
      key: 'enter',

      /**
       * Gets called when this control is activated
       * @internal Used by the SDK, don't override.
       */
      value: function enter() {
        this._active = true;

        this._ui.hideZoom();

        this._renderAllControls();
        this._handleBackAndDoneButtons();
        this._enableCanvasControls();
        this._onEnter();
      }
    }, {
      key: 'leave',

      /**
       * Gets called when this control is deactivated
       * @internal Used by the SDK, don't override.
       */
      value: function leave() {
        this._active = false;

        this._ui.showZoom();

        this._removeControls();
        this._disableCanvasControls();
        this._onLeave();
      }
    }, {
      key: '_enableCanvasControls',
      value: function _enableCanvasControls() {
        this._canvasControlsContainer.classList.remove('imglykit-canvas-controls-disabled');
      }
    }, {
      key: '_disableCanvasControls',
      value: function _disableCanvasControls() {
        this._canvasControlsContainer.classList.add('imglykit-canvas-controls-disabled');
      }
    }, {
      key: '_onEnter',

      // Protected methods

      /**
       * Gets called when this control is activated.
       * @protected
       */
      value: function _onEnter() {}
    }, {
      key: '_onLeave',

      /**
       * Gets called when this control is deactivated
       * @protected
       */
      value: function _onLeave() {}
    }, {
      key: '_onBack',

      /**
       * Gets called when the back button has been clicked
       * @protected
       */
      value: function _onBack() {}
    }, {
      key: '_onDone',

      /**
       * Gets called when the done button has been clicked
       * @protected
       */
      value: function _onDone() {}
    }, {
      key: 'onZoom',

      /**
       * Gets called when the zoom level has been changed while
       * this control is active
       */
      value: function onZoom() {}
    }, {
      key: 'context',

      /**
       * The data that is available to the template
       * @type {Object}
       */
      get: function () {
        return {
          helpers: this._helpers,
          identifier: this.identifier
        };
      }
    }]);

    return Control;
  })(_libEventEmitter2['default']);

  /**
   * A unique string that identifies this control.
   * @type {String}
   */
  Control.prototype.identifier = null;
  Control.extend = _libExtend2['default'];

  exports['default'] = Control;
  module.exports = exports['default'];

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   *
   * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
   * https://github.com/hMatoba/MinifyJpeg
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  exports['default'] = {
    encode: function encode(input) {
      var output = '',
          chr1 = undefined,
          chr2 = undefined,
          chr3 = '',
          enc1 = undefined,
          enc2 = undefined,
          enc3 = undefined,
          enc4 = '',
          i = 0;

      do {
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];

        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';
      } while (i < input.length);

      return output;
    },

    decode: function decode(input) {
      var chr1 = undefined,
          chr2 = undefined,
          chr3 = '',
          enc1 = undefined,
          enc2 = undefined,
          enc3 = undefined,
          enc4 = '',
          i = 0,
          buf = [];

      // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
      var base64test = /[^A-Za-z0-9\+\/\=]/g;
      if (base64test.exec(input)) {
        throw new Error('There were invalid base64 characters in the input text.\n' + 'Valid base64 characters are A-Z, a-z, 0-9, \'+\', \'/\',and \'=\'\n' + 'Expect errors in decoding.');
      }
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

      do {
        enc1 = KEY_STR.indexOf(input.charAt(i++));
        enc2 = KEY_STR.indexOf(input.charAt(i++));
        enc3 = KEY_STR.indexOf(input.charAt(i++));
        enc4 = KEY_STR.indexOf(input.charAt(i++));

        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;

        buf.push(chr1);

        if (enc3 !== 64) {
          buf.push(chr2);
        }
        if (enc4 !== 64) {
          buf.push(chr3);
        }

        chr1 = chr2 = chr3 = '';
        enc1 = enc2 = enc3 = enc4 = '';
      } while (i < input.length);

      return buf;
    }
  };
  module.exports = exports['default'];

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

  /*jshint unused:false */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  /**
   * @class
   * @alias ImglyKit.Renderer
   * @param {Vector2} dimensions
   * @private
   */

  var Renderer = (function (_EventEmitter) {
    function Renderer(dimensions, canvas) {
      _classCallCheck(this, Renderer);

      _get(Object.getPrototypeOf(Renderer.prototype), 'constructor', this).call(this);

      /**
       * @type {Canvas}
       * @private
       */
      this._canvas = canvas || this.createCanvas();

      if (!canvas) {
        this.setSize(dimensions);
      }

      /**
       * @type {RenderingContext}
       * @private
       */
      this._context = this._getContext();

      /**
       * The texture / image data cache
       * @type {Object.<String, *>}
       */
      this._cache = {};
    }

    _inherits(Renderer, _EventEmitter);

    _createClass(Renderer, [{
      key: 'cache',

      /**
       * Caches the current canvas content for the given identifier
       * @param {String} identifier
       */
      value: function cache(identifier) {}
    }, {
      key: 'drawCached',

      /**
       * Draws the stored texture / image data for the given identifier
       * @param {String} identifier
       */
      value: function drawCached(identifier) {}
    }, {
      key: 'createCanvas',

      /**
       * Creates a new canvas
       * @param {Number} [width]
       * @param {Number} [height]
       * @return {Canvas}
       * @private
       */
      value: function createCanvas(width, height) {
        var isBrowser = typeof window !== 'undefined';
        var canvas;
        if (isBrowser) {
          /* istanbul ignore next */
          canvas = document.createElement('canvas');
        } else {
          var Canvas = __webpack_require__(53);
          canvas = new Canvas();
        }

        // Apply width
        if (typeof width !== 'undefined') {
          canvas.width = width;
        }

        // Apply height
        if (typeof height !== 'undefined') {
          canvas.height = height;
        }

        return canvas;
      }
    }, {
      key: 'getSize',

      /**
       * Returns the current size of the canvas
       * @return {Vector2}
       */
      value: function getSize() {
        return new _libMathVector22['default'](this._canvas.width, this._canvas.height);
      }
    }, {
      key: 'setSize',

      /**
       * Sets the canvas dimensions
       * @param {Vector2} dimensions
       */
      value: function setSize(dimensions) {
        this._canvas.width = dimensions.x;
        this._canvas.height = dimensions.y;
      }
    }, {
      key: '_getContext',

      /**
       * Gets the rendering context from the Canva
       * @return {RenderingContext}
       * @abstract
       */
      value: function _getContext() {
        /* istanbul ignore next */
        throw new Error('Renderer#_getContext is abstract and not implemented in inherited class.');
      }
    }, {
      key: 'resizeTo',

      /**
       * Resizes the current canvas picture to the given dimensions
       * @param  {Vector2} dimensions
       * @return {Promise}
       * @abstract
       */
      value: function resizeTo(dimensions) {
        /* istanbul ignore next */
        throw new Error('Renderer#resizeTo is abstract and not implemented in inherited class.');
      }
    }, {
      key: 'drawImage',

      /**
       * Draws the given image on the canvas
       * @param  {Image} image
       * @abstract
       */
      value: function drawImage(image) {
        /* istanbul ignore next */
        throw new Error('Renderer#drawImage is abstract and not implemented in inherited class.');
      }
    }, {
      key: 'renderFinal',

      /**
       * Gets called after the stack has been rendered
       * @param  {Image} image
       */
      value: function renderFinal() {}
    }, {
      key: 'getCanvas',

      /**
       * Returns the canvas
       * @return {Canvas}
       */
      value: function getCanvas() {
        return this._canvas;
      }
    }, {
      key: 'getContext',

      /**
       * Returns the context
       * @return {RenderingContext}
       */
      value: function getContext() {
        return this._context;
      }
    }, {
      key: 'setCanvas',

      /**
       * Sets the current canvas to the given one
       * @param {Canvas} canvas
       */
      value: function setCanvas(canvas) {
        this._canvas = canvas;
        this._context = this._getContext();

        this.emit('new-canvas', this._canvas);
      }
    }, {
      key: 'setContext',

      /**
       * Sets the current context to the given one
       * @param {RenderingContext2D} context
       */
      value: function setContext(context) {
        this._context = context;
      }
    }, {
      key: 'reset',

      /**
       * Resets the renderer
       * @param {Boolean} resetCache = false
       */
      value: function reset() {
        var resetCache = arguments[0] === undefined ? false : arguments[0];
      }
    }, {
      key: 'identifier',

      /**
       * A unique string that identifies this renderer
       * @type {String}
       */
      get: function () {
        return null;
      }
    }], [{
      key: 'isSupported',

      /**
       * Checks whether this type of renderer is supported in the current environment
       * @abstract
       * @returns {boolean}
       */
      value: function isSupported() {
        /* istanbul ignore next */
        throw new Error('Renderer#isSupported is abstract and not implemented in inherited class.');
      }
    }]);

    return Renderer;
  })(_libEventEmitter2['default']);

  exports['default'] = Renderer;
  module.exports = exports['default'];

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!
   * Native Promise Only
   * v0.8.0-a (c) Kyle Simpson
   * MIT License: http://getify.mit-license.org
   * @license
   */

  "use strict";

  (function UMD(name, context, definition) {
    // special form of UMD for polyfilling across evironments
    context[name] = context[name] || definition();
    if (typeof module != "undefined" && module.exports) {
      module.exports = context[name];
    } else if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function $AMD$() {
        return context[name];
      }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
  })("Promise", typeof global != "undefined" ? global : undefined, function DEF() {
    /*jshint validthis:true */
    "use strict";

    var builtInProp,
        cycle,
        scheduling_queue,
        ToString = Object.prototype.toString,
        timer = typeof setImmediate != "undefined" ? function timer(fn) {
      return setImmediate(fn);
    } : setTimeout;

    // dammit, IE8.
    try {
      Object.defineProperty({}, "x", {});
      builtInProp = function builtInProp(obj, name, val, config) {
        return Object.defineProperty(obj, name, {
          value: val,
          writable: true,
          configurable: config !== false
        });
      };
    } catch (err) {
      builtInProp = function builtInProp(obj, name, val) {
        obj[name] = val;
        return obj;
      };
    }

    // Note: using a queue instead of array for efficiency
    scheduling_queue = (function Queue() {
      var first, last, item;

      function Item(fn, self) {
        this.fn = fn;
        this.self = self;
        this.next = void 0;
      }

      return {
        add: function add(fn, self) {
          item = new Item(fn, self);
          if (last) {
            last.next = item;
          } else {
            first = item;
          }
          last = item;
          item = void 0;
        },
        drain: function drain() {
          var f = first;
          first = last = cycle = void 0;

          while (f) {
            f.fn.call(f.self);
            f = f.next;
          }
        }
      };
    })();

    function schedule(fn, self) {
      scheduling_queue.add(fn, self);
      if (!cycle) {
        cycle = timer(scheduling_queue.drain);
      }
    }

    // promise duck typing
    function isThenable(o) {
      var _then,
          o_type = typeof o;

      if (o != null && (o_type == "object" || o_type == "function")) {
        _then = o.then;
      }
      return typeof _then == "function" ? _then : false;
    }

    function notify() {
      for (var i = 0; i < this.chain.length; i++) {
        notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
      }
      this.chain.length = 0;
    }

    // NOTE: This is a separate function to isolate
    // the `try..catch` so that other code can be
    // optimized better
    function notifyIsolated(self, cb, chain) {
      var ret, _then;
      try {
        if (cb === false) {
          chain.reject(self.msg);
        } else {
          if (cb === true) {
            ret = self.msg;
          } else {
            ret = cb.call(void 0, self.msg);
          }

          if (ret === chain.promise) {
            chain.reject(TypeError("Promise-chain cycle"));
          } else if (_then = isThenable(ret)) {
            _then.call(ret, chain.resolve, chain.reject);
          } else {
            chain.resolve(ret);
          }
        }
      } catch (err) {
        chain.reject(err);
      }
    }

    function resolve(msg) {
      var _then,
          self = this;

      // already triggered?
      if (self.triggered) {
        return;
      }

      self.triggered = true;

      // unwrap
      if (self.def) {
        self = self.def;
      }

      try {
        if (_then = isThenable(msg)) {
          schedule(function () {
            var def_wrapper = new MakeDefWrapper(self);
            try {
              _then.call(msg, function $resolve$() {
                resolve.apply(def_wrapper, arguments);
              }, function $reject$() {
                reject.apply(def_wrapper, arguments);
              });
            } catch (err) {
              reject.call(def_wrapper, err);
            }
          });
        } else {
          self.msg = msg;
          self.state = 1;
          if (self.chain.length > 0) {
            schedule(notify, self);
          }
        }
      } catch (err) {
        reject.call(new MakeDefWrapper(self), err);
      }
    }

    function reject(msg) {
      var self = this;

      // already triggered?
      if (self.triggered) {
        return;
      }

      self.triggered = true;

      // unwrap
      if (self.def) {
        self = self.def;
      }

      self.msg = msg;
      self.state = 2;
      if (self.chain.length > 0) {
        schedule(notify, self);
      }
    }

    function iteratePromises(Constructor, arr, resolver, rejecter) {
      for (var idx = 0; idx < arr.length; idx++) {
        (function IIFE(idx) {
          Constructor.resolve(arr[idx]).then(function $resolver$(msg) {
            resolver(idx, msg);
          }, rejecter);
        })(idx);
      }
    }

    function MakeDefWrapper(self) {
      this.def = self;
      this.triggered = false;
    }

    function MakeDef(self) {
      this.promise = self;
      this.state = 0;
      this.triggered = false;
      this.chain = [];
      this.msg = void 0;
    }

    function Promise(executor) {
      if (typeof executor != "function") {
        throw TypeError("Not a function");
      }

      if (this.__NPO__ !== 0) {
        throw TypeError("Not a promise");
      }

      // instance shadowing the inherited "brand"
      // to signal an already "initialized" promise
      this.__NPO__ = 1;

      var def = new MakeDef(this);

      this["then"] = function then(success, failure) {
        var o = {
          success: typeof success == "function" ? success : true,
          failure: typeof failure == "function" ? failure : false
        };
        // Note: `then(..)` itself can be borrowed to be used against
        // a different promise constructor for making the chained promise,
        // by substituting a different `this` binding.
        o.promise = new this.constructor(function extractChain(resolve, reject) {
          if (typeof resolve != "function" || typeof reject != "function") {
            throw TypeError("Not a function");
          }

          o.resolve = resolve;
          o.reject = reject;
        });
        def.chain.push(o);

        if (def.state !== 0) {
          schedule(notify, def);
        }

        return o.promise;
      };
      this["catch"] = function $catch$(failure) {
        return this.then(void 0, failure);
      };

      try {
        executor.call(void 0, function publicResolve(msg) {
          resolve.call(def, msg);
        }, function publicReject(msg) {
          reject.call(def, msg);
        });
      } catch (err) {
        reject.call(def, err);
      }
    }

    var PromisePrototype = builtInProp({}, "constructor", Promise,
    /*configurable=*/false);

    // Note: Android 4 cannot use `Object.defineProperty(..)` here
    Promise.prototype = PromisePrototype;

    // built-in "brand" to signal an "uninitialized" promise
    builtInProp(PromisePrototype, "__NPO__", 0,
    /*configurable=*/false);

    builtInProp(Promise, "resolve", function Promise$resolve(msg) {
      var Constructor = this;

      // spec mandated checks
      // note: best "isPromise" check that's practical for now
      if (msg && typeof msg == "object" && msg.__NPO__ === 1) {
        return msg;
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        resolve(msg);
      });
    });

    builtInProp(Promise, "reject", function Promise$reject(msg) {
      return new this(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        reject(msg);
      });
    });

    builtInProp(Promise, "all", function Promise$all(arr) {
      var Constructor = this;

      // spec mandated checks
      if (ToString.call(arr) != "[object Array]") {
        return Constructor.reject(TypeError("Not an array"));
      }
      if (arr.length === 0) {
        return Constructor.resolve([]);
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        var len = arr.length,
            msgs = Array(len),
            count = 0;

        iteratePromises(Constructor, arr, function resolver(idx, msg) {
          msgs[idx] = msg;
          if (++count === len) {
            resolve(msgs);
          }
        }, reject);
      });
    });

    builtInProp(Promise, "race", function Promise$race(arr) {
      var Constructor = this;

      // spec mandated checks
      if (ToString.call(arr) != "[object Array]") {
        return Constructor.reject(TypeError("Not an array"));
      }

      return new Constructor(function executor(resolve, reject) {
        if (typeof resolve != "function" || typeof reject != "function") {
          throw TypeError("Not a function");
        }

        iteratePromises(Constructor, arr, function resolver(idx, msg) {
          resolve(msg);
        }, reject);
      });
    });

    return Promise;
  });
  /* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(105).setImmediate))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

  /* jshint unused: false */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  /**
   * Base class for primitives. Extendable via {@link ImglyKit.Filter.Primitive#extend}
   * @class
   * @alias ImglyKit.Filter.Primitive
   */
  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Primitive = (function () {
    function Primitive(options) {
      _classCallCheck(this, Primitive);

      options = options || {};

      this._glslPrograms = {};
      this._options = options;
    }

    _createClass(Primitive, [{
      key: 'render',

      /**
       * Renders the primitive
       * @param  {Renderer} renderer
       * @return {Promise}
       */
      value: function render(renderer) {
        if (renderer.identifier === 'webgl') {
          this.renderWebGL(renderer);
        } else {
          this.renderCanvas(renderer);
        }
      }
    }, {
      key: 'renderWebGL',

      /**
       * Renders the primitive (WebGL)
       * @param  {CanvasRenderer} renderer
       */
      /* istanbul ignore next */
      value: function renderWebGL(renderer) {
        /* istanbul ignore next */
        throw new Error('Primitive#renderWebGL is abstract and not implemented in inherited class.');
      }
    }, {
      key: 'renderCanvas',

      /**
       * Renders the primitive (Canvas2D)
       * @param  {CanvasRenderer} renderer
       */
      value: function renderCanvas(renderer) {
        /* istanbul ignore next */
        throw new Error('Primitive#renderCanvas is abstract and not implemented in inherited class.');
      }
    }, {
      key: 'options',
      get: function () {
        return this._options;
      }
    }]);

    return Primitive;
  })();

  exports['default'] = Primitive;
  module.exports = exports['default'];

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Helpers = (function () {
    function Helpers(kit, ui, options) {
      _classCallCheck(this, Helpers);

      this._kit = kit;
      this._ui = ui;
      this._options = options;
    }

    _createClass(Helpers, [{
      key: 'assetPath',
      value: function assetPath(asset) {
        return this._options.assetsUrl + '/' + asset;
      }
    }]);

    return Helpers;
  })();

  exports['default'] = Helpers;
  module.exports = exports['default'];

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

  /* doT + auto-compilation of doT templates
   *
   * 2012, Laura Doktorova, https://github.com/olado/doT
   * Licensed under the MIT license
   *
   * Compiles .def, .dot, .jst files found under the specified path.
   * It ignores sub-directories.
   * Template files can have multiple extensions at the same time.
   * Files with .def extension can be included in other files via {{#def.name}}
   * Files with .dot extension are compiled into functions with the same name and
   * can be accessed as renderer.filename
   * Files with .jst extension are compiled into .js files. Produced .js file can be
   * loaded as a commonJS, AMD module, or just installed into a global variable
   * (default is set to window.render).
   * All inline defines defined in the .jst file are
   * compiled into separate functions and are available via _render.filename.definename
   *
   * Basic usage:
   * var dots = require("dot").process({path: "./views"});
   * dots.mytemplate({foo:"hello world"});
   *
   * The above snippet will:
   * 1. Compile all templates in views folder (.dot, .def, .jst)
   * 2. Place .js files compiled from .jst templates into the same folder.
   *    These files can be used with require, i.e. require("./views/mytemplate").
   * 3. Return an object with functions compiled from .dot templates as its properties.
   * 4. Render mytemplate template.
   */

  var fs = __webpack_require__(52),
    doT = module.exports = __webpack_require__(104);

  doT.process = function(options) {
    //path, destination, global, rendermodule, templateSettings
    return new InstallDots(options).compileAll();
  };

  function InstallDots(o) {
    this.__path     = o.path || "./";
    if (this.__path[this.__path.length-1] !== '/') this.__path += '/';
    this.__destination  = o.destination || this.__path;
    if (this.__destination[this.__destination.length-1] !== '/') this.__destination += '/';
    this.__global   = o.global || "window.render";
    this.__rendermodule = o.rendermodule || {};
    this.__settings   = o.templateSettings ? copy(o.templateSettings, copy(doT.templateSettings)) : undefined;
    this.__includes   = {};
  }

  InstallDots.prototype.compileToFile = function(path, template, def) {
    def = def || {};
    var modulename = path.substring(path.lastIndexOf("/")+1, path.lastIndexOf("."))
      , defs = copy(this.__includes, copy(def))
      , settings = this.__settings || doT.templateSettings
      , compileoptions = copy(settings)
      , defaultcompiled = doT.template(template, settings, defs)
      , exports = []
      , compiled = ""
      , fn;

    for (var property in defs) {
      if (defs[property] !== def[property] && defs[property] !== this.__includes[property]) {
        fn = undefined;
        if (typeof defs[property] === 'string') {
          fn = doT.template(defs[property], settings, defs);
        } else if (typeof defs[property] === 'function') {
          fn = defs[property];
        } else if (defs[property].arg) {
          compileoptions.varname = defs[property].arg;
          fn = doT.template(defs[property].text, compileoptions, defs);
        }
        if (fn) {
          compiled += fn.toString().replace('anonymous', property);
          exports.push(property);
        }
      }
    }
    compiled += defaultcompiled.toString().replace('anonymous', modulename);
    fs.writeFileSync(path, "(function(){" + compiled
      + "var itself=" + modulename + ", _encodeHTML=(" + doT.encodeHTMLSource.toString() + "(" + (settings.doNotSkipEncoded || '') + "));"
      + addexports(exports)
      + "if(typeof module!=='undefined' && module.exports) module.exports=itself;else if(typeof define==='function')define(function(){return itself;});else {"
      + this.__global + "=" + this.__global + "||{};" + this.__global + "['" + modulename + "']=itself;}}());");
  };

  function addexports(exports) {
    for (var ret ='', i=0; i< exports.length; i++) {
      ret += "itself." + exports[i]+ "=" + exports[i]+";";
    }
    return ret;
  }

  function copy(o, to) {
    to = to || {};
    for (var property in o) {
      to[property] = o[property];
    }
    return to;
  }

  function readdata(path) {
    var data = fs.readFileSync(path);
    if (data) return data.toString();
    console.log("problems with " + path);
  }

  InstallDots.prototype.compilePath = function(path) {
    var data = readdata(path);
    if (data) {
      return doT.template(data,
            this.__settings || doT.templateSettings,
            copy(this.__includes));
    }
  };

  InstallDots.prototype.compileAll = function() {
    console.log("Compiling all doT templates...");

    var defFolder = this.__path,
      sources = fs.readdirSync(defFolder),
      k, l, name;

    for( k = 0, l = sources.length; k < l; k++) {
      name = sources[k];
      if (/\.def(\.dot|\.jst)?$/.test(name)) {
        console.log("Loaded def " + name);
        this.__includes[name.substring(0, name.indexOf('.'))] = readdata(defFolder + name);
      }
    }

    for( k = 0, l = sources.length; k < l; k++) {
      name = sources[k];
      if (/\.dot(\.def|\.jst)?$/.test(name)) {
        console.log("Compiling " + name + " to function");
        this.__rendermodule[name.substring(0, name.indexOf('.'))] = this.compilePath(defFolder + name);
      }
      if (/\.jst(\.dot|\.def)?$/.test(name)) {
        console.log("Compiling " + name + " to file");
        this.compileToFile(this.__destination + name.substring(0, name.indexOf('.')) + '.js',
            readdata(defFolder + name));
      }
    }
    return this.__rendermodule;
  };


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);

  var _lodash = __webpack_require__(1);

  var _lodash2 = _interopRequireDefault(_lodash);



  var Slider = (function (_EventEmitter) {
    function Slider(element, options) {
      _classCallCheck(this, Slider);

      _get(Object.getPrototypeOf(Slider.prototype), 'constructor', this).call(this);

      this._element = element;
      this._options = _lodash2['default'].defaults(options, {
        minValue: 0,
        maxValue: 1,
        defaultValue: 0
      });

      this._value = this._options.defaultValue;

      this._sliderElement = this._element.querySelector('.imglykit-slider-slider');
      this._dotElement = this._element.querySelector('.imglykit-slider-dot');
      this._centerDotElement = this._element.querySelector('.imglykit-slider-center-dot');
      this._fillElement = this._element.querySelector('.imglykit-slider-fill');
      this._backgroundElement = this._element.querySelector('.imglykit-slider-background');

      // Mouse event callbacks bound to class context
      this._onMouseDown = this._onMouseDown.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      this._onMouseUp = this._onMouseUp.bind(this);
      this._onCenterDotClick = this._onCenterDotClick.bind(this);
      this._onBackgroundClick = this._onBackgroundClick.bind(this);

      this._backgroundElement.addEventListener('click', this._onBackgroundClick);
      this._fillElement.addEventListener('click', this._onBackgroundClick);

      this._handleDot();
    }

    _inherits(Slider, _EventEmitter);

    _createClass(Slider, [{
      key: 'setValue',

      /**
       * Sets the given value
       * @param {Number} value
       */
      value: function setValue(value) {
        this._value = value;

        var _options = this._options;
        var maxValue = _options.maxValue;
        var minValue = _options.minValue;

        // Calculate the X position
        var valueRange = maxValue - minValue;
        var percentage = (value - minValue) / valueRange;
        var sliderWidth = this._sliderElement.offsetWidth;
        this._setX(sliderWidth * percentage);
      }
    }, {
      key: '_setX',

      /**
       * Sets the slider position to the given X value and resizes
       * the fill div
       * @private
       */
      value: function _setX(x) {
        this._xPosition = x;
        this._dotElement.style.left = '' + x + 'px';

        // X position relative to center to simplify calculations
        var halfSliderWidth = this._sliderElement.offsetWidth / 2;
        var relativeX = x - halfSliderWidth;

        // Update style
        this._fillElement.style.width = '' + Math.abs(relativeX) + 'px';
        if (relativeX < 0) {
          this._fillElement.style.left = halfSliderWidth - Math.abs(relativeX) + 'px';
        } else {
          this._fillElement.style.left = halfSliderWidth + 'px';
        }
      }
    }, {
      key: '_handleDot',

      /**
       * Handles the dot dragging
       * @private
       */
      value: function _handleDot() {
        this._dotElement.addEventListener('mousedown', this._onMouseDown);
        this._dotElement.addEventListener('touchstart', this._onMouseDown);

        if (this._centerDotElement) {
          this._centerDotElement.addEventListener('click', this._onCenterDotClick);
        }
      }
    }, {
      key: '_onCenterDotClick',

      /**
       * Gets called when the user clicks the center button. Resets to default
       * settings.
       * @private
       */
      value: function _onCenterDotClick() {
        this.setValue(this._options.defaultValue);
        this.emit('update', this._value);
      }
    }, {
      key: '_onBackgroundClick',

      /**
       * Gets called when the user clicks on the slider background
       * @param {Event} e
       * @private
       */
      value: function _onBackgroundClick(e) {
        var position = _libUtils2['default'].getEventPosition(e);
        var sliderOffset = this._sliderElement.getBoundingClientRect();
        sliderOffset = new _libMathVector22['default'](sliderOffset.left, sliderOffset.y);

        var relativePosition = position.clone().subtract(sliderOffset);

        this._setX(relativePosition.x);
        this._updateValue();
      }
    }, {
      key: '_onMouseDown',

      /**
       * Gets called when the user presses a mouse button on the slider dot
       * @private
       */
      value: function _onMouseDown(e) {
        if (e.type === 'mousedown' && e.button !== 0) return;
        e.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(e);

        document.addEventListener('mousemove', this._onMouseMove);
        document.addEventListener('touchmove', this._onMouseMove);

        document.addEventListener('mouseup', this._onMouseUp);
        document.addEventListener('touchend', this._onMouseUp);

        // Remember initial position
        var dotPosition = this._dotElement.getBoundingClientRect();
        var sliderPosition = this._sliderElement.getBoundingClientRect();

        this._initialSliderX = dotPosition.left - sliderPosition.left;
        this._initialMousePosition = mousePosition;
      }
    }, {
      key: '_onMouseMove',

      /**
       * Gets called when the user drags the mouse
       * @private
       */
      value: function _onMouseMove(e) {
        e.preventDefault();

        var mousePosition = _libUtils2['default'].getEventPosition(e);
        var mouseDiff = mousePosition.subtract(this._initialMousePosition);

        // Add half width of the dot for negative margin compensation
        var halfDotWidth = this._dotElement.offsetWidth * 0.5;
        var newSliderX = this._initialSliderX + mouseDiff.x + halfDotWidth;

        // X boundaries
        var sliderWidth = this._sliderElement.offsetWidth;
        newSliderX = Math.max(0, Math.min(newSliderX, sliderWidth));

        this._setX(newSliderX);
        this._updateValue();
      }
    }, {
      key: '_updateValue',

      /**
       * Updates the value using the slider position
       * @private
       */
      value: function _updateValue() {
        var sliderWidth = this._sliderElement.offsetWidth;

        // Calculate the new value
        var _options2 = this._options;
        var minValue = _options2.minValue;
        var maxValue = _options2.maxValue;

        var percentage = this._xPosition / sliderWidth;
        var value = minValue + (maxValue - minValue) * percentage;
        this.emit('update', value);
      }
    }, {
      key: '_onMouseUp',

      /**
       * Gets called when the user does not press the mouse button anymore
       * @private
       */
      value: function _onMouseUp() {
        document.removeEventListener('mousemove', this._onMouseMove);
        document.removeEventListener('touchmove', this._onMouseMove);

        document.removeEventListener('mouseup', this._onMouseUp);
        document.removeEventListener('touchend', this._onMouseUp);
      }
    }], [{
      key: 'template',

      /**
       * The partial template string
       * @type {String}
       */
      get: function () {
        return "{{##def.slider:\n  <div class=\"imglykit-slider\" id=\"{{=(typeof sliderId === \"undefined\"?'':sliderId)}}\">\n    <div class=\"imglykit-slider-minus\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/slider/minus.png') }}\" />\n    </div>\n    <div class=\"imglykit-slider-slider\">\n      <div class=\"imglykit-slider-content\">\n        <div class=\"imglykit-slider-background\"></div>\n        <div class=\"imglykit-slider-fill\"></div>\n        <div class=\"imglykit-slider-center-dot\"></div>\n        <div class=\"imglykit-slider-dot\"></div>\n      </div>\n    </div>\n    <div class=\"imglykit-slider-plus\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/slider/plus.png') }}\" />\n    </div>\n  </div>\n#}}\n";
      }
    }]);

    return Slider;
  })(_libEventEmitter2['default']);

  exports['default'] = Slider;
  module.exports = exports['default'];

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _slider = __webpack_require__(101);

  var _slider2 = _interopRequireDefault(_slider);



  var SimpleSlider = (function (_Slider) {
    function SimpleSlider() {
      _classCallCheck(this, SimpleSlider);

      if (_Slider != null) {
        _Slider.apply(this, arguments);
      }
    }

    _inherits(SimpleSlider, _Slider);

    _createClass(SimpleSlider, [{
      key: '_setX',

      /**
       * Sets the slider position to the given X value and resizes
       * the fill div
       * @private
       */
      value: function _setX(x) {
        this._xPosition = x;

        this._dotElement.style.left = '' + x + 'px';
        this._fillElement.style.width = '' + x + 'px';
      }
    }], [{
      key: 'template',

      /**
       * The partial template string
       * @type {String}
       */
      get: function () {
        return "{{##def.simpleSlider:\n  <div class=\"imglykit-slider\" id=\"{{=(typeof sliderId === \"undefined\"?'':sliderId)}}\">\n    <div class=\"imglykit-slider-minus\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/slider/minus.png') }}\" />\n    </div>\n    <div class=\"imglykit-slider-slider\">\n      <div class=\"imglykit-slider-content\">\n        <div class=\"imglykit-slider-background\"></div>\n        <div class=\"imglykit-slider-fill\"></div>\n        <div class=\"imglykit-slider-dot\"></div>\n      </div>\n    </div>\n    <div class=\"imglykit-slider-plus\">\n      <img src=\"{{=it.helpers.assetPath('ui/night/slider/plus.png') }}\" />\n    </div>\n  </div>\n#}}\n";
      }
    }]);

    return SimpleSlider;
  })(_slider2['default']);

  exports['default'] = SimpleSlider;
  module.exports = exports['default'];

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

  /* global Image */
  /*
   * Photo Editor SDK - photoeditorsdk.com
   * Copyright (c) 2013-2015 9elements GmbH
   *
   * Released under Attribution-NonCommercial 3.0 Unported
   * http://creativecommons.org/licenses/by-nc/3.0/
   *
   * For commercial use, please contact us at contact@9elements.com
   */

  'use strict';

  Object.defineProperty(exports, '__esModule', {
    value: true
  });

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

  var _libEventEmitter = __webpack_require__(72);

  var _libEventEmitter2 = _interopRequireDefault(_libEventEmitter);

  var _libUtils = __webpack_require__(6);

  var _libUtils2 = _interopRequireDefault(_libUtils);

  var _libColor = __webpack_require__(7);

  var _libColor2 = _interopRequireDefault(_libColor);

  var _libMathVector2 = __webpack_require__(50);

  var _libMathVector22 = _interopRequireDefault(_libMathVector2);



  var ColorPicker = (function (_EventEmitter) {
    function ColorPicker(ui, element) {
      _classCallCheck(this, ColorPicker);

      _get(Object.getPrototypeOf(ColorPicker.prototype), 'constructor', this).call(this);

      this._ui = ui;
      this._element = element;
      this._visible = false;
      this._loaded = false;

      this._overlay = this._element.querySelector('.imglykit-color-picker-overlay');
      this._currentColorCanvas = this._element.querySelector('.imglykit-color-picker-color');

      this._alphaCanvas = this._element.querySelector('canvas.imglykit-color-picker-alpha');
      this._alphaKnob = this._element.querySelector('.imglykit-color-picker-alpha-container .imglykit-transparent-knob');

      this._hueCanvas = this._element.querySelector('canvas.imglykit-color-picker-hue');
      this._hueKnob = this._element.querySelector('.imglykit-color-picker-hue-container .imglykit-transparent-knob');

      this._saturationCanvas = this._element.querySelector('canvas.imglykit-color-picker-saturation');
      this._saturationKnob = this._element.querySelector('.imglykit-color-picker-saturation-container .imglykit-transparent-knob');

      this._transparencyImage = new Image();
      this._transparencyImage.src = ui.helpers.assetPath('ui/night/transparency.png');
      this._transparencyImage.addEventListener('load', this._onTransparencyImageLoad.bind(this));

      this._onAlphaCanvasDown = this._onAlphaCanvasDown.bind(this);
      this._onAlphaCanvasDrag = this._onAlphaCanvasDrag.bind(this);
      this._onAlphaCanvasUp = this._onAlphaCanvasUp.bind(this);
      this._onHueCanvasDown = this._onHueCanvasDown.bind(this);
      this._onHueCanvasDrag = this._onHueCanvasDrag.bind(this);
      this._onHueCanvasUp = this._onHueCanvasUp.bind(this);

      this._onSaturationCanvasDown = this._onSaturationCanvasDown.bind(this);
      this._onSaturationCanvasDrag = this._onSaturationCanvasDrag.bind(this);
      this._onSaturationCanvasUp = this._onSaturationCanvasUp.bind(this);

      this._onElementClick = this._onElementClick.bind(this);

      this._handleToggle();
      this._handleAlphaKnob();
      this._handleHueKnob();
      this._handleSaturationKnob();
    }

    _inherits(ColorPicker, _EventEmitter);

    _createClass(ColorPicker, [{
      key: '_onTransparencyImageLoad',
      value: function _onTransparencyImageLoad() {
        this._loaded = true;
        this._render();
      }
    }, {
      key: '_handleToggle',

      /**
       * Handles the toggling of the overlay
       * @private
       */
      value: function _handleToggle() {
        this._element.addEventListener('click', this._onElementClick);
      }
    }, {
      key: '_onElementClick',

      /**
       * Gets called when the element has been clicked
       * @param {Event} e
       * @private
       */
      value: function _onElementClick(e) {
        if (e.target === this._element || e.target === this._currentColorCanvas) {
          if (this._visible) {
            this.hide();
            this.emit('hide');
          } else {
            this.show();
            this.emit('show');
          }
        }
      }
    }, {
      key: 'hide',

      /**
       * Hides the color picker
       */
      value: function hide() {
        this._overlay.classList.remove('imglykit-visible');
        this._visible = false;
      }
    }, {
      key: 'show',

      /**
       * Shows the color picker
       */
      value: function show() {
        this._overlay.classList.add('imglykit-visible');
        this._visible = true;
      }
    }, {
      key: 'setValue',

      /**
       * Sets the given value
       * @param {Number} value
       */
      value: function setValue(value) {
        this._value = value.clone();

        var _value$toHSV = this._value.toHSV();

        var _value$toHSV2 = _slicedToArray(_value$toHSV, 3);

        var h = _value$toHSV2[0];
        var s = _value$toHSV2[1];
        var v = _value$toHSV2[2];

        this._hsvColor = { h: h, s: s, v: v };
        this._positionKnobs();
        this._render();
      }
    }, {
      key: '_positionKnobs',

      /**
       * Updates the knob positions to represent the current HSV color
       * @private
       */
      value: function _positionKnobs() {
        this._positionAlphaKnob();
        this._positionHueKnob();
        this._positionSaturationKnob();
      }
    }, {
      key: '_positionAlphaKnob',

      /**
       * Positions the alpha knob according to the current alpha value
       * @private
       */
      value: function _positionAlphaKnob() {
        var canvas = this._alphaCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var left = this._value.a * canvasSize.x;
        this._alphaKnob.style.left = '' + left + 'px';
      }
    }, {
      key: '_positionHueKnob',

      /**
       * Positions the hue knob according to the current hue value
       * @private
       */
      value: function _positionHueKnob() {
        var canvas = this._hueCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var top = this._hsvColor.h * canvasSize.y;
        this._hueKnob.style.top = '' + top + 'px';
      }
    }, {
      key: '_positionSaturationKnob',

      /**
       * Positions the saturation knob according to the current saturation value
       * @private
       */
      value: function _positionSaturationKnob() {
        var canvas = this._saturationCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        var left = this._hsvColor.s * canvasSize.x;
        this._saturationKnob.style.left = '' + left + 'px';
        var top = (1 - this._hsvColor.v) * canvasSize.y;
        this._saturationKnob.style.top = '' + top + 'px';
      }
    }, {
      key: '_render',

      /**
       * Updates and renders all controls to represent the current value
       * @private
       */
      value: function _render() {
        if (!this._loaded) return;
        this._renderCurrentColor();
        this._renderAlpha();
        this._renderHue();
        this._renderSaturation();
      }
    }, {
      key: '_renderCurrentColor',

      /**
       * Renders the currently selected color on the controls canvas
       * @private
       */
      value: function _renderCurrentColor() {
        var canvas = this._currentColorCanvas;
        var context = canvas.getContext('2d');

        var pattern = context.createPattern(this._transparencyImage, 'repeat');
        context.rect(0, 0, canvas.width, canvas.height);
        context.fillStyle = pattern;
        context.fill();

        context.fillStyle = this._value.toRGBA();
        context.fill();
      }
    }, {
      key: '_renderAlpha',

      /**
       * Renders the transparency canvas with the current color
       * @private
       */
      value: function _renderAlpha() {
        var canvas = this._alphaCanvas;
        var context = canvas.getContext('2d');

        var pattern = context.createPattern(this._transparencyImage, 'repeat');
        context.rect(0, 0, canvas.width, canvas.height);
        context.fillStyle = pattern;
        context.fill();

        var gradient = context.createLinearGradient(0, 0, canvas.width, canvas.height);

        var color = this._value.clone();
        color.a = 0;
        gradient.addColorStop(0, color.toRGBA());
        gradient.addColorStop(1, this._value.toHex());
        context.fillStyle = gradient;
        context.fill();
      }
    }, {
      key: '_renderHue',

      /**
       * Renders the hue canvas
       * @private
       */
      value: function _renderHue() {
        var canvas = this._hueCanvas;
        var context = canvas.getContext('2d');

        var color = new _libColor2['default']();
        for (var y = 0; y < canvas.height; y++) {
          var ratio = y / canvas.height;
          color.fromHSV(ratio, 1, 1);

          context.strokeStyle = color.toRGBA();
          context.beginPath();
          context.moveTo(0, y);
          context.lineTo(canvas.width, y);
          context.stroke();
        }
      }
    }, {
      key: '_renderSaturation',

      /**
       * Renders the saturation canvas
       * @private
       */
      value: function _renderSaturation() {
        var canvas = this._saturationCanvas;
        var context = canvas.getContext('2d');

        var imageData = context.getImageData(0, 0, canvas.width, canvas.height);

        var color = new _libColor2['default'](1, 0, 0, 1);
        for (var y = 0; y < canvas.height; y++) {
          var value = (canvas.height - y) / canvas.height;
          for (var x = 0; x < canvas.width; x++) {
            var saturation = x / canvas.width;
            color.fromHSV(this._hsvColor.h, saturation, value);
            var r = color.r;
            var g = color.g;
            var b = color.b;
            var a = color.a;

            var index = (y * canvas.width + x) * 4;

            imageData.data[index] = r * 255;
            imageData.data[index + 1] = g * 255;
            imageData.data[index + 2] = b * 255;
            imageData.data[index + 3] = a * 255;
          }
        }

        context.putImageData(imageData, 0, 0);
      }
    }, {
      key: '_handleAlphaKnob',

      /**
       * Handles the dragging of the alpha knob
       * @private
       */
      value: function _handleAlphaKnob() {
        this._alphaCanvas.addEventListener('mousedown', this._onAlphaCanvasDown);
        this._alphaCanvas.addEventListener('touchstart', this._onAlphaCanvasDown);
      }
    }, {
      key: '_onAlphaCanvasDown',

      /**
       * Gets called when the user clicks the alpha knob
       * @param {Event} e
       * @private
       */
      value: function _onAlphaCanvasDown(e) {
        e.preventDefault();

        this._onAlphaCanvasDrag(e);

        document.addEventListener('mousemove', this._onAlphaCanvasDrag);
        document.addEventListener('touchmove', this._onAlphaCanvasDrag);

        document.addEventListener('mouseup', this._onAlphaCanvasUp);
        document.addEventListener('touchend', this._onAlphaCanvasUp);
      }
    }, {
      key: '_onAlphaCanvasDrag',

      /**
       * Gets called when the user drags the alpha knob
       * @param {Event} e
       * @private
       */
      value: function _onAlphaCanvasDrag(e) {
        e.preventDefault();

        // Calculate relative mouse position on canvas
        var canvas = this._alphaCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);
        var mousePosition = _libUtils2['default'].getEventPosition(e);

        var _canvas$getBoundingClientRect = canvas.getBoundingClientRect();

        var left = _canvas$getBoundingClientRect.left;
        var top = _canvas$getBoundingClientRect.top;

        var offset = new _libMathVector22['default'](left, top);
        var relativePosition = mousePosition.subtract(offset);
        relativePosition.clamp(new _libMathVector22['default'](0, 0), canvasSize);

        // Update knob css positioning
        this._alphaKnob.style.left = '' + relativePosition.x + 'px';

        // Update alpha value
        this._value.a = relativePosition.x / canvasSize.x;
        this._updateColor();
      }
    }, {
      key: '_onAlphaCanvasUp',

      /**
       * Gets called when the user stops dragging the alpha knob
       * @param {Event} e
       * @private
       */
      value: function _onAlphaCanvasUp() {
        document.removeEventListener('mousemove', this._onAlphaCanvasDrag);
        document.removeEventListener('touchmove', this._onAlphaCanvasDrag);

        document.removeEventListener('mouseup', this._onAlphaCanvasUp);
        document.removeEventListener('touchend', this._onAlphaCanvasUp);
      }
    }, {
      key: '_handleHueKnob',

      /**
       * Handles the dragging of the hue knob
       * @private
       */
      value: function _handleHueKnob() {
        this._hueCanvas.addEventListener('mousedown', this._onHueCanvasDown);
        this._hueCanvas.addEventListener('touchstart', this._onHueCanvasDown);
      }
    }, {
      key: '_onHueCanvasDown',

      /**
       * Gets called when the user clicks the canvas knob
       * @param {Event} e
       * @private
       */
      value: function _onHueCanvasDown(e) {
        e.preventDefault();

        this._onHueCanvasDrag(e);

        document.addEventListener('mousemove', this._onHueCanvasDrag);
        document.addEventListener('touchmove', this._onHueCanvasDrag);

        document.addEventListener('mouseup', this._onHueCanvasUp);
        document.addEventListener('touchend', this._onHueCanvasUp);
      }
    }, {
      key: '_onHueCanvasDrag',

      /**
       * Gets called when the user drags the hue knob
       * @param {Event} e
       * @private
       */
      value: function _onHueCanvasDrag(e) {
        e.preventDefault();

        var canvas = this._hueCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        // Calculate relative mouse position on canvas
        var mousePosition = _libUtils2['default'].getEventPosition(e);

        var _canvas$getBoundingClientRect2 = canvas.getBoundingClientRect();

        var left = _canvas$getBoundingClientRect2.left;
        var top = _canvas$getBoundingClientRect2.top;

        var offset = new _libMathVector22['default'](left, top);
        var relativePosition = mousePosition.subtract(offset);
        relativePosition.clamp(new _libMathVector22['default'](0, 0), canvasSize);

        // Update saturaiton knob css positioning
        this._hueKnob.style.top = '' + relativePosition.y + 'px';

        // Update saturation and value
        relativePosition.divide(canvasSize);
        this._hsvColor.h = relativePosition.y;
        this._updateColor();
      }
    }, {
      key: '_onHueCanvasUp',

      /**
       * Gets called when the user stops dragging the alpha knob
       * @param {Event} e
       * @private
       */
      value: function _onHueCanvasUp() {
        document.removeEventListener('mousemove', this._onHueCanvasDrag);
        document.removeEventListener('touchmove', this._onHueCanvasDrag);

        document.removeEventListener('mouseup', this._onHueCanvasUp);
        document.removeEventListener('touchend', this._onHueCanvasUp);
      }
    }, {
      key: '_handleSaturationKnob',

      /**
       * Handles the dragging of the saturation knob
       * @private
       */
      value: function _handleSaturationKnob() {
        this._saturationCanvas.addEventListener('mousedown', this._onSaturationCanvasDown);
        this._saturationCanvas.addEventListener('touchstart', this._onSaturationCanvasDown);
      }
    }, {
      key: '_onSaturationCanvasDown',

      /**
       * Gets called when the user clicks the saturation canvas
       * @param {Event} e
       * @private
       */
      value: function _onSaturationCanvasDown(e) {
        e.preventDefault();

        this._onSaturationCanvasDrag(e);

        document.addEventListener('mousemove', this._onSaturationCanvasDrag);
        document.addEventListener('touchmove', this._onSaturationCanvasDrag);

        document.addEventListener('mouseup', this._onSaturationCanvasUp);
        document.addEventListener('touchend', this._onSaturationCanvasUp);
      }
    }, {
      key: '_onSaturationCanvasDrag',

      /**
       * Gets called when the user drags the saturation knob
       * @param {Event} e
       * @private
       */
      value: function _onSaturationCanvasDrag(e) {
        e.preventDefault();

        var canvas = this._saturationCanvas;
        var canvasSize = new _libMathVector22['default'](canvas.width, canvas.height);

        // Calculate relative mouse position on canvas
        var mousePosition = _libUtils2['default'].getEventPosition(e);

        var _canvas$getBoundingClientRect3 = canvas.getBoundingClientRect();

        var left = _canvas$getBoundingClientRect3.left;
        var top = _canvas$getBoundingClientRect3.top;

        var offset = new _libMathVector22['default'](left, top);
        var relativePosition = mousePosition.subtract(offset);
        relativePosition.clamp(0, canvas.width);

        // Update saturaiton knob css positioning
        this._saturationKnob.style.left = '' + relativePosition.x + 'px';
        this._saturationKnob.style.top = '' + relativePosition.y + 'px';

        // Update saturation and value
        relativePosition.divide(canvasSize);
        this._hsvColor.s = relativePosition.x;
        this._hsvColor.v = 1 - relativePosition.y;
        this._updateColor();
      }
    }, {
      key: '_onSaturationCanvasUp',

      /**
       * Gets called when the user stops dragging the saturation knob
       * @param {Event} e
       * @private
       */
      value: function _onSaturationCanvasUp() {
        document.removeEventListener('mousemove', this._onSaturationCanvasDrag);
        document.removeEventListener('touchmove', this._onSaturationCanvasDrag);

        document.removeEventListener('mouseup', this._onSaturationCanvasUp);
        document.removeEventListener('touchend', this._onSaturationCanvasUp);
      }
    }, {
      key: '_updateColor',

      /**
       * Updates the attached color, emits the `update` event and triggers
       * a render
       * @private
       */
      value: function _updateColor() {
        this._value.fromHSV(this._hsvColor.h, this._hsvColor.s, this._hsvColor.v);
        this.emit('update', this._value);
        this._render();
      }
    }], [{
      key: 'template',

      /**
       * The partial template string
       * @type {String}
       */
      get: function () {
        return "{{##def.colorpicker:\n  <div class=\"imglykit-color-picker\" id=\"{{=(typeof colorpickerId === \"undefined\"?'':colorpickerId)}}\">\n    <canvas class=\"imglykit-color-picker-color\" width=\"34\" height=\"34\"></canvas>\n    <div class=\"imglykit-controls-item-label\">{{=(typeof colorpickerLabel === \"undefined\"?'':colorpickerLabel)}}</div>\n\n    <div class=\"imglykit-color-picker-overlay\">\n      <div class=\"imglykit-color-picker-alpha-container\">\n        <canvas class=\"imglykit-color-picker-alpha\" width=\"200\" height=\"30\"></canvas>\n        <div class=\"imglykit-transparent-knob\"></div>\n      </div>\n\n      <div class=\"imglykit-color-picker-saturation-container\">\n        <canvas class=\"imglykit-color-picker-saturation\" width=\"160\" height=\"160\"></canvas>\n        <div class=\"imglykit-transparent-knob\"></div>\n      </div>\n\n      <div class=\"imglykit-color-picker-hue-container\">\n        <canvas class=\"imglykit-color-picker-hue\" width=\"30\" height=\"160\"></canvas>\n        <div class=\"imglykit-transparent-knob\"></div>\n      </div>\n    </div>\n  </div>\n#}}\n";
      }
    }]);

    return ColorPicker;
  })(_libEventEmitter2['default']);

  exports['default'] = ColorPicker;
  module.exports = exports['default'];

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

  var __WEBPACK_AMD_DEFINE_RESULT__;// doT.js
  // 2011-2014, Laura Doktorova, https://github.com/olado/doT
  // Licensed under the MIT license.

  (function() {
    "use strict";

    var doT = {
      version: "1.0.3",
      templateSettings: {
        evaluate:    /\{\{([\s\S]+?(\}?)+)\}\}/g,
        interpolate: /\{\{=([\s\S]+?)\}\}/g,
        encode:      /\{\{!([\s\S]+?)\}\}/g,
        use:         /\{\{#([\s\S]+?)\}\}/g,
        useParams:   /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,
        define:      /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
        defineParams:/^\s*([\w$]+):([\s\S]+)/,
        conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
        iterate:     /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
        varname:  "it",
        strip:    true,
        append:   true,
        selfcontained: false,
        doNotSkipEncoded: false
      },
      template: undefined, //fn, compile template
      compile:  undefined  //fn, for express
    }, _globals;

    doT.encodeHTMLSource = function(doNotSkipEncoded) {
      var encodeHTMLRules = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': "&#34;", "'": "&#39;", "/": "&#47;" },
        matchHTML = doNotSkipEncoded ? /[&<>"'\/]/g : /&(?!#?\w+;)|<|>|"|'|\//g;
      return function(code) {
        return code ? code.toString().replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : "";
      };
    };

    _globals = (function(){ return this || (0,eval)("this"); }());

    if (typeof module !== "undefined" && module.exports) {
      module.exports = doT;
    } else if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return doT;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
      _globals.doT = doT;
    }

    var startend = {
      append: { start: "'+(",      end: ")+'",      startencode: "'+encodeHTML(" },
      split:  { start: "';out+=(", end: ");out+='", startencode: "';out+=encodeHTML(" }
    }, skip = /$^/;

    function resolveDefs(c, block, def) {
      return ((typeof block === "string") ? block : block.toString())
      .replace(c.define || skip, function(m, code, assign, value) {
        if (code.indexOf("def.") === 0) {
          code = code.substring(4);
        }
        if (!(code in def)) {
          if (assign === ":") {
            if (c.defineParams) value.replace(c.defineParams, function(m, param, v) {
              def[code] = {arg: param, text: v};
            });
            if (!(code in def)) def[code]= value;
          } else {
            new Function("def", "def['"+code+"']=" + value)(def);
          }
        }
        return "";
      })
      .replace(c.use || skip, function(m, code) {
        if (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {
          if (def[d] && def[d].arg && param) {
            var rw = (d+":"+param).replace(/'|\\/g, "_");
            def.__exp = def.__exp || {};
            def.__exp[rw] = def[d].text.replace(new RegExp("(^|[^\\w$])" + def[d].arg + "([^\\w$])", "g"), "$1" + param + "$2");
            return s + "def.__exp['"+rw+"']";
          }
        });
        var v = new Function("def", "return " + code)(def);
        return v ? resolveDefs(c, v, def) : v;
      });
    }

    function unescape(code) {
      return code.replace(/\\('|\\)/g, "$1").replace(/[\r\t\n]/g, " ");
    }

    doT.template = function(tmpl, c, def) {
      c = c || doT.templateSettings;
      var cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,
        str  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;

      str = ("var out='" + (c.strip ? str.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ")
            .replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""): str)
        .replace(/'|\\/g, "\\$&")
        .replace(c.interpolate || skip, function(m, code) {
          return cse.start + unescape(code) + cse.end;
        })
        .replace(c.encode || skip, function(m, code) {
          needhtmlencode = true;
          return cse.startencode + unescape(code) + cse.end;
        })
        .replace(c.conditional || skip, function(m, elsecase, code) {
          return elsecase ?
            (code ? "';}else if(" + unescape(code) + "){out+='" : "';}else{out+='") :
            (code ? "';if(" + unescape(code) + "){out+='" : "';}out+='");
        })
        .replace(c.iterate || skip, function(m, iterate, vname, iname) {
          if (!iterate) return "';} } out+='";
          sid+=1; indv=iname || "i"+sid; iterate=unescape(iterate);
          return "';var arr"+sid+"="+iterate+";if(arr"+sid+"){var "+vname+","+indv+"=-1,l"+sid+"=arr"+sid+".length-1;while("+indv+"<l"+sid+"){"
            +vname+"=arr"+sid+"["+indv+"+=1];out+='";
        })
        .replace(c.evaluate || skip, function(m, code) {
          return "';" + unescape(code) + "out+='";
        })
        + "';return out;")
        .replace(/\n/g, "\\n").replace(/\t/g, '\\t').replace(/\r/g, "\\r")
        .replace(/(\s|;|\}|^|\{)out\+='';/g, '$1').replace(/\+''/g, "");
        //.replace(/(\s|;|\}|^|\{)out\+=''\+/g,'$1out+=');

      if (needhtmlencode) {
        if (!c.selfcontained && _globals && !_globals._encodeHTML) _globals._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);
        str = "var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : ("
          + doT.encodeHTMLSource.toString() + "(" + (c.doNotSkipEncoded || '') + "));"
          + str;
      }
      try {
        return new Function(c.varname, str);
      } catch (e) {
        if (typeof console !== "undefined") console.log("Could not create a template function: " + str);
        throw e;
      }
    };

    doT.compile = function(tmpl, def) {
      return doT.template(tmpl, null, def);
    };
  }());


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

  /* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(106).nextTick;
  var apply = Function.prototype.apply;
  var slice = Array.prototype.slice;
  var immediateIds = {};
  var nextImmediateId = 0;

  // DOM APIs, for completeness

  exports.setTimeout = function() {
    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
  };
  exports.setInterval = function() {
    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
  };
  exports.clearTimeout =
  exports.clearInterval = function(timeout) { timeout.close(); };

  function Timeout(id, clearFn) {
    this._id = id;
    this._clearFn = clearFn;
  }
  Timeout.prototype.unref = Timeout.prototype.ref = function() {};
  Timeout.prototype.close = function() {
    this._clearFn.call(window, this._id);
  };

  // Does not start the time, just sets up the members needed.
  exports.enroll = function(item, msecs) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = msecs;
  };

  exports.unenroll = function(item) {
    clearTimeout(item._idleTimeoutId);
    item._idleTimeout = -1;
  };

  exports._unrefActive = exports.active = function(item) {
    clearTimeout(item._idleTimeoutId);

    var msecs = item._idleTimeout;
    if (msecs >= 0) {
      item._idleTimeoutId = setTimeout(function onTimeout() {
        if (item._onTimeout)
          item._onTimeout();
      }, msecs);
    }
  };

  // That's not how node.js implements it but the exposed api is the same.
  exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
    var id = nextImmediateId++;
    var args = arguments.length < 2 ? false : slice.call(arguments, 1);

    immediateIds[id] = true;

    nextTick(function onNextTick() {
      if (immediateIds[id]) {
        // fn.call() is faster so we optimize for the common use-case
        // @see http://jsperf.com/call-apply-segu
        if (args) {
          fn.apply(null, args);
        } else {
          fn.call(null);
        }
        // Prevent ids from leaking
        exports.clearImmediate(id);
      }
    });

    return id;
  };

  exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
    delete immediateIds[id];
  };
  /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(105).setImmediate, __webpack_require__(105).clearImmediate))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

  // shim for using process in browser

  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = setTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              currentQueue[queueIndex].run();
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      clearTimeout(timeout);
  }

  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          setTimeout(drainQueue, 0);
      }
  };

  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};

  function noop() {}

  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;

  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };

  // TODO(shtylman)
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };


/***/ }
/******/ ])
});
;
(function() {


}).call(this);
(function() {


}).call(this);
(function() {
  $(function() {
    return $('.new_butt').click(function() {
      return $('.loaderd').show('slow');
    });
  });

}).call(this);
(function() {


}).call(this);
(function() {


}).call(this);
(function() {
  $(function() {
    return $('.edit_butt').click(function() {
      return $('.loaderd').show('slow');
    });
  });

}).call(this);
// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//





$(function() {

/* global ImglyKit */
"use strict";
window.onload = function() {
  /*
   * Initialize ImglyKit
   */
  var kit = new ImglyKit({
    renderer: "canvas", // Defaults to "webgl", uses "canvas" as fallback
    assetsUrl: "/imglykit/assets", // The URL / path where all assets are
    container: document.querySelector("#container"),
    ui: {
      enabled: true,
      showExportButton: true,
      export: {
        type: ImglyKit.ImageFormat.JPEG
      }
    },
    renderOnWindowResize: true // Our editor's size is relative to the window size
  });

  kit.run();

  /*
   * We have a "Render" button which (on click) will request the rendered
   * image from ImglyKit and add it to the DOM
   */
  var button = document.getElementById("render-button");
  button.addEventListener("click", function (e) {
    e.preventDefault();

    // This will render the image with 100 pixels in width while
    // respecting the aspect ratio
    // Possible render types: image, data-url
    var image = kit.render("image", "image/png")
      .then(function (image) {
        document.body.appendChild(image);
      });
  });
  
    // Let `kit` be your ImglyKit instance
    kit.render("data-url", "image/png")
      .then(function (dataUrl) {
     
      $.ajax({
      type: "POST",
      url: "microposts/create",
      data: {
        image: dataUrl
      }
    }).done(function(o) {
      console.log('saved');
    });
     
 });
  
  
};



});



